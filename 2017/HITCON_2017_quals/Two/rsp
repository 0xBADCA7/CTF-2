0x00000000000cd23d : adc ah, byte ptr [rcx + rcx*4 + 0x2b] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008197d : adc al, 0 ; add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; mov dword ptr [rsp + 0x10], eax ; pop r12 ; ret
0x00000000000c9002 : adc al, 0 ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a5bb0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64b0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92b0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9257 ; call rbx
0x000000000019cab0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000001a8ea8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001acaa8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x0000000000198bb8 : adc al, 0x13 ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x000000000007d37b : adc al, 0x48 ; mov eax, dword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000203e6 : adc al, 0x48 ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000196b00 : adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198188 : adc al, 0x57 ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000195d48 : adc al, 0x6a ; out dx, eax ; jmp rsp
0x0000000000196b50 : adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b80 : adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000196a00 : adc al, 0xaa ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000126798 : adc al, 0xac ; idiv bh ; add rsp, 8 ; lea eax, dword ptr [rbx + rbp] ; pop rbx ; pop rbp ; ret
0x00000000000a0e1b : adc al, 0xb8 ; and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000198bc1 : adc al, 0xfa ; call rsp
0x00000000001993c9 : adc al, 0xfb ; call rsp
0x000000000006e51f : adc al, 0xfb ; dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x00000000000c800f : adc al, 0xff ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001961e5 : adc al, 1 ; add byte ptr [rdi + rbp - 0xf], al ; call rsp
0x00000000000cd0ba : adc bl, byte ptr [rbp + 0x448b0004] ; and al, 0xc ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000002c2c4 : adc byte ptr [r8 - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000002c2c5 : adc byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000007da47 : adc byte ptr [rax - 0x75], cl ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000010bd1c : adc byte ptr [rax - 0x75], cl ; and al, 8 ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd7d : adc byte ptr [rax - 0x75], cl ; and al, 8 ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x000000000006bbdf : adc byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0x6bc0f ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000010772e : adc byte ptr [rax - 0x7b], cl ; sal byte ptr [rsp + rcx + 0x48], cl ; cmp edi, edx ; jne 0x107737 ; mov rax, qword ptr [rax + 8] ; ret
0x0000000000035a1b : adc byte ptr [rax - 1], bh ; add rsp, 0xd0 ; ret
0x0000000000053719 : adc byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 0x100 ; mov qword ptr [rsp + 8], rdx ; call 0x1f990
0x00000000001acaa3 : adc byte ptr [rbx + 0xe], ah ; or byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x0000000000130d4d : adc byte ptr [rbx - 0x3d], bl ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x00000000000ba40b : adc byte ptr [rbx - 0x3d], bl ; nop ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000000ba734 : adc byte ptr [rcx], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007693f : adc byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000003b01e : adc byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000148ae1 : adc byte ptr [rdi], cl ; xchg byte ptr [rsp + rcx - 0x7cb80000], ch ; ret 0xeb10
0x00000000001ada9b : adc byte ptr [rdx + rax - 0x79e7f1bc], cl ; add eax, dword ptr [rsi + rcx + 0x20] ; add dword ptr [rsp + rbp*2], 0xa ; ret
0x00000000000f8d4e : adc byte ptr [rdx], al ; cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x000000000003b25a : adc byte ptr [rsp + 8], al ; add rsp, 0x18 ; ret
0x000000000004a992 : adc byte ptr [rsp + rbp*4 + 0x49], dh ; sub eax, 4 ; cmp rdi, r8 ; jbe 0x4a9a0 ; nop ; pop rbx ; ret
0x0000000000000453 : adc byte ptr [rsp + rcx], bl ; ret 0x4412
0x0000000000193e54 : adc byte ptr [rsp + rdi*8 - 1], bl ; nop ; pop rbp ; cld ; call qword ptr [rax]
0x0000000000193864 : adc byte ptr [rsp + rdi*8 - 1], cl ; adc byte ptr [rsi - 4], cl ; call qword ptr [rax]
0x00000000000bbcea : adc byte ptr [rsp - 0x10], al ; ret
0x000000000004a60f : adc byte ptr [rsp - 4], al ; ret
0x000000000004a655 : adc byte ptr [rsp - 8], al ; ret
0x0000000000102f5a : adc ch, byte ptr [rax + rax] ; add rsp, 8 ; ret
0x0000000000055a8a : adc cl, byte ptr [rax + rax] ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000020743 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb62 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x0000000000047bbf : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000089920 : adc dword ptr [rax], eax ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003b3e2 : adc dword ptr [rbx], eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000100d3e : adc dword ptr [rcx + 0x800008], eax ; add byte ptr [rax + 1], bh ; add rsp, 8 ; ret
0x000000000010e416 : adc dword ptr [rcx], esi ; rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x00000000000c7f1e : adc dword ptr [rsi - 0x20], edi ; cmp esi, edi ; jge 0xc7f0b ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013ebf2 : adc dword ptr [rsp + 0x28], eax ; call rdx
0x000000000013d202 : adc eax, 0x2175db85 ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000143970 : adc eax, 0x27cc6b ; mov qword ptr [rip + 0x27ea74], rdx ; add rsp, 8 ; ret
0x0000000000143977 : adc eax, 0x27ea74 ; add rsp, 8 ; ret
0x000000000013abab : adc eax, 0x28b3f0 ; cmp rax, rdx ; je 0x13abce ; add rsp, 8 ; ret
0x00000000001192ea : adc eax, 0x2b89d509 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000101001 : adc eax, 0x2c30ea ; add rsp, 8 ; ret
0x00000000000c04ba : adc eax, 0x300989 ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000c04a4 : adc eax, 0x303697 ; jne 0xc04c6 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000909e9 : adc eax, 0x332f1a ; add rsp, 0x100 ; ret
0x000000000008b892 : adc eax, 0x3356c1 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b612 : adc eax, 0x335941 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b55a : adc eax, 0x3359f9 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008a9e1 : adc eax, 0x338e1a ; add rsp, 0x18 ; ret
0x0000000000121aa0 : adc eax, 0x6727b ; mov eax, dword ptr [rdx + rax*8 + 4] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f8c9a : adc eax, 0xb424448b ; mov edx, eax ; neg eax ; cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x000000000013d7ea : adc eax, 0xb82b8840 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000012f24e : adc eax, 0xe00d ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000bc8c9 : adc eax, 0xffffff52 ; test rax, rax ; cmove rax, rdx ; add rsp, 0x28 ; ret
0x00000000000bc7e9 : adc eax, 0xffffff72 ; test rax, rax ; cmove rax, rdx ; add rsp, 0x28 ; ret
0x000000000019970d : adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000199705 : adc eax, dword ptr [rcx] ; add byte ptr [rsi + rbx*4], dh ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x00000000000a04a8 : adc eax, esi ; add byte ptr [rax], al ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000004ab4c : adc eax, esi ; add eax, dword ptr [rax] ; mov rax, rbx ; add rsp, 0x440 ; pop rbx ; ret
0x000000000007723b : adc ebx, edi ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x00000000000db19a : adc ecx, dword ptr [rax - 0x7b] ; sal byte ptr [rbp - 0x40], cl ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000035d24 : adc ecx, dword ptr [rbx + 0x802484] ; add byte ptr [rax], al ; add rsp, 0x108 ; ret
0x0000000000036150 : adc ecx, dword ptr [rbx - 0x7cd7dbac] ; loop 0x36169 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x0000000000063e53 : adc ecx, dword ptr [rcx + 0x415d5b28] ; pop rsp ; ret
0x0000000000198bb9 : adc edi, edx ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x00000000001949c1 : adc edx, ebp ; call rsp
0x0000000000071d59 : adc esi, dword ptr [rsp + rdx - 0xa] ; ret 0x7420
0x000000000019644f : add ah, ah ; and dh, dl ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000198097 : add ah, ah ; clc ; call rsp
0x0000000000198aef : add ah, ah ; in al, dx ; stc ; jmp rsp
0x0000000000195d7f : add ah, ah ; jo 0x195d7e ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000019572f : add ah, ah ; out dx, al ; call rsp
0x0000000000195d3f : add ah, ah ; out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x000000000019825f : add ah, ah ; push 0xf8 ; jmp rsp
0x000000000019584f : add ah, ah ; push rdi ; out dx, al ; call rsp
0x0000000000194b3f : add ah, ah ; sub ebp, edx ; call rsp
0x0000000000195e17 : add ah, ah ; xchg eax, ecx ; out dx, eax ; jmp rsp
0x0000000000194b7f : add ah, ah ; xor dl, ch ; jmp rsp
0x0000000000196767 : add ah, al ; dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x0000000000198e57 : add ah, al ; insd dword ptr [rdi], dx ; cli ; call rsp
0x0000000000198ed7 : add ah, al ; jbe 0x198ee1 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000195707 : add ah, al ; out dx, al ; lcall ptr [rsp + rcx*8 + 0x3f840000] ; out dx, al ; jmp rsp
0x000000000019872f : add ah, al ; push 0xf9 ; jmp rsp
0x000000000019565f : add ah, al ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x00000000001a7253 : add ah, bh ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000187e04 : add ah, bl ; cmc ; call rsp
0x0000000000196a8f : add ah, dh ; and al, 0xf4 ; call rsp
0x000000000019807f : add ah, dh ; clc ; jmp rsp
0x000000000019551f : add ah, dh ; cld ; in eax, dx ; jmp rsp
0x0000000000195e6f : add ah, dh ; mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000195a27 : add ah, dh ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x00000000001988d7 : add ah, dh ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019676f : add ah, dl ; call rsp
0x0000000000199327 : add ah, dl ; clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000195157 : add ah, dl ; jg 0x19514b ; call rsp
0x000000000019592f : add ah, dl ; jle 0x195925 ; call rsp
0x0000000000196267 : add ah, dl ; jns 0x196260 ; jmp rsp
0x000000000019697f : add ah, dl ; lahf ; dec esp ; add qword ptr [rax], rax ; add al, 0xa0 ; jmp rsp
0x0000000000197c37 : add ah, dl ; mov bh, dh ; dec esp ; mov al, 1 ; add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x000000000019686f : add ah, dl ; mov bl, dh ; jmp rsp
0x0000000000197f87 : add ah, dl ; sub bh, al ; call rsp
0x000000000019837f : add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000195e3f : add ah, dl ; xchg eax, esp ; out dx, eax ; call rsp
0x000000000012f193 : add al, 0 ; add byte ptr [rax], al ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000c9552 : add al, 0 ; add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000122bed : add al, 0 ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ffdec : add al, 0 ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000017ee75 : add al, 0 ; add byte ptr [rsp + rax + 0x4be0000], bh ; add byte ptr [rax], al ; rol byte ptr [rax + rax], 0 ; ret 4
0x00000000000c8e5e : add al, 0 ; add rsp, 0x80 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ca389 : add al, 0 ; add rsp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x00000000000c8dd0 : add al, 0 ; add rsp, 0x80 ; pop rbx ; ret
0x000000000004acc1 : add al, 0 ; lea rax, qword ptr [rax + rbx] ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000cd0bc : add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd020 : add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cd1b3 : add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000014831b : add al, 0x16 ; sbb cl, byte ptr [rdi] ; xchg byte ptr [rsp + rax], cl ; add byte ptr [rax - 0x7d], cl ; ret 0xeb10
0x000000000004acc5 : add al, 0x18 ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013d24a : add al, 0x24 ; add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x000000000004a7aa : add al, 0x24 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cd251 : add al, 0x24 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000f7f6d : add al, 0x24 ; add rsp, 0x18 ; ret
0x0000000000070461 : add al, 0x24 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000dcfca : add al, 0x24 ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000010bd24 : add al, 0x24 ; add rsp, 0x38 ; ret
0x000000000010bd85 : add al, 0x24 ; add rsp, 0x40 ; ret
0x0000000000020747 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb66 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x0000000000047bc3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x00000000001995a8 : add al, 0x35 ; sti ; lcall ptr [rsi + rax + 2] ; add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x00000000001986a8 : add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000127aac : add al, 0x48 ; add edx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x0000000000071835 : add al, 0x48 ; mov dword ptr [rax + 0x20], ecx ; mov dword ptr [rdx], ebx ; add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x00000000000735db : add al, 0x48 ; mov dword ptr [rax], edx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000044f9f : add al, 0x48 ; mov dword ptr [rbp], ebx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000131a18 : add al, 0x48 ; mov dword ptr [rbx + 0x20], eax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000073408 : add al, 0x48 ; mov dword ptr [rdx], ecx ; mov edx, dword ptr [rax] ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000ac730 : add al, 0x49 ; mov dword ptr [rsp], eax ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000196718 : add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x00000000000ad19f : add al, 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x0000000000196b4c : add al, 0x57 ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198190 : add al, 0x58 ; clc ; call rsp
0x0000000000196470 : add al, 0x5e ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000198708 : add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000195898 : add al, 0x62 ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x00000000000e4c52 : add al, 0x82 ; mov rbp, rsi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x00000000000ba731 : add al, 0x83 ; adc byte ptr [rcx], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f8120 : add al, 0x8b ; and al, 0xc ; add rsp, 0x10 ; pop rbx ; ret
0x000000000010a239 : add al, 0x8b ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000196898 : add al, 0x8d ; jmp rsp
0x0000000000198f90 : add al, 0x8f ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000196380 : add al, 0x98 ; int1 ; call rsp
0x0000000000196988 : add al, 0xa0 ; jmp rsp
0x0000000000196a08 : add al, 0xab ; jmp rsp
0x00000000001983d8 : add al, 0xaf ; clc ; jmp rsp
0x0000000000195320 : add al, 0xb5 ; in eax, dx ; jmp rsp
0x0000000000198950 : add al, 0xbb ; stc ; call rsp
0x00000000000c8013 : add al, 0xd0 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000050a9c : add al, 0xd1 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000001255b3 : add al, 0xf ; test dword ptr [rbp - 0x7afffffe], ecx ; sal byte ptr [rsp + rcx - 0xa], cl ; ret 0xc602
0x000000000002b46f : add al, 0xf0 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000195fcd : add al, 1 ; add byte ptr [rax + rbx*8 - 0x11], al ; call rsp
0x0000000000199205 : add al, byte ptr [r8] ; je 0x1991e7 ; cli ; jmp rsp
0x0000000000126945 : add al, byte ptr [r8] ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019909d : add al, byte ptr [r8] ; xor al, 0xa3 ; cli ; call rsp
0x0000000000198bb6 : add al, byte ptr [rax] ; adc al, 0x13 ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x00000000001993c6 : add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x00000000001995a6 : add al, byte ptr [rax] ; add al, 0x35 ; sti ; lcall ptr [rsi + rax + 2] ; add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x0000000000198f8e : add al, byte ptr [rax] ; add al, 0x8f ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x000000000019894e : add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000033ea6 : add al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010aeda : add al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f0b9 : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000001397c1 : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000013d24c : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x000000000003a308 : add al, byte ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001148cb : add al, byte ptr [rax] ; add byte ptr [rbp + 0x2f], dh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000143917 : add al, byte ptr [rax] ; add byte ptr [rbp + 0x483278c0], al ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000781c7 : add al, byte ptr [rax] ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; ret
0x00000000001bca05 : add al, byte ptr [rax] ; add byte ptr [rsp + rax], ah ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 3
0x0000000000139f85 : add al, byte ptr [rax] ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bcc0 : add al, byte ptr [rax] ; add rsp, 0x1000 ; pop rbx ; ret
0x0000000000056640 : add al, byte ptr [rax] ; add rsp, 0xd8 ; ret
0x000000000019947e : add al, byte ptr [rax] ; and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000198df6 : add al, byte ptr [rax] ; and al, 0x68 ; cli ; jmp rsp
0x0000000000198ede : add al, byte ptr [rax] ; and al, 0x77 ; cli ; call rsp
0x00000000001988d6 : add al, byte ptr [rax] ; hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000198aee : add al, byte ptr [rax] ; in al, -0x14 ; stc ; jmp rsp
0x000000000019939e : add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000198f96 : add al, byte ptr [rax] ; je 0x198f2e ; cli ; call rsp
0x0000000000199206 : add al, byte ptr [rax] ; je 0x1991e6 ; cli ; jmp rsp
0x000000000019932e : add al, byte ptr [rax] ; je 0x199330 ; cli ; call rsp
0x00000000001995ae : add al, byte ptr [rax] ; je 0x1995ec ; sti ; jmp rsp
0x0000000000198bbe : add al, byte ptr [rax] ; mov ah, 0x14 ; cli ; call rsp
0x00000000001993fe : add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000198f6e : add al, byte ptr [rax] ; mov ah, 0x8d ; cli ; jmp rsp
0x0000000000199396 : add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000126946 : add al, byte ptr [rax] ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000198946 : add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x000000000019959e : add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x0000000000198d3e : add al, byte ptr [rax] ; push rsp ; cli ; jmp rsp
0x00000000001990d6 : add al, byte ptr [rax] ; push rsp ; movsd dword ptr [rdi], dword ptr [rsi] ; cli ; jmp rsp
0x0000000000198bf6 : add al, byte ptr [rax] ; push rsp ; sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001991ae : add al, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x0000000000198bfe : add al, byte ptr [rax] ; xor al, 0x1c ; cli ; call rsp
0x000000000019909e : add al, byte ptr [rax] ; xor al, 0xa3 ; cli ; call rsp
0x00000000001ac389 : add al, byte ptr [rcx + 0x283100e] ; push rsp ; ret
0x0000000000077239 : add al, ch ; adc ebx, edi ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x000000000010a7ca : add al, ch ; and dl, dh ; dec dword ptr [rax - 0x7b] ; sal byte ptr [rsp + rdx + 0x48], 0x89 ; ret
0x0000000000077329 : add al, ch ; and edx, edi ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x000000000007786e : add al, ch ; fdivr st(4), st(0) ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000077459 : add al, ch ; int1 ; clc ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000077ad4 : add al, ch ; jbe 0x77ada ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000000c8dcc : add al, ch ; jle 0xc8dbd ; add al, 0 ; add rsp, 0x80 ; pop rbx ; ret
0x0000000000079ada : add al, ch ; jo 0x79ac0 ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x0000000000071a9d : add al, ch ; lodsd eax, dword ptr [rsi] ; push rdx ; or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000000fddc3 : add al, ch ; mov bh, 7 ; add byte ptr [rax], al ; add rsp, 0x18 ; ret
0x0000000000124707 : add al, ch ; movsxd rcx, ecx ; idiv edi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000077ee4 : add al, ch ; out dx, al ; or dword ptr [rax], eax ; add rsp, 0x80 ; pop rbx ; ret
0x00000000001a7257 : add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x00000000001a8e97 : add al, ch ; push rsp ; jmp qword ptr [rcx]
0x000000000007714d : add al, ch ; std ; sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x0000000000199fd7 : add al, ch ; test eax, ebp ; call rsp
0x0000000000080be4 : add al, ch ; xchg byte ptr [rax], ah ; or byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000086717 : add al, ch ; xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x00000000001a5a7f : add al, dh ; lodsb al, byte ptr [rsi] ; cli ; call rsp
0x000000000012f632 : add bh, bh ; mov ah, 0x24 ; enter 0, 0 ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000013e891 : add bh, byte ptr [rax + 1] ; jne 0x13e876 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011751f : add bh, byte ptr [rax - 1] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000102af8 : add bh, byte ptr [rdi + 0x3d] ; add rsp, 0x90 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f813c : add bh, dh ; fisub dword ptr [rcx + rcx*4 + 0x10] ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000198237 : add byte ptr [0xffffffffd59cfff8], ah ; add dword ptr [rax], eax ; and al, 0x66 ; clc ; jmp rsp
0x00000000000bb981 : add byte ptr [r8], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r14 ; ret
0x000000000013ac0f : add byte ptr [rax + 0x39], cl ; sal byte ptr [rbx + rcx + 0x48], 1 ; add eax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac3f : add byte ptr [rax + 0x39], cl ; sal byte ptr [rbx + rcx + 0x48], 1 ; add eax, 0xa8 ; add rsp, 8 ; ret
0x000000000013abdf : add byte ptr [rax + 0x39], cl ; sal byte ptr [rbx + rcx + 0x48], 1 ; sub eax, -0x80 ; add rsp, 8 ; ret
0x000000000003adb9 : add byte ptr [rax + 0x63], cl ; and al, 0xc ; add rsp, 0x18 ; ret
0x000000000011b201 : add byte ptr [rax + 0xca], bh ; add rsp, 0x28 ; ret
0x000000000014637f : add byte ptr [rax + 0xf247c], al ; jne 0x14639e ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000000fe9c7 : add byte ptr [rax + 0xf], cl ; add al, 0x24 ; add rsp, 0x18 ; ret
0x00000000000ba7bc : add byte ptr [rax + 1], bh ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006f8b6 : add byte ptr [rax + 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000100d44 : add byte ptr [rax + 1], bh ; add rsp, 8 ; ret
0x000000000019804f : add byte ptr [rax + rax*2], ah ; clc ; call rsp
0x000000000019f1ff : add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000000ffdeb : add byte ptr [rax + rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000199fcf : add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a724f : add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x00000000001af87f : add byte ptr [rax + rax], bl ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x0000000000088d7b : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000122f39 : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x0000000000110589 : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a9daf : add byte ptr [rax + rax], cl ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000000c9001 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a5baf : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64af : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92af : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9258 ; call rbx
0x00000000001a8ea7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001acaa7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a25c7 : add byte ptr [rax + rax], dl ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x0000000000194b1f : add byte ptr [rax + rbp - 0x16], dl ; jmp rsp
0x0000000000195027 : add byte ptr [rax + rbp*2 - 0x15], ah ; call rsp
0x0000000000198df7 : add byte ptr [rax + rbp*2], ah ; cli ; jmp rsp
0x000000000019710f : add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197124 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000196ca7 : add byte ptr [rax + rbp*2], dh ; cmc ; call rsp
0x000000000019f203 : add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001967a7 : add byte ptr [rax + rbx*2 - 0xd], ah ; call rsp
0x000000000019818f : add byte ptr [rax + rbx*2], al ; clc ; call rsp
0x000000000019637f : add byte ptr [rax + rbx*4], al ; int1 ; call rsp
0x0000000000195fcf : add byte ptr [rax + rbx*8 - 0x11], al ; call rsp
0x000000000019574f : add byte ptr [rax + rcx*2 - 0x31330012], al ; add byte ptr [rax], al ; mov ah, 0x48 ; out dx, al ; jmp rsp
0x0000000000196b57 : add byte ptr [rax + rdi*2 - 0xc], ah ; call rsp
0x0000000000197d3f : add byte ptr [rax + rdi*4 - 9], dl ; jmp rsp
0x0000000000196b87 : add byte ptr [rax + rdx*4 - 0xc], al ; call rsp
0x0000000000101041 : add byte ptr [rax - 0x39], cl ; add eax, 0x2c30a3 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000c800c : add byte ptr [rax - 0x73], cl ; adc al, 0xff ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000012f24b : add byte ptr [rax - 0x73], cl ; adc eax, 0xe00d ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000004acc2 : add byte ptr [rax - 0x73], cl ; add al, 0x18 ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000ad19b : add byte ptr [rax - 0x73], cl ; add al, 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x00000000001034cd : add byte ptr [rax - 0x73], cl ; add eax, 0x2c0d4b ; add rsp, 0x18 ; ret
0x0000000000102f55 : add byte ptr [rax - 0x73], cl ; add eax, 0x2c1273 ; add rsp, 8 ; ret
0x00000000000ff539 : add byte ptr [rax - 0x73], cl ; add eax, 0x2c4a57 ; add rsp, 8 ; ret
0x000000000003b34f : add byte ptr [rax - 0x73], cl ; add eax, 0x38b0ff ; add rsp, 8 ; ret
0x0000000000022b6f : add byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000001725bb : add byte ptr [rax - 0x73], cl ; sbb eax, 0x24b1dd ; sub rsp, 8 ; call 0x7e8ae
0x000000000008b557 : add byte ptr [rax - 0x75], cl ; adc eax, 0x3359f9 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000135ff6 : add byte ptr [rax - 0x75], cl ; add al, 0x24 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013abbf : add byte ptr [rax - 0x75], cl ; add eax, 0x2863c1 ; add rsp, 8 ; ret
0x0000000000102eb6 : add byte ptr [rax - 0x75], cl ; add eax, 0x2bf8ca ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bd494 : add byte ptr [rax - 0x75], cl ; add eax, 0x30903c ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001462d5 : add byte ptr [rax - 0x75], cl ; and al, 0x38 ; jne 0x1462c4 ; add rsp, 0x48 ; ret
0x0000000000109d34 : add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003b2a7 : add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x000000000013dd7f : add byte ptr [rax - 0x75], cl ; or byte ptr [r9 + r9*4 + 0x44], r9b ; and al, 8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000146367 : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x38 ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x0000000000088477 : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391ef : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000003946f : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000143974 : add byte ptr [rax - 0x77], cl ; adc eax, 0x27ea74 ; add rsp, 8 ; ret
0x000000000008fb22 : add byte ptr [rax - 0x77], cl ; add eax, 0x333d5e ; add rsp, 8 ; ret
0x0000000000084177 : add byte ptr [rax - 0x77], cl ; and al, 8 ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x000000000012f196 : add byte ptr [rax - 0x77], cl ; out dx, eax ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000053721 : add byte ptr [rax - 0x77], cl ; push rsp ; and al, 8 ; call 0x1f988
0x0000000000147038 : add byte ptr [rax - 0x77], cl ; sbb byte ptr [rax + 1], bh ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ba3ff : add byte ptr [rax - 0x77], cl ; xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000044f9a : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0x44fb4 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004501a : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0x45034 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000450c8 : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0x450e2 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b650b : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0xb6525 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b65b9 : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0xb65d3 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b665b : add byte ptr [rax - 0x7b], cl ; in eax, dx ; je 0xb6675 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000098333 : add byte ptr [rax - 0x7b], cl ; push qword ptr [rdx + rdx*8 + 0x49] ; mov esi, dword ptr [rsp] ; test rsi, rsi ; jne 0x9835c ; jmp 0x98316
0x000000000008d82e : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rsp + rcx + 0x5b], 0x5d ; pop r12 ; ret
0x000000000007354f : add byte ptr [rax - 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019f207 : add byte ptr [rax - 1], bl ; in al, dx ; call rsp
0x0000000000195ecf : add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x000000000007714a : add byte ptr [rax], 0 ; add al, ch ; std ; sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000003adb6 : add byte ptr [rax], 0 ; add byte ptr [rax + 0x63], cl ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000135ff3 : add byte ptr [rax], 0 ; add byte ptr [rax - 0x75], cl ; add al, 0x24 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d87b : add byte ptr [rax], 0 ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000114b43 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; add rsp, 8 ; mov eax, 7 ; pop rbx ; pop rbp ; ret
0x0000000000130dbb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x00000000001236bb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov rdi, qword ptr [rsp + 0x28] ; call 0x1f9c4
0x0000000000088473 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000c7f53 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121233 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000047ee5 : add byte ptr [rax], 0 ; add byte ptr [rbx - 0x77], bl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x00000000000ca38e : add byte ptr [rax], 0 ; add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 0x18 ; ret
0x00000000000ca458 : add byte ptr [rax], 0 ; add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 8 ; ret
0x00000000000808f8 : add byte ptr [rax], 0 ; add byte ptr [rcx + rcx*4 - 0x40], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ca537 : add byte ptr [rax], 0 ; add byte ptr [rsp + rax*2 - 0x77], ah ; add cl, byte ptr [rcx - 0x3b7cb710] ; ret
0x00000000000ffbed : add byte ptr [rax], 0 ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000100d42 : add byte ptr [rax], 0 ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000131e94 : add byte ptr [rax], ah ; add byte ptr [rax], al ; jbe 0x131eb8 ; mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x0000000000195a2f : add byte ptr [rax], ah ; out dx, al ; jmp rsp
0x00000000001a5bae : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64ae : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92ae : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9259 ; call rbx
0x00000000001a8ea6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x0000000000195d46 : add byte ptr [rax], al ; adc al, 0x6a ; out dx, eax ; jmp rsp
0x00000000001949be : add byte ptr [rax], al ; adc edx, ebp ; call rsp
0x00000000001a7251 : add byte ptr [rax], al ; add ah, bh ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000195896 : add byte ptr [rax], al ; add al, 0x62 ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x000000000019531e : add byte ptr [rax], al ; add al, 0xb5 ; in eax, dx ; jmp rsp
0x00000000001ac387 : add byte ptr [rax], al ; add al, byte ptr [rcx + 0x283100e] ; push rsp ; ret
0x00000000000c8dca : add byte ptr [rax], al ; add al, ch ; jle 0xc8dbf ; add al, 0 ; add rsp, 0x80 ; pop rbx ; ret
0x0000000000124705 : add byte ptr [rax], al ; add al, ch ; movsxd rcx, ecx ; idiv edi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000077ee2 : add byte ptr [rax], al ; add al, ch ; out dx, al ; or dword ptr [rax], eax ; add rsp, 0x80 ; pop rbx ; ret
0x000000000007714b : add byte ptr [rax], al ; add al, ch ; std ; sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x0000000000086715 : add byte ptr [rax], al ; add al, ch ; xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000012f630 : add byte ptr [rax], al ; add bh, bh ; mov ah, 0x24 ; enter 0, 0 ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000003adb7 : add byte ptr [rax], al ; add byte ptr [rax + 0x63], cl ; and al, 0xc ; add rsp, 0x18 ; ret
0x000000000014637d : add byte ptr [rax], al ; add byte ptr [rax + 0xf247c], al ; jne 0x1463a0 ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000019f1fd : add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fcd : add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a724d : add byte ptr [rax], al ; add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x00000000001af87d : add byte ptr [rax], al ; add byte ptr [rax + rax], bl ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x00000000001a9dad : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000001a5bad : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64ad : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92ad : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925a ; call rbx
0x00000000001a8ea5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001a25c5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x000000000019f201 : add byte ptr [rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x000000000012f249 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; adc eax, 0xe00d ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000135ff4 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; add al, 0x24 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000bd492 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; add eax, 0x30903c ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000088475 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000003946d : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x000000000012f194 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, eax ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000ba3fd : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000008d82c : add byte ptr [rax], al ; add byte ptr [rax - 0x7b], cl ; sal byte ptr [rsp + rcx + 0x5b], 0x5d ; pop r12 ; ret
0x000000000007354d : add byte ptr [rax], al ; add byte ptr [rax - 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001a5bac : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64ac : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92ac : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925b ; call rbx
0x00000000001a8ea4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001ac385 : add byte ptr [rax], al ; add byte ptr [rax], al ; add al, byte ptr [rcx + 0x283100e] ; push rsp ; ret
0x000000000019f1fb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fcb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a5bab : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64ab : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92ab : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925c ; call rbx
0x00000000001a8ea3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5a3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a47a3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x00000000001a41a3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001a25c3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x000000000007354b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001a5baa : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a5ba9 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a5ba8 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a5ba7 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a5ba6 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a5ba5 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; ret 0
0x0000000000074b6e : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019f1fc : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fcc : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a9dac : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x000000000013131b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000c8964 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000127852 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ccaa8 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000a0fad : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d87c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000c86c2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000036cb3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x00000000000fe33c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012e65c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; mov eax, 0x10 ; pop rbx ; pop rbp ; ret
0x00000000001439a9 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x0000000000114b44 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; mov eax, 7 ; pop rbx ; pop rbp ; ret
0x000000000009673f : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000074b70 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000021625 : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ff9fc : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000fccbc : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d80c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000017d68c : add byte ptr [rax], al ; add byte ptr [rax], al ; call rsp
0x00000000001175f8 : add byte ptr [rax], al ; add byte ptr [rax], al ; cmova eax, edx ; add rsp, 0x28 ; ret
0x00000000000cbb90 : add byte ptr [rax], al ; add byte ptr [rax], al ; cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000143441 : add byte ptr [rax], al ; add byte ptr [rax], al ; cmovne rax, rdx ; add rsp, 8 ; ret
0x0000000000089c1a : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp rax, 0xff ; cmove rax, rdx ; add rsp, 8 ; ret
0x00000000000fdd4b : add byte ptr [rax], al ; add byte ptr [rax], al ; mov byte ptr [rax + 0xc], 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x00000000000dadaa : add byte ptr [rax], al ; add byte ptr [rax], al ; mov dword ptr [rcx + 0x40], 0xffffffff ; add rsp, 0x10 ; pop rbx ; ret
0x000000000007354c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000075edc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rdx] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013e8b8 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013d47c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rbx + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x0000000000130dbc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x00000000000ff3eb : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rsp - 0x50] ; ret
0x00000000001236bc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, qword ptr [rsp + 0x28] ; call 0x1f9c3
0x0000000000088474 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000003946c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000086dfc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000035320 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x00000000000352fe : add byte ptr [rax], al ; add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000001a1b84 : add byte ptr [rax], al ; add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rax*4], dh ; add byte ptr [rax], al ; nop ; xchg eax, esp ; in eax, dx ; call qword ptr [rcx]
0x000000000011765c : add byte ptr [rax], al ; add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000001a25c4 : add byte ptr [rax], al ; add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x0000000000100d7f : add byte ptr [rax], al ; add byte ptr [rax], al ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x000000000007e11a : add byte ptr [rax], al ; add byte ptr [rax], al ; test byte ptr [rbx], 0x80 ; jne 0x7e13f ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007e119 : add byte ptr [rax], al ; add byte ptr [rax], al ; test byte ptr [rbx], 0x80 ; jne 0x7e140 ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000c7f54 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121234 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x000000000003b0bc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019f1fe : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fce : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a9dae : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x000000000008197f : add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; mov dword ptr [rsp + 0x10], eax ; pop r12 ; ret
0x000000000005590c : add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000559dc : add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; ret
0x000000000008a761 : add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; pop rsp ; ret
0x00000000000f7016 : add byte ptr [rax], al ; add byte ptr [rbp + 0xd], dh ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000013e894 : add byte ptr [rax], al ; add byte ptr [rbp - 0x33], dh ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000299ee : add byte ptr [rax], al ; add byte ptr [rbx + 0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000ce36e : add byte ptr [rax], al ; add byte ptr [rbx + 0x41], bl ; pop rsp ; pop r13 ; pop rbp ; ret
0x0000000000146fd7 : add byte ptr [rax], al ; add byte ptr [rbx - 0x3d], bl ; nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x0000000000047ee6 : add byte ptr [rax], al ; add byte ptr [rbx - 0x77], bl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x00000000000996a0 : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bc8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000146f0f : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ca1e8 : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000098830 : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f8acc : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; ret
0x0000000000102aff : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; ret
0x0000000000034392 : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000007805f : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000715f0 : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; ret
0x000000000011883d : add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bf0], cl ; pop rsp ; ret
0x00000000000ca38f : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 0x18 ; ret
0x00000000000ca459 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 8 ; ret
0x000000000012f0ba : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x11], cl ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000000808f9 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x40], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012eef2 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a96b : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x00000000000371d6 : add byte ptr [rax], al ; add byte ptr [rcx], dh ; imul al ; push rax ; add byte ptr [rax], r8b ; add rsp, 8 ; ret
0x000000000013580e : add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000089e10 : add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000bb982 : add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r14 ; ret
0x000000000003a4ea : add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000ca275 : add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000005371a : add byte ptr [rax], al ; add byte ptr [rdi + 0x100], bh ; mov qword ptr [rsp + 8], rdx ; call 0x1f98f
0x00000000001af881 : add byte ptr [rax], al ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x0000000000104cf3 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000199fd1 : add byte ptr [rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x0000000000035321 : add byte ptr [rax], al ; add byte ptr [rsi - 0x77], ah ; and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x00000000000352ff : add byte ptr [rax], al ; add byte ptr [rsi - 0x77], ah ; and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000f733d : add byte ptr [rax], al ; add byte ptr [rsi - 9], ah ; mov byte ptr [rax + 0x16b8ff], 0 ; add byte ptr [rsp + rax - 0xd], dh ; ret
0x00000000001a7df9 : add byte ptr [rax], al ; add byte ptr [rsp + 0x10b00000], ah ; call qword ptr [rbx]
0x00000000001a7e11 : add byte ptr [rax], al ; add byte ptr [rsp + 0x10b80000], bh ; call qword ptr [rbx]
0x00000000001a9db1 : add byte ptr [rax], al ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000000f7347 : add byte ptr [rax], al ; add byte ptr [rsp + rax - 0xd], dh ; ret
0x00000000000ca538 : add byte ptr [rax], al ; add byte ptr [rsp + rax*2 - 0x77], ah ; add cl, byte ptr [rcx - 0x3b7cb710] ; ret
0x00000000001a45e1 : add byte ptr [rax], al ; add byte ptr [rsp + rbp*4 - 0x3ae80000], cl ; out dx, al ; call qword ptr [rax]
0x00000000001a4589 : add byte ptr [rax], al ; add byte ptr [rsp + rbp*4], dh ; add byte ptr [rax], al ; push rax ; ret
0x00000000001b8581 : add byte ptr [rax], al ; add byte ptr [rsp + rbp*8], ch ; add dword ptr [rax], eax ; sub byte ptr [rcx - 8], ah ; jmp qword ptr [rbx]
0x00000000001ab601 : add byte ptr [rax], al ; add byte ptr [rsp + rbx - 0x3557ffff], ch ; hlt ; call qword ptr [rcx]
0x00000000001ab5e9 : add byte ptr [rax], al ; add byte ptr [rsp + rbx - 0x356fffff], dl ; hlt ; jmp qword ptr [rcx]
0x00000000001ae611 : add byte ptr [rax], al ; add byte ptr [rsp + rcx*2 - 0x5427ffff], bh ; cmc ; jmp qword ptr [rcx]
0x00000000001ae5f9 : add byte ptr [rax], al ; add byte ptr [rsp + rcx*2 - 0x543fffff], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001ae5e1 : add byte ptr [rax], al ; add byte ptr [rsp + rcx*2 - 0x5457ffff], cl ; cmc ; jmp qword ptr [rcx]
0x00000000001ae569 : add byte ptr [rax], al ; add byte ptr [rsp + rcx*2], dl ; add dword ptr [rax], eax ; push rax ; stosd dword ptr [rdi], eax ; cmc ; jmp qword ptr [rcx]
0x00000000001a25c9 : add byte ptr [rax], al ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x00000000001ad5d9 : add byte ptr [rax], al ; add byte ptr [rsp + rdi + 0x58700001], al ; cmc ; jmp qword ptr [rcx]
0x00000000001ad5c1 : add byte ptr [rax], al ; add byte ptr [rsp + rdi + 1], ch ; add byte ptr [rax + 0x58], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001ad5a9 : add byte ptr [rax], al ; add byte ptr [rsp + rdi + 1], dl ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x00000000001ad591 : add byte ptr [rax], al ; add byte ptr [rsp + rdi], bh ; add dword ptr [rax], eax ; sub byte ptr [rax - 0xb], bl ; jmp qword ptr [rcx]
0x00000000001ad561 : add byte ptr [rax], al ; add byte ptr [rsp + rdi], cl ; add dword ptr [rax], eax ; clc ; push rdi ; cmc ; jmp qword ptr [rcx]
0x00000000001aee09 : add byte ptr [rax], al ; add byte ptr [rsp + rdx*2 - 0x480fffff], dh ; cmc ; jmp qword ptr [rcx]
0x00000000001aedf1 : add byte ptr [rax], al ; add byte ptr [rsp + rdx*2 - 0x4827ffff], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001b6e01 : add byte ptr [rax], al ; add byte ptr [rsp + rdx*8 + 0x27580001], ch ; clc ; jmp rdi
0x00000000001b6dc1 : add byte ptr [rax], al ; add byte ptr [rsp + rdx*8 + 1], ch ; add byte ptr [rax + 0x25], ch ; clc ; jmp qword ptr [rdx]
0x00000000001ace09 : add byte ptr [rax], al ; add byte ptr [rsp + rsi + 0x2df00001], dh ; cmc ; jmp qword ptr [rsi]
0x00000000001abe11 : add byte ptr [rax], al ; add byte ptr [rsp - 0x1d47ffff], bh ; hlt ; jmp qword ptr [rcx]
0x00000000001abde1 : add byte ptr [rax], al ; add byte ptr [rsp - 0x1d77ffff], cl ; hlt ; jmp qword ptr [rcx]
0x00000000001108f8 : add byte ptr [rax], al ; add cl, byte ptr [rax - 0x75] ; push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000000fdd4c : add byte ptr [rax], al ; add dh, al ; or al, 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000003b282 : add byte ptr [rax], al ; add dl, dh ; movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000050b1d : add byte ptr [rax], al ; add ebp, 0x30 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000002a5ed : add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000088799 : add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000127854 : add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000048546 : add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131205 : add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000006bcce : add byte ptr [rax], al ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x0000000000035d2a : add byte ptr [rax], al ; add rsp, 0x108 ; ret
0x00000000000356a6 : add byte ptr [rax], al ; add rsp, 0x148 ; ret
0x000000000013a252 : add byte ptr [rax], al ; add rsp, 0x158 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000cbbf4 : add byte ptr [rax], al ; add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000012292d : add byte ptr [rax], al ; add rsp, 0x18 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000005370a : add byte ptr [rax], al ; add rsp, 0x18 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x0000000000047700 : add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ba7c0 : add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079f0f : add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000f7389 : add byte ptr [rax], al ; add rsp, 0x18 ; ret
0x00000000000a0faf : add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d7fe : add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044e : add byte ptr [rax], al ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000000f8ec4 : add byte ptr [rax], al ; add rsp, 0x20 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000080087 : add byte ptr [rax], al ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000076d1f : add byte ptr [rax], al ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000136416 : add byte ptr [rax], al ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000002074b : add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x00000000000f0e4c : add byte ptr [rax], al ; add rsp, 0x28 ; mov eax, r13d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bf596 : add byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000020277 : add byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007cc9c : add byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000034e24 : add byte ptr [rax], al ; add rsp, 0x28 ; ret
0x000000000007977b : add byte ptr [rax], al ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000131e9d : add byte ptr [rax], al ; add rsp, 0x30 ; pop rbx ; ret
0x0000000000079804 : add byte ptr [rax], al ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124366 : add byte ptr [rax], al ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cb44c : add byte ptr [rax], al ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000006b909 : add byte ptr [rax], al ; add rsp, 0x400 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011909a : add byte ptr [rax], al ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001433c8 : add byte ptr [rax], al ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x000000000010de75 : add byte ptr [rax], al ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f8764 : add byte ptr [rax], al ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ef113 : add byte ptr [rax], al ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000082752 : add byte ptr [rax], al ; add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000010dae9 : add byte ptr [rax], al ; add rsp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x000000000010e996 : add byte ptr [rax], al ; add rsp, 0x80 ; mov eax, edx ; add rsp, 8 ; ret
0x0000000000145404 : add byte ptr [rax], al ; add rsp, 0x88 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000011fbd3 : add byte ptr [rax], al ; add rsp, 0x90 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006e363 : add byte ptr [rax], al ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c86c4 : add byte ptr [rax], al ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000036cb5 : add byte ptr [rax], al ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000002056c : add byte ptr [rax], al ; add rsp, 0x98 ; ret
0x00000000000c9004 : add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000118837 : add byte ptr [rax], al ; add rsp, 0xd0 ; mov eax, esi ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006c5ca : add byte ptr [rax], al ; add rsp, 0xd0 ; mov eax, esi ; pop rbx ; ret
0x00000000000359d7 : add byte ptr [rax], al ; add rsp, 0xd0 ; ret
0x00000000001189f0 : add byte ptr [rax], al ; add rsp, 0xd8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x0000000000045fc1 : add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x000000000008fb6a : add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x000000000012e65e : add byte ptr [rax], al ; add rsp, 8 ; mov eax, 0x10 ; pop rbx ; pop rbp ; ret
0x0000000000073761 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000012d746 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000114b46 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, 7 ; pop rbx ; pop rbp ; ret
0x000000000010794f : add byte ptr [rax], al ; add rsp, 8 ; mov eax, 9 ; pop rbx ; pop rbp ; ret
0x0000000000071780 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000070a76 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000557c4 : add byte ptr [rax], al ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006ea2a : add byte ptr [rax], al ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000006f34e : add byte ptr [rax], al ; add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006c71b : add byte ptr [rax], al ; add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000013519e : add byte ptr [rax], al ; add rsp, 8 ; mov eax, r13d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008fc0d : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000077075 : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000c8b26 : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000869e6 : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000071004 : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a44d : add byte ptr [rax], al ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x00000000000495a6 : add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000711bc : add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000021627 : add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000035476 : add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000022685 : add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d7b6 : add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000195d26 : add byte ptr [rax], al ; and al, 0x65 ; out dx, eax ; jmp rsp
0x0000000000195a2e : add byte ptr [rax], al ; and al, 0xa0 ; out dx, al ; jmp rsp
0x000000000013ecdf : add byte ptr [rax], al ; bswap eax ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x000000000013ed1f : add byte ptr [rax], al ; bswap eax ; mov eax, eax ; mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x000000000017d68e : add byte ptr [rax], al ; call rsp
0x00000000001a7252 : add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x00000000001175fa : add byte ptr [rax], al ; cmova eax, edx ; add rsp, 0x28 ; ret
0x00000000000cbb92 : add byte ptr [rax], al ; cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000143443 : add byte ptr [rax], al ; cmovne rax, rdx ; add rsp, 8 ; ret
0x00000000000fe9c6 : add byte ptr [rax], al ; cmovns rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x000000000014637e : add byte ptr [rax], al ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x14639f ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000194ee6 : add byte ptr [rax], al ; cmp ebp, ebx ; call rsp
0x0000000000089c1c : add byte ptr [rax], al ; cmp rax, 0xff ; cmove rax, rdx ; add rsp, 8 ; ret
0x000000000019551e : add byte ptr [rax], al ; hlt ; cld ; in eax, dx ; jmp rsp
0x0000000000195e6e : add byte ptr [rax], al ; hlt ; mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000195a26 : add byte ptr [rax], al ; hlt ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x0000000000195e16 : add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x000000000019554e : add byte ptr [rax], al ; in al, -1 ; in eax, dx ; jmp rsp
0x000000000019572e : add byte ptr [rax], al ; in al, 0x42 ; out dx, al ; call rsp
0x000000000019584e : add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000195d3e : add byte ptr [rax], al ; in al, 0x67 ; out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x0000000000195d7e : add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000010a4ed : add byte ptr [rax], al ; inc dword ptr [rax] ; or eax, edx ; or eax, ebx ; add rsp, 0x90 ; pop rbx ; ret
0x0000000000195926 : add byte ptr [rax], al ; ja 0x195926 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000131e96 : add byte ptr [rax], al ; jbe 0x131eb6 ; mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x00000000000a0e4a : add byte ptr [rax], al ; jbe 0xa0e2c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019514e : add byte ptr [rax], al ; je 0x1951de ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195c66 : add byte ptr [rax], al ; je 0x195ca0 ; out dx, eax ; call rsp
0x0000000000196987 : add byte ptr [rax], al ; jmp rsp
0x00000000001148cc : add byte ptr [rax], al ; jne 0x114909 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013e895 : add byte ptr [rax], al ; jne 0x13e872 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f7017 : add byte ptr [rax], al ; jne 0xf7034 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000076a90 : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012f251 : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000769ad : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x000000000012f638 : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x00000000001034cc : add byte ptr [rax], al ; lea rax, qword ptr [rip + 0x2c0d4b] ; add rsp, 0x18 ; ret
0x0000000000102f54 : add byte ptr [rax], al ; lea rax, qword ptr [rip + 0x2c1273] ; add rsp, 8 ; ret
0x000000000003b34e : add byte ptr [rax], al ; lea rax, qword ptr [rip + 0x38b0ff] ; add rsp, 8 ; ret
0x000000000012f24a : add byte ptr [rax], al ; lea rdx, qword ptr [rip + 0xe00d] ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000039b3f : add byte ptr [rax], al ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000022b6e : add byte ptr [rax], al ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000001bca02 : add byte ptr [rax], al ; lodsb al, byte ptr [rsi] ; add al, byte ptr [rax] ; add byte ptr [rsp + rax], ah ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 3
0x0000000000195666 : add byte ptr [rax], al ; mov ah, 0x2d ; out dx, al ; call rsp
0x0000000000195756 : add byte ptr [rax], al ; mov ah, 0x48 ; out dx, al ; jmp rsp
0x0000000000195e0e : add byte ptr [rax], al ; mov ah, 0x91 ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x00000000000fdd4d : add byte ptr [rax], al ; mov byte ptr [rax + 0xc], 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x0000000000076d19 : add byte ptr [rax], al ; mov dword ptr [rbp + 0xc0], eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035c1e : add byte ptr [rax], al ; mov dword ptr [rbp], ecx ; add rsp, 0x88 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000007b790 : add byte ptr [rax], al ; mov dword ptr [rbx + 0x70], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000dadac : add byte ptr [rax], al ; mov dword ptr [rcx + 0x40], 0xffffffff ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ca390 : add byte ptr [rax], al ; mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x00000000000ca45a : add byte ptr [rax], al ; mov dword ptr fs:[rdx], esi ; add rsp, 8 ; ret
0x00000000000ca539 : add byte ptr [rax], al ; mov dword ptr fs:[rdx], r8d ; mov eax, esi ; add rsp, 0x48 ; ret
0x00000000000c9cee : add byte ptr [rax], al ; mov dword ptr fs:[rdx], r8d ; mov rax, rsi ; add rsp, 8 ; ret
0x000000000007354e : add byte ptr [rax], al ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f8b5 : add byte ptr [rax], al ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000100d43 : add byte ptr [rax], al ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000075ede : add byte ptr [rax], al ; mov eax, dword ptr [rdx] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000a084e : add byte ptr [rax], al ; mov eax, dword ptr [rsp + 0x10] ; mov byte ptr [rdi + 4], cl ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 5] ; ret
0x00000000000351fe : add byte ptr [rax], al ; mov eax, dword ptr [rsp + 0x10] ; or eax, 0xffff8000 ; inc eax ; shr eax, 0x1f ; ret
0x000000000010a2c9 : add byte ptr [rax], al ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013e8ba : add byte ptr [rax], al ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd24e : add byte ptr [rax], al ; mov eax, dword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010e99d : add byte ptr [rax], al ; mov eax, edx ; add rsp, 8 ; ret
0x000000000005371b : add byte ptr [rax], al ; mov edi, 0x100 ; mov qword ptr [rsp + 8], rdx ; call 0x1f98e
0x0000000000047bc7 : add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000013a967 : add byte ptr [rax], al ; mov esi, 3 ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x000000000012f190 : add byte ptr [rax], al ; mov esi, 4 ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000001319c1 : add byte ptr [rax], al ; mov qword ptr [rbx + 0x20], rcx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c85e3 : add byte ptr [rax], al ; mov qword ptr [rbx + 0x20], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000021620 : add byte ptr [rax], al ; mov qword ptr [rbx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ba3fe : add byte ptr [rax], al ; mov qword ptr [rbx], rsi ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000053720 : add byte ptr [rax], al ; mov qword ptr [rsp + 8], rdx ; call 0x1f989
0x000000000008000e : add byte ptr [rax], al ; mov qword ptr fs:[r9], rdx ; mov rax, rdx ; add rsp, 8 ; ret
0x000000000007d42e : add byte ptr [rax], al ; mov rax, qword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000007366a : add byte ptr [rax], al ; mov rax, qword ptr [rbp + 0x28] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000013d47e : add byte ptr [rax], al ; mov rax, qword ptr [rbx + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x0000000000130e1e : add byte ptr [rax], al ; mov rax, qword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x0000000000139429 : add byte ptr [rax], al ; mov rax, qword ptr [rbx] ; add rsp, 0xa8 ; pop rbx ; pop rbp ; ret
0x0000000000130dbe : add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x000000000013dd7e : add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; mov qword ptr [rsp + 8], r8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013d466 : add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x000000000013abbe : add byte ptr [rax], al ; mov rax, qword ptr [rip + 0x2863c1] ; add rsp, 8 ; ret
0x00000000000bd493 : add byte ptr [rax], al ; mov rax, qword ptr [rip + 0x30903c] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000109d33 : add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003b2a6 : add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000ff3ed : add byte ptr [rax], al ; mov rax, qword ptr [rsp - 0x50] ; ret
0x0000000000135ff5 : add byte ptr [rax], al ; mov rax, qword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000808fa : add byte ptr [rax], al ; mov rax, r8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000143c9a : add byte ptr [rax], al ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000001236be : add byte ptr [rax], al ; mov rdi, qword ptr [rsp + 0x28] ; call 0x1f9c1
0x000000000012f0bb : add byte ptr [rax], al ; mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000012eef3 : add byte ptr [rax], al ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a96c : add byte ptr [rax], al ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x00000000001397c3 : add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x0000000000139d04 : add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000012f195 : add byte ptr [rax], al ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000145d18 : add byte ptr [rax], al ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbdd : add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013d24e : add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x0000000000088476 : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391ee : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000003946e : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000037614 : add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715cb : add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89d
0x0000000000104319 : add byte ptr [rax], al ; mov rsi, qword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000086a86 : add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x00000000000bc19d : add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000086dfe : add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000035322 : add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035300 : add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000353eb : add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000194d9e : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d92 ; call rsp
0x000000000019491e : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; or ch, dl ; call rsp
0x000000000003b256 : add byte ptr [rax], al ; movsd xmm0, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000003adb8 : add byte ptr [rax], al ; movsxd rax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x000000000008d7b1 : add byte ptr [rax], al ; nop dword ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000075e9f : add byte ptr [rax], al ; or dword ptr [rbx], 0x20 ; mov eax, 0xffffffff ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000035221 : add byte ptr [rax], al ; or eax, edx ; mov dword ptr [rsp + 0x10], eax ; fld xword ptr [rsp + 8] ; ret
0x00000000001a9db2 : add byte ptr [rax], al ; pop rsp ; add al, 1 ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000001a3c5e : add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rbx], cl ; add byte ptr [rax], al ; pop rax ; outsd dx, dword ptr [rsi] ; out dx, al ; jmp qword ptr [rdi]
0x00000000001af87e : add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x00000000001a1b86 : add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rax*4], dh ; add byte ptr [rax], al ; nop ; xchg eax, esp ; in eax, dx ; call qword ptr [rcx]
0x00000000001a5bb2 : add byte ptr [rax], al ; pop rsp ; ret 0
0x00000000001a64b2 : add byte ptr [rax], al ; pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001a92b2 : add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9255 ; call rbx
0x000000000019cab2 : add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000012f631 : add byte ptr [rax], al ; push qword ptr [rsp + 0xc8] ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000011765e : add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000001b7ca6 : add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x000000000019f6a6 : add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rcx + 0x12700000], dl ; in eax, dx ; call qword ptr [rax]
0x00000000001a25c6 : add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x00000000001b9aaa : add byte ptr [rax], al ; push rsp ; add dword ptr [rdx], eax ; add byte ptr [rax - 0x3d], ah ; clc ; jmp rcx
0x00000000001a8eaa : add byte ptr [rax], al ; push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001ad5aa : add byte ptr [rax], al ; push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x0000000000195206 : add byte ptr [rax], al ; push rsp ; jg 0x1951fd ; call rsp
0x00000000001b7caa : add byte ptr [rax], al ; push rsp ; jrcxz 0x1b7cb9 ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000195726 : add byte ptr [rax], al ; push rsp ; out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x000000000019448e : add byte ptr [rax], al ; push rsp ; ret
0x00000000001a47aa : add byte ptr [rax], al ; push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x0000000000194b1e : add byte ptr [rax], al ; push rsp ; sub dl, ch ; jmp rsp
0x00000000001a41aa : add byte ptr [rax], al ; push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001acaaa : add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x000000000013ebeb : add byte ptr [rax], al ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000001a724e : add byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000100d81 : add byte ptr [rax], al ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x00000000001af882 : add byte ptr [rax], al ; sub al, 0x5f ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x00000000000f138e : add byte ptr [rax], al ; sub qword ptr [rsp + 0x18], 1 ; mov rax, qword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13e2
0x0000000000124331 : add byte ptr [rax], al ; syscall ; mov eax, dword ptr [rsp + 0x10] ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003577b : add byte ptr [rax], al ; syscall ; mov eax, r8d ; add rsp, 0x90 ; ret
0x000000000007e11c : add byte ptr [rax], al ; test byte ptr [rbx], 0x80 ; jne 0x7e13d ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000195846 : add byte ptr [rax], al ; test byte ptr [rdi - 0x12], dl ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x000000000019570e : add byte ptr [rax], al ; test byte ptr [rdi], bh ; out dx, al ; jmp rsp
0x000000000012e0cf : add byte ptr [rax], al ; test eax, eax ; jne 0x12e0ee ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012e0ce : add byte ptr [rax], al ; test eax, eax ; jne 0x12e0ef ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2bf : add byte ptr [rax], al ; test eax, eax ; jne 0x12f2de ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f428 : add byte ptr [rax], al ; test eax, eax ; jne 0x12f44e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd52 : add byte ptr [rax], al ; test eax, eax ; jne 0x12fd76 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd8f : add byte ptr [rax], al ; test eax, eax ; jne 0x12fdae ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe3f : add byte ptr [rax], al ; test eax, eax ; jne 0x12fe5e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe8f : add byte ptr [rax], al ; test eax, eax ; jne 0x12feae ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff0f : add byte ptr [rax], al ; test eax, eax ; jne 0x12ff2e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000131c7f : add byte ptr [rax], al ; test eax, eax ; jne 0x131c9e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a84 : add byte ptr [rax], al ; test eax, eax ; jne 0x132aa6 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b1f : add byte ptr [rax], al ; test eax, eax ; jne 0x132b3e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bba : add byte ptr [rax], al ; test eax, eax ; jne 0x132bde ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c39 : add byte ptr [rax], al ; test eax, eax ; jne 0x132c5e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000143918 : add byte ptr [rax], al ; test eax, eax ; js 0x14395f ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000143d6f : add byte ptr [rax], al ; test eax, eax ; js 0x143db0 ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000143dcf : add byte ptr [rax], al ; test eax, eax ; js 0x143e10 ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000fdd93 : add byte ptr [rax], al ; test eax, eax ; js 0xfddb6 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000fa05a : add byte ptr [rax], al ; test eax, eax ; sete al ; add rsp, 0x48 ; movzx eax, al ; ret
0x0000000000131c5f : add byte ptr [rax], al ; test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000001329c7 : add byte ptr [rax], al ; test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000131cd9 : add byte ptr [rax], al ; test eax, eax ; setne al ; movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000194ad6 : add byte ptr [rax], al ; xchg eax, esp ; and dl, ch ; jmp rsp
0x000000000019510e : add byte ptr [rax], al ; xchg eax, esp ; and ebp, esp ; jmp rsp
0x0000000000194dde : add byte ptr [rax], al ; xchg eax, esp ; jl 0x194dd2 ; jmp rsp
0x0000000000195d86 : add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d7f ; call rsp
0x0000000000195e36 : add byte ptr [rax], al ; xchg eax, esp ; out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000195d1e : add byte ptr [rax], al ; xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000195e76 : add byte ptr [rax], al ; xor al, 0xb3 ; out dx, eax ; jmp rsp
0x00000000000bccfe : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c7f56 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cca4a : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000879f9 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000121236 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000146a56 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x38 ; ret
0x000000000003b0be : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a30a : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbfc : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000d808b : add byte ptr [rax], al ; xor eax, eax ; cmp ebx, 0xa ; je 0xd8100 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012e713 : add byte ptr [rax], al ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x00000000000f849b : add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001109fb : add byte ptr [rax], al ; xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000001af887 : add byte ptr [rax], bh ; out -0xb, eax ; jmp rsp
0x000000000019f200 : add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fd0 : add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a9db0 : add byte ptr [rax], r8b ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x0000000000048545 : add byte ptr [rax], r8b ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bccd : add byte ptr [rax], r8b ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013d7fd : add byte ptr [rax], r8b ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044d : add byte ptr [rax], r8b ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000136415 : add byte ptr [rax], r8b ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012d745 : add byte ptr [rax], r8b ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000000371dd : add byte ptr [rax], r8b ; add rsp, 8 ; ret
0x000000000010c6d5 : add byte ptr [rax], r8b ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d7b5 : add byte ptr [rax], r8b ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000a084d : add byte ptr [rax], r8b ; mov eax, dword ptr [rsp + 0x10] ; mov byte ptr [rdi + 4], cl ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 5] ; ret
0x00000000000cd24d : add byte ptr [rax], r8b ; mov eax, dword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000130e1d : add byte ptr [rax], r8b ; mov rax, qword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x000000000013d465 : add byte ptr [rax], r8b ; mov rax, qword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x000000000013abbd : add byte ptr [rax], r8b ; mov rax, qword ptr [rip + 0x2863c1] ; add rsp, 8 ; ret
0x0000000000086a85 : add byte ptr [rax], r8b ; mov rsi, qword ptr [rsp + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x0000000000146a55 : add byte ptr [rax], r8b ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3d : add byte ptr [rax], r8b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000001463f7 : add byte ptr [rbp + 0x16], dh ; add rsp, 0x38 ; ret
0x00000000001462bc : add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000001148cd : add byte ptr [rbp + 0x2f], dh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000acd87 : add byte ptr [rbp + 0x31], al ; ror byte ptr [rcx + rcx*4 - 0x12], 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x0000000000081981 : add byte ptr [rbp + 0x41], bl ; mov dword ptr [rsp + 0x10], eax ; pop r12 ; ret
0x000000000005590e : add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000559de : add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; ret
0x000000000008a763 : add byte ptr [rbp + 0x41], bl ; pop rsp ; ret
0x0000000000143d70 : add byte ptr [rbp + 0x482b78c0], al ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000143919 : add byte ptr [rbp + 0x483278c0], al ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000007a71e : add byte ptr [rbp + 0x58d48c0], al ; fdivr dword ptr [rsp + rsi] ; add byte ptr [rax + 0xf], cl ; ret 0x8948
0x00000000000cd239 : add byte ptr [rbp + 0x641278c0], al ; mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f7018 : add byte ptr [rbp + 0xd], dh ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c04a8 : add byte ptr [rbp + 0xd], dh ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000146384 : add byte ptr [rbp + 9], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000194f67 : add byte ptr [rbp + rax*2 - 0x15], dh ; jmp rsp
0x00000000001986af : add byte ptr [rbp + rax*2 - 7], dh ; call rsp
0x0000000000197117 : add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001963b7 : add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000199397 : add byte ptr [rbp + rcx + 0x5384fffb], dh ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000197857 : add byte ptr [rbp + rcx*2 - 9], dh ; call rsp
0x000000000019443f : add byte ptr [rbp + rdi*4 - 0x18], dh ; call rsp
0x00000000001995af : add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x000000000019841f : add byte ptr [rbp + rsi*4 - 0x1b6b0008], al ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x000000000007fe5c : add byte ptr [rbp - 0x17], dh ; add rsp, 8 ; mov rax, rdi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013e896 : add byte ptr [rbp - 0x33], dh ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131c60 : add byte ptr [rbp - 0x3f6af040], al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000001329c8 : add byte ptr [rbp - 0x3f6af040], al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000131cda : add byte ptr [rbp - 0x3f6af040], al ; movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000fa05b : add byte ptr [rbp - 0x3f6bf040], al ; add rsp, 0x48 ; movzx eax, al ; ret
0x00000000000fdd94 : add byte ptr [rbp - 0x74f08740], al ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000196c9f : add byte ptr [rbp - 0xb], dh ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x00000000001990d7 : add byte ptr [rbp - 6], dl ; jmp rsp
0x00000000000299f0 : add byte ptr [rbx + 0x41], bl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000ce370 : add byte ptr [rbx + 0x41], bl ; pop rsp ; pop r13 ; pop rbp ; ret
0x00000000000e0a87 : add byte ptr [rbx + 0x45], bl ; mov dword ptr [rsp + 4], esi ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000198567 : add byte ptr [rbx + rax - 7], ah ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x000000000019747f : add byte ptr [rbx + rax*8 - 0xa], ah ; call rsp
0x0000000000196a07 : add byte ptr [rbx + rbp*4], al ; jmp rsp
0x0000000000198bf7 : add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001963e7 : add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000194ee7 : add byte ptr [rbx + rdi - 0x15], ah ; call rsp
0x000000000019800f : add byte ptr [rbx + rdi - 0x36330008], al ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x000000000019894f : add byte ptr [rbx + rdi*4], al ; stc ; call rsp
0x0000000000198bb7 : add byte ptr [rbx + rdx], dl ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x0000000000195e77 : add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x00000000001963ff : add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x0000000000196667 : add byte ptr [rbx + rsi*8 - 0xe], ah ; call rsp
0x0000000000197fdf : add byte ptr [rbx + rsi], ah ; clc ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x0000000000146fd9 : add byte ptr [rbx - 0x3d], bl ; nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x0000000000080bfe : add byte ptr [rbx - 0x57], dh ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000047ee8 : add byte ptr [rbx - 0x77], bl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x0000000000196457 : add byte ptr [rbx - 0xe], dl ; jmp rsp
0x0000000000197ac7 : add byte ptr [rbx - 9], dh ; call rsp
0x00000000001963af : add byte ptr [rbx*4 + 0x21ccfff1], dh ; add dword ptr [rax], eax ; popfq ; int1 ; jmp rsp
0x00000000000ff2f2 : add byte ptr [rbx], al ; push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000bbbf9 : add byte ptr [rbx], cl ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; ret
0x000000000019909f : add byte ptr [rbx], dh ; cli ; call rsp
0x00000000000996a2 : add byte ptr [rcx + 0x415d5bc8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000c9554 : add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ca1ea : add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000334ed : add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f8ace : add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; ret
0x0000000000102b01 : add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; ret
0x0000000000034394 : add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000078061 : add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000715f2 : add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; ret
0x000000000011883f : add byte ptr [rcx + 0x415d5bf0], cl ; pop rsp ; ret
0x000000000009872f : add byte ptr [rcx + rax + 0x65], cl ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000001966d7 : add byte ptr [rcx + rax*2 + 0x37acfff3], ah ; add dword ptr [rax], eax ; and al, 0x42 ; call rsp
0x000000000019447f : add byte ptr [rcx + rax*8 - 0x18], al ; call rsp
0x0000000000197f57 : add byte ptr [rcx + rbp - 8], al ; call rsp
0x0000000000194ca7 : add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x00000000001946f7 : add byte ptr [rcx + rbx*4 - 0x17], dh ; jmp rsp
0x00000000000ca391 : add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 0x18 ; ret
0x00000000000ca45b : add byte ptr [rcx + rcx*4 + 0x32], ah ; add rsp, 8 ; ret
0x000000000012f0bc : add byte ptr [rcx + rcx*4 - 0x11], cl ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x0000000000037615 : add byte ptr [rcx + rcx*4 - 0x16], cl ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715cc : add byte ptr [rcx + rcx*4 - 0x16], cl ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89c
0x00000000000808fb : add byte ptr [rcx + rcx*4 - 0x40], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012eef4 : add byte ptr [rcx + rcx*4 - 1], cl ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a96d : add byte ptr [rcx + rcx*4 - 1], cl ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x0000000000197c3f : add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x0000000000199807 : add byte ptr [rcx + rcx*8 - 3], dh ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x0000000000194437 : add byte ptr [rcx + rdi*4 - 0x18], dl ; call rsp
0x000000000019932f : add byte ptr [rcx + rdi*8 - 6], dh ; call rsp
0x00000000001986a7 : add byte ptr [rcx + rdi], al ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001949bf : add byte ptr [rcx + rdx - 0x16], ah ; call rsp
0x0000000000195e0f : add byte ptr [rcx + rdx*4 - 0x2330011], dh ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195c67 : add byte ptr [rcx + rsi - 0x11], dh ; call rsp
0x0000000000196a4f : add byte ptr [rcx - 0xd], dl ; call rsp
0x0000000000199797 : add byte ptr [rcx - 3], ah ; jmp rsp
0x00000000001985ff : add byte ptr [rcx - 7], dl ; call rsp
0x00000000000ec1be : add byte ptr [rcx - 9], al ; fsub dword ptr [rsp + rax*2 - 0x77] ; add byte ptr [rax - 1], bh ; ret
0x0000000000198f67 : add byte ptr [rcx*4 + 0x3974fffa], dh ; add al, byte ptr [rax] ; mov ah, 0x8d ; cli ; jmp rsp
0x000000000008a75f : add byte ptr [rcx], al ; add byte ptr [rax], al ; add byte ptr [rbp + 0x41], bl ; pop rsp ; ret
0x00000000000fe9c4 : add byte ptr [rcx], al ; add byte ptr [rax], al ; cmovns rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x000000000005371e : add byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rsp + 8], rdx ; call 0x1f98b
0x0000000000105eba : add byte ptr [rcx], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f1762 : add byte ptr [rcx], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000126f4a : add byte ptr [rcx], al ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000004a604 : add byte ptr [rcx], cl ; or edx, eax ; mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
0x0000000000103344 : add byte ptr [rcx], dh ; fisttp dword ptr [rcx + 0x5d0102] ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000371d8 : add byte ptr [rcx], dh ; imul al ; push rax ; add byte ptr [rax], r8b ; add rsp, 8 ; ret
0x0000000000089922 : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000089e12 : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000013a398 : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x00000000000bb984 : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r14 ; ret
0x000000000003a4ec : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000ca277 : add byte ptr [rcx], dh ; rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000138467 : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134def : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000000f849c : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x7d], 0xec ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000144b46 : add byte ptr [rcx], dh ; sal bl, 0x48 ; movsd dword ptr [rdi], dword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000005371c : add byte ptr [rdi + 0x100], bh ; mov qword ptr [rsp + 8], rdx ; call 0x1f98d
0x0000000000125c43 : add byte ptr [rdi + 0x72], bh ; mov byte ptr [rbp + 0x11], bl ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bb97d : add byte ptr [rdi + rax*8], ah ; add byte ptr [r8], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r14 ; ret
0x00000000000ff3e7 : add byte ptr [rdi + rax*8], ah ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rsp - 0x50] ; ret
0x0000000000034e1e : add byte ptr [rdi + rax*8], ah ; and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x28 ; ret
0x0000000000035470 : add byte ptr [rdi + rax*8], ah ; and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000110586 : add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001961e7 : add byte ptr [rdi + rbp - 0xf], al ; call rsp
0x00000000001983d7 : add byte ptr [rdi + rbp*4], al ; clc ; jmp rsp
0x00000000001af883 : add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x000000000019947f : add byte ptr [rdi + rbx], ah ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000198d3f : add byte ptr [rdi + rcx*2 - 6], dl ; jmp rsp
0x00000000001968cf : add byte ptr [rdi + rcx*4 - 0xd], al ; call rsp
0x0000000000198f97 : add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000198f8f : add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000198487 : add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x0000000000195207 : add byte ptr [rdi + rdi*2 - 0x13], dl ; call rsp
0x000000000019514f : add byte ptr [rdi + rdi*2 - 0x14], dh ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x000000000019970f : add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000195547 : add byte ptr [rdi + rdi*8 - 0x13], ah ; push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x00000000001993f7 : add byte ptr [rdi + rdx + 0x55bcfffb], ah ; add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000195847 : add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000198187 : add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000199207 : add byte ptr [rdi + rdx*8 - 6], dh ; jmp rsp
0x0000000000195927 : add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000198edf : add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x0000000000196217 : add byte ptr [rdi - 0xf], al ; jmp rsp
0x000000000006ba6c : add byte ptr [rdi], ah ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000124332 : add byte ptr [rdi], cl ; add eax, 0x1024448b ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013ec0b : add byte ptr [rdi], cl ; and al, 0x38 ; add rsp, 0x90 ; pop rbx ; mov eax, eax ; ret
0x000000000013ed20 : add byte ptr [rdi], cl ; enter -0x3f77, 0x48 ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000034ec7 : add byte ptr [rdi], cl ; push rsp ; ret
0x0000000000104cf5 : add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000195727 : add byte ptr [rdx + rax*2 - 0x12], dl ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x00000000001966df : add byte ptr [rdx + rax*2], ah ; call rsp
0x0000000000197f7f : add byte ptr [rdx + rbp - 8], dh ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000198727 : add byte ptr [rdx + rbp*2 - 7], ah ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x0000000000195d47 : add byte ptr [rdx + rbp*2], dl ; out dx, eax ; jmp rsp
0x000000000019734f : add byte ptr [rdx + rbp*4 - 0xa], al ; jmp rsp
0x00000000001969ff : add byte ptr [rdx + rbp*4], dl ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000198ae7 : add byte ptr [rdx + rbp*8 + 0x197cfff9], al ; add al, byte ptr [rax] ; in al, -0x14 ; stc ; jmp rsp
0x0000000000197597 : add byte ptr [rdx + rbp*8 - 0xa], al ; jmp rsp
0x0000000000196717 : add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000196aff : add byte ptr [rdx + rcx*2], dl ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x000000000019630f : add byte ptr [rdx + rcx*4 - 0xf], dl ; call rsp
0x000000000019980f : add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x0000000000198947 : add byte ptr [rdx + rdi*4 + 0xe9cfff9], ah ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000196637 : add byte ptr [rdx + rdi*4 - 0xe], al ; jmp rsp
0x0000000000196b07 : add byte ptr [rdx + rdx*2 - 0xc], al ; call rsp
0x0000000000194d97 : add byte ptr [rdx + rsi*2 - 0x74ab0016], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d99 ; call rsp
0x000000000019589f : add byte ptr [rdx - 0x12], ah ; call rsp
0x00000000001976bf : add byte ptr [rdx - 0x65530009], al ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; and al, 0xf7 ; jmp rsp
0x0000000000197e37 : add byte ptr [rdx - 8], ah ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x00000000001148ca : add byte ptr [rdx], al ; add byte ptr [rax], al ; jne 0x11490b ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012e06a : add byte ptr [rdx], al ; add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297cc9] ; pop rbx ; ret
0x000000000012aa26 : add byte ptr [rdx], al ; add rsp, 8 ; ret
0x000000000013e877 : add byte ptr [rdx], al ; je 0x13e8b4 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001108f9 : add byte ptr [rdx], al ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x0000000000195897 : add byte ptr [rdx], al ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x000000000014343f : add byte ptr [rdx], bh ; cmovne rax, rdx ; add rsp, 8 ; ret
0x000000000012fbdb : add byte ptr [rdx], ch ; add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x00000000001064a9 : add byte ptr [rdx], cl ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x000000000003521d : add byte ptr [rip + 0x7fff], ah ; or eax, edx ; mov dword ptr [rsp + 0x10], eax ; fld xword ptr [rsp + 8] ; ret
0x0000000000139f39 : add byte ptr [rsi + 0x14], dh ; xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001995a7 : add byte ptr [rsi + 0x65cfffb], al ; add al, byte ptr [rax] ; je 0x1995f3 ; sti ; jmp rsp
0x0000000000131e97 : add byte ptr [rsi + 0xe], dh ; mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x0000000000034af7 : add byte ptr [rsi + 0xf], ah ; push rsp ; or eax, 0x15db70 ; orpd xmm0, xmm1 ; ret
0x000000000012eeef : add byte ptr [rsi + 1], bh ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000012f0b7 : add byte ptr [rsi + 2], bh ; mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a968 : add byte ptr [rsi + 3], bh ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x000000000012f191 : add byte ptr [rsi + 4], bh ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000019808f : add byte ptr [rsi + rax*2 - 0x33730008], al ; add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x0000000000195ed7 : add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000199fd3 : add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x0000000000194cdf : add byte ptr [rsi + rbp*2 - 0x16], ah ; jmp rsp
0x0000000000197397 : add byte ptr [rsi + rbp*4 - 0xa], al ; jmp rsp
0x0000000000196477 : add byte ptr [rsi + rbx*2 - 0xe], dl ; jmp rsp
0x000000000019646f : add byte ptr [rsi + rbx*2], al ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000198707 : add byte ptr [rsi + rbx*2], al ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000199707 : add byte ptr [rsi + rbx*4], dh ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000198d37 : add byte ptr [rsi + rcx*2 + 0x29bcfffa], ah ; add al, byte ptr [rax] ; push rsp ; cli ; jmp rsp
0x0000000000196f1f : add byte ptr [rsi + rdi - 0xa], dh ; jmp rsp
0x0000000000196b4f : add byte ptr [rsi + rsi*2], dl ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198687 : add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000000a0e4b : add byte ptr [rsi - 0x32], dh ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000215ad : add byte ptr [rsi - 0x70], ah ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000035323 : add byte ptr [rsi - 0x77], ah ; and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035301 : add byte ptr [rsi - 0x77], ah ; and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000353ec : add byte ptr [rsi - 0x77], ah ; and al, 0xf0 ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000197edf : add byte ptr [rsi - 8], dh ; push rsp ; ret
0x00000000000f733f : add byte ptr [rsi - 9], ah ; mov byte ptr [rax + 0x16b8ff], 0 ; add byte ptr [rsp + rax - 0xd], dh ; ret
0x000000000019823f : add byte ptr [rsi], ah ; clc ; jmp rsp
0x000000000019870f : add byte ptr [rsi], ah ; stc ; call rsp
0x00000000000ca1e6 : add byte ptr [rsi], dl ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000006f18b : add byte ptr [rsi], dl ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000001a7dfb : add byte ptr [rsp + 0x10b00000], ah ; call qword ptr [rbx]
0x00000000001a7e13 : add byte ptr [rsp + 0x10b80000], bh ; call qword ptr [rbx]
0x000000000017ee77 : add byte ptr [rsp + rax + 0x4be0000], bh ; add byte ptr [rax], al ; rol byte ptr [rax + rax], 0 ; ret 4
0x00000000001a9db3 : add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000000ba72f : add byte ptr [rsp + rax - 0x7d], dh ; adc byte ptr [rcx], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f7349 : add byte ptr [rsp + rax - 0xd], dh ; ret
0x00000000000ca53a : add byte ptr [rsp + rax*2 - 0x77], ah ; add cl, byte ptr [rcx - 0x3b7cb710] ; ret
0x0000000000196587 : add byte ptr [rsp + rax*4 - 0xe], al ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196522 ; jmp rsp
0x000000000019658f : add byte ptr [rsp + rax*4 - 0xe], dh ; jmp rsp
0x00000000001bca07 : add byte ptr [rsp + rax], ah ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 3
0x00000000001a45e3 : add byte ptr [rsp + rbp*4 - 0x3ae80000], cl ; out dx, al ; call qword ptr [rax]
0x00000000001a458b : add byte ptr [rsp + rbp*4], dh ; add byte ptr [rax], al ; push rax ; ret
0x00000000001b8583 : add byte ptr [rsp + rbp*8], ch ; add dword ptr [rax], eax ; sub byte ptr [rcx - 8], ah ; jmp qword ptr [rbx]
0x00000000001ab603 : add byte ptr [rsp + rbx - 0x3557ffff], ch ; hlt ; call qword ptr [rcx]
0x00000000001ab5eb : add byte ptr [rsp + rbx - 0x356fffff], dl ; hlt ; jmp qword ptr [rcx]
0x0000000000198bff : add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x0000000000102701 : add byte ptr [rsp + rcx - 9], dh ; ret 0xfc07
0x00000000001ae613 : add byte ptr [rsp + rcx*2 - 0x5427ffff], bh ; cmc ; jmp qword ptr [rcx]
0x00000000001ae5fb : add byte ptr [rsp + rcx*2 - 0x543fffff], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001ae5e3 : add byte ptr [rsp + rcx*2 - 0x5457ffff], cl ; cmc ; jmp qword ptr [rcx]
0x00000000001ae56b : add byte ptr [rsp + rcx*2], dl ; add dword ptr [rax], eax ; push rax ; stosd dword ptr [rdi], eax ; cmc ; jmp qword ptr [rcx]
0x000000000019688f : add byte ptr [rsp + rcx*4 - 0xd], ah ; ljmp ptr [rsi + rax*2 - 0x72fbffff] ; jmp rsp
0x00000000001a25cb : add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x0000000000196b7f : add byte ptr [rsp + rcx*4], dl ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x00000000001ad5db : add byte ptr [rsp + rdi + 0x58700001], al ; cmc ; jmp qword ptr [rcx]
0x00000000001ad5c3 : add byte ptr [rsp + rdi + 1], ch ; add byte ptr [rax + 0x58], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001ad5ab : add byte ptr [rsp + rdi + 1], dl ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x0000000000198017 : add byte ptr [rsp + rdi - 8], al ; jmp rsp
0x0000000000194dd7 : add byte ptr [rsp + rdi*2 - 0x73330016], al ; add byte ptr [rax], al ; xchg eax, esp ; jl 0x194dd9 ; jmp rsp
0x0000000000194124 : add byte ptr [rsp + rdi*8 - 0x36c8f01], dl ; jmp rax
0x00000000001ad593 : add byte ptr [rsp + rdi], bh ; add dword ptr [rax], eax ; sub byte ptr [rax - 0xb], bl ; jmp qword ptr [rcx]
0x00000000001ad563 : add byte ptr [rsp + rdi], cl ; add dword ptr [rax], eax ; clc ; push rdi ; cmc ; jmp qword ptr [rcx]
0x00000000001993c7 : add byte ptr [rsp + rdx - 5], ah ; call rsp
0x00000000001aee0b : add byte ptr [rsp + rdx*2 - 0x480fffff], dh ; cmc ; jmp qword ptr [rcx]
0x00000000001aedf3 : add byte ptr [rsp + rdx*2 - 0x4827ffff], bl ; cmc ; jmp qword ptr [rcx]
0x0000000000198d5f : add byte ptr [rsp + rdx*2 - 6], ah ; jmp rsp
0x0000000000198157 : add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x000000000019814f : add byte ptr [rsp + rdx*2], ah ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000195e37 : add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000195057 : add byte ptr [rsp + rdx*4 - 0x630b0015], dh ; add byte ptr [rax], al ; hlt ; ret
0x00000000001b6e03 : add byte ptr [rsp + rdx*8 + 0x27580001], ch ; clc ; jmp rdi
0x00000000001b6dc3 : add byte ptr [rsp + rdx*8 + 1], ch ; add byte ptr [rax + 0x25], ch ; clc ; jmp qword ptr [rdx]
0x0000000000195f77 : add byte ptr [rsp + rdx*8 - 0x11], ah ; dec esp ; add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000195f7f : add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x00000000001ace0b : add byte ptr [rsp + rsi + 0x2df00001], dh ; cmc ; jmp qword ptr [rsi]
0x0000000000194ecf : add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x000000000019867f : add byte ptr [rsp + rsi - 0xb8b0007], ah ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x0000000000195317 : add byte ptr [rsp + rsi*4 - 0x504b0013], al ; add byte ptr [rax], al ; add al, 0xb5 ; in eax, dx ; jmp rsp
0x00000000001abe13 : add byte ptr [rsp - 0x1d47ffff], bh ; hlt ; jmp qword ptr [rcx]
0x00000000001abde3 : add byte ptr [rsp - 0x1d77ffff], cl ; hlt ; jmp qword ptr [rcx]
0x0000000000195d1f : add byte ptr [rsp], dh ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000098732 : add byte ptr gs:[rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000146b55 : add ch, al ; vpsubq xmm15, xmm13, xmm7 ; add rsp, 0x18 ; ret
0x000000000012f1cd : add cl, byte ptr [r8 - 0x75] ; and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000002bf3b : add cl, byte ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000011bd67 : add cl, byte ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f1ce : add cl, byte ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001108fa : add cl, byte ptr [rax - 0x75] ; push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000000d7ccb : add cl, byte ptr [rax - 0x7b] ; leave ; je 0xd7ce2 ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000fdd4e : add dh, al ; or al, 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000007c874 : add dh, byte ptr [rbp + rax - 0x7d] ; std ; or dh, byte ptr [rsp + rdi*2 + 0x40] ; movzx eax, ch ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003b257 : add dl, dh ; movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000003b3df : add dl, dh ; movups xmmword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010299d : add dword ptr [r8], eax ; add rsp, 0x80 ; add rsp, 8 ; ret
0x0000000000196835 : add dword ptr [r8], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x00000000000ba732 : add dword ptr [rax + 0x10], 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000d9bb8 : add dword ptr [rax - 0x73], ecx ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000a04a5 : add dword ptr [rax - 0x77], ecx ; adc eax, esi ; add byte ptr [rax], al ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000110748 : add dword ptr [rax - 0x77], ecx ; push rbp ; cmp byte ptr [rax - 0x3c41f0e8], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d65c : add dword ptr [rax - 0x77], ecx ; push rbx ; or byte ptr [rdi], cl ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000122093 : add dword ptr [rax - 0x77], ecx ; xor byte ptr [r8 + 1], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006c27e : add dword ptr [rax - 1], edi ; cmove eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x000000000010e995 : add dword ptr [rax], 0 ; add rsp, 0x80 ; mov eax, edx ; add rsp, 8 ; ret
0x000000000008d82b : add dword ptr [rax], 0x85480000 ; sal byte ptr [rsp + rcx + 0x5b], 0x5d ; pop r12 ; ret
0x00000000000f1761 : add dword ptr [rax], 1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000196afe : add dword ptr [rax], eax ; adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198186 : add dword ptr [rax], eax ; adc al, 0x57 ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000196b4e : add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b7e : add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x00000000001969fe : add dword ptr [rax], eax ; adc al, 0xaa ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x00000000001986a6 : add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000196716 : add dword ptr [rax], eax ; add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000019818e : add dword ptr [rax], eax ; add al, 0x58 ; clc ; call rsp
0x000000000019646e : add dword ptr [rax], eax ; add al, 0x5e ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000198706 : add dword ptr [rax], eax ; add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000196896 : add dword ptr [rax], eax ; add al, 0x8d ; jmp rsp
0x000000000019637e : add dword ptr [rax], eax ; add al, 0x98 ; int1 ; call rsp
0x0000000000196986 : add dword ptr [rax], eax ; add al, 0xa0 ; jmp rsp
0x0000000000196a06 : add dword ptr [rax], eax ; add al, 0xab ; jmp rsp
0x00000000001983d6 : add dword ptr [rax], eax ; add al, 0xaf ; clc ; jmp rsp
0x00000000000fe9c5 : add dword ptr [rax], eax ; add byte ptr [rax + 0xf], cl ; add al, 0x24 ; add rsp, 0x18 ; ret
0x000000000003b34d : add dword ptr [rax], eax ; add byte ptr [rax - 0x73], cl ; add eax, 0x38b0ff ; add rsp, 8 ; ret
0x000000000003b2a5 : add dword ptr [rax], eax ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x00000000000391ed : add dword ptr [rax], eax ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000005371f : add dword ptr [rax], eax ; add byte ptr [rax - 0x77], cl ; push rsp ; and al, 8 ; call 0x1f98a
0x000000000017d68a : add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rsp
0x0000000000050b1b : add dword ptr [rax], eax ; add byte ptr [rax], al ; add ebp, 0x30 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000002a5eb : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131203 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ba7be : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d7ef : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013e973 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000087de5 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000145402 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x88 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000006e361 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006f8b8 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ff440 : add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000013ecdd : add dword ptr [rax], eax ; add byte ptr [rax], al ; bswap eax ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x000000000013e893 : add dword ptr [rax], eax ; add byte ptr [rax], al ; jne 0x13e874 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001319bf : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov qword ptr [rbx + 0x20], rcx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000012eef1 : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x0000000000053be4 : add dword ptr [rax], eax ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fcf03 : add dword ptr [rax], eax ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013a396 : add dword ptr [rax], eax ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x00000000001108f7 : add dword ptr [rax], eax ; add byte ptr [rdx], al ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x000000000012f18f : add dword ptr [rax], eax ; add byte ptr [rsi + 4], bh ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000003b255 : add dword ptr [rax], eax ; add dl, dh ; movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000198566 : add dword ptr [rax], eax ; add edi, ecx ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x000000000010299e : add dword ptr [rax], eax ; add rsp, 0x80 ; add rsp, 8 ; ret
0x000000000010153d : add dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x00000000000566d5 : add dword ptr [rax], eax ; add rsp, 0xd8 ; ret
0x0000000000033045 : add dword ptr [rax], eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000197fde : add dword ptr [rax], eax ; and al, 0x33 ; clc ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x0000000000198686 : add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x000000000019804e : add dword ptr [rax], eax ; and al, 0x40 ; clc ; call rsp
0x00000000001966de : add dword ptr [rax], eax ; and al, 0x42 ; call rsp
0x000000000019814e : add dword ptr [rax], eax ; and al, 0x54 ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000198236 : add dword ptr [rax], eax ; and al, 0x65 ; clc ; lcall ptr [rbp + rdx*8 + 0x66240001] ; clc ; jmp rsp
0x000000000019823e : add dword ptr [rax], eax ; and al, 0x66 ; clc ; jmp rsp
0x000000000019870e : add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x000000000019710e : add dword ptr [rax], eax ; and al, 0x68 ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197125 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000197e36 : add dword ptr [rax], eax ; and bh, al ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000196666 : add dword ptr [rax], eax ; call rsp
0x0000000000198016 : add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x00000000001af886 : add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x0000000000195fce : add dword ptr [rax], eax ; fsubr st(7) ; call rsp
0x0000000000196a8e : add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x000000000019807e : add dword ptr [rax], eax ; hlt ; clc ; jmp rsp
0x000000000019847e : add dword ptr [rax], eax ; in al, -0x32 ; clc ; dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x00000000001963ee : add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x000000000019968e : add dword ptr [rax], eax ; in al, -0x38 ; sti ; call rsp
0x000000000019644e : add dword ptr [rax], eax ; in al, 0x22 ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000198096 : add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x000000000019825e : add dword ptr [rax], eax ; in al, 0x6a ; clc ; jmp rsp
0x0000000000196216 : add dword ptr [rax], eax ; int1 ; jmp rsp
0x0000000000195f7e : add dword ptr [rax], eax ; je 0x195f5b ; out dx, eax ; jmp rsp
0x000000000019658e : add dword ptr [rax], eax ; je 0x19651b ; jmp rsp
0x0000000000196c9e : add dword ptr [rax], eax ; je 0x196d14 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000197ede : add dword ptr [rax], eax ; je 0x197f0f ; clc ; push rsp ; ret
0x0000000000197f7e : add dword ptr [rax], eax ; je 0x197fb9 ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x00000000001986ae : add dword ptr [rax], eax ; je 0x1986fc ; stc ; call rsp
0x000000000019970e : add dword ptr [rax], eax ; je 0x1996d6 ; cld ; jmp rsp
0x0000000000199806 : add dword ptr [rax], eax ; je 0x1997e0 ; std ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x0000000000196b56 : add dword ptr [rax], eax ; js 0x196b54 ; call rsp
0x0000000000197fe6 : add dword ptr [rax], eax ; mov ah, 0x33 ; clc ; jmp rsp
0x0000000000198426 : add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x0000000000196406 : add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x00000000000fde4d : add dword ptr [rax], eax ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000fd942 : add dword ptr [rax], eax ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000fce63 : add dword ptr [rax], eax ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f87d9 : add dword ptr [rax], eax ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000019856e : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; add edi, ecx ; jmp rsp
0x00000000001976c6 : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; and al, 0xf7 ; jmp rsp
0x0000000000197e3e : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x00000000001966d6 : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x000000000019867e : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000196b86 : add dword ptr [rax], eax ; nop ; hlt ; call rsp
0x00000000001967a6 : add dword ptr [rax], eax ; pop rax ; call rsp
0x00000000001963b6 : add dword ptr [rax], eax ; popfq ; int1 ; jmp rsp
0x0000000000198726 : add dword ptr [rax], eax ; push 0xf9 ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x0000000000196b06 : add dword ptr [rax], eax ; push rdx ; hlt ; call rsp
0x00000000001985fe : add dword ptr [rax], eax ; push rsp ; and ecx, edi ; call rsp
0x0000000000196456 : add dword ptr [rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000198156 : add dword ptr [rax], eax ; push rsp ; clc ; jmp rsp
0x0000000000196a4e : add dword ptr [rax], eax ; push rsp ; loope 0x196a4b ; call rsp
0x000000000019630e : add dword ptr [rax], eax ; push rsp ; mov dh, cl ; call rsp
0x0000000000197c3e : add dword ptr [rax], eax ; push rsp ; mov edi, esi ; jmp rsp
0x000000000019978e : add dword ptr [rax], eax ; push rsp ; movabs eax, dword ptr [0xa164000116ccfffd] ; std ; jmp rsp
0x0000000000196476 : add dword ptr [rax], eax ; push rsp ; pop rsi ; jmp rsp
0x0000000000196166 : add dword ptr [rax], eax ; push rsp ; ret
0x0000000000196146 : add dword ptr [rax], eax ; push rsp ; ret 0xfff0
0x0000000000197f56 : add dword ptr [rax], eax ; sub eax, r15d ; call rsp
0x000000000019841e : add dword ptr [rax], eax ; test byte ptr [rbp - 0x1b6b0008], dh ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x000000000019800e : add dword ptr [rax], eax ; test byte ptr [rbx], bh ; clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x0000000000196836 : add dword ptr [rax], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x000000000019808e : add dword ptr [rax], eax ; test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000196586 : add dword ptr [rax], eax ; test dl, r14b ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196523 ; jmp rsp
0x0000000000197e8e : add dword ptr [rax], eax ; xchg eax, esp ; and al, 0xf8 ; call rsp
0x000000000019671e : add dword ptr [rax], eax ; xchg eax, esp ; call rsp
0x000000000019625e : add dword ptr [rax], eax ; xchg eax, esp ; jns 0x196261 ; push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x0000000000198386 : add dword ptr [rax], eax ; xchg eax, esp ; pushfq ; clc ; call rsp
0x00000000001963e6 : add dword ptr [rax], eax ; xchg eax, esp ; retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000198636 : add dword ptr [rax], eax ; xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x0000000000196ca6 : add dword ptr [rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x00000000001963ae : add dword ptr [rax], eax ; xor al, 0x9d ; int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000199706 : add dword ptr [rax], eax ; xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000195ece : add dword ptr [rax], eax ; xor al, 0xc5 ; out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000195ed6 : add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000198486 : add dword ptr [rax], eax ; xor al, 0xcf ; clc ; jmp rsp
0x0000000000196895 : add dword ptr [rax], r8d ; add al, 0x8d ; jmp rsp
0x000000000013e7cd : add dword ptr [rbp + 0x18], ebx ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000000ad10a : add dword ptr [rbp + 0x31], eax ; sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad196 : add dword ptr [rbp + 0x31], eax ; shr byte ptr [rdx], 0x48 ; lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000107239 : add dword ptr [rbp - 0xc], esi ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000103349 : add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004a1b8 : add dword ptr [rcx - 0x77], ecx ; push rsp ; ret 0x4808
0x0000000000195ecd : add dword ptr [rcx], eax ; add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000195ed5 : add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x00000000000ce944 : add dword ptr [rcx], ebx ; push rsp ; jne 0xce8d5 ; mov eax, 0x7d00 ; ret
0x00000000000f16bf : add dword ptr [rcx], esi ; ror byte ptr [rcx - 0x77], 0x30 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ad108 : add dword ptr [rdx + 1], ebp ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000001361a1 : add dword ptr [rsi + 0x27], edi ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001360af : add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000081950 : add dword ptr [rsp + 0x18], ecx ; cmp rbx, rax ; je 0x8196b ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8273 : add dword ptr [rsp + rbp + 0x64d8f700], ecx ; mov dword ptr [rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000001adaa6 : add dword ptr [rsp + rbp*2], 0xa ; ret
0x000000000019658d : add dword ptr cs:[rax], eax ; je 0x19651c ; jmp rsp
0x0000000000196585 : add dword ptr cs:[rax], eax ; test dl, r14b ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196524 ; jmp rsp
0x000000000019644d : add dword ptr es:[rax], eax ; in al, 0x22 ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000196455 : add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000196c9d : add dword ptr fs:[rax], eax ; je 0x196d15 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196c9c : add dword ptr fs:[rax], eax ; je 0x196d16 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196ca5 : add dword ptr fs:[rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x0000000000124334 : add eax, 0x1024448b ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003b3db : add eax, 0x1576e0 ; movsd qword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000017247e : add eax, 0x250779 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000172029 : add eax, 0x2508ae ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000017281b : add eax, 0x25292c ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000001441e9 : add eax, 0x281f32 ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000140964 : add eax, 0x286003 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013ac52 : add eax, 0x286241 ; add rsp, 8 ; ret
0x000000000013ac22 : add eax, 0x2862d9 ; add rsp, 8 ; ret
0x000000000013abc2 : add eax, 0x2863c1 ; add rsp, 8 ; ret
0x000000000013abf2 : add eax, 0x2863e9 ; add rsp, 8 ; ret
0x000000000012ecba : add eax, 0x2970fd ; add rsp, 8 ; ret
0x0000000000122e60 : add eax, 0x29f9db ; add rsp, 8 ; ret
0x00000000001173bc : add eax, 0x2add47 ; add rsp, 0x1000 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010acf1 : add eax, 0x2b6526 ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000102eb9 : add eax, 0x2bf8ca ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001034d0 : add eax, 0x2c0d4b ; add rsp, 0x18 ; ret
0x0000000000102f58 : add eax, 0x2c1273 ; add rsp, 8 ; ret
0x00000000000ffa20 : add eax, 0x2c2d5b ; add rsp, 8 ; ret
0x000000000010106b : add eax, 0x2c3080 ; add rsp, 8 ; ret
0x0000000000101044 : add eax, 0x2c30a3 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000ff9f7 : add eax, 0x2c4560 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000ff53c : add eax, 0x2c4a57 ; add rsp, 8 ; ret
0x00000000000ff535 : add eax, 0x2c4a8a ; lea rax, qword ptr [rip + 0x2c4a57] ; add rsp, 8 ; ret
0x00000000000bbbce : add eax, 0x307ded ; add rsp, 8 ; ret
0x00000000000bd497 : add eax, 0x30903c ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008fb25 : add eax, 0x333d5e ; add rsp, 8 ; ret
0x000000000008fb1e : add eax, 0x333d7d ; mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x000000000008fb3a : add eax, 0x336bf1 ; test eax, eax ; jne 0x8fb5d ; add rsp, 8 ; ret
0x000000000008426b : add eax, 0x33cb58 ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x000000000008040a : add eax, 0x343389 ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000019959d : add eax, 0x34a40002 ; sti ; call rsp
0x00000000001995a5 : add eax, 0x35040002 ; sti ; lcall ptr [rsi + rax + 2] ; add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x000000000006bc20 : add eax, 0x357acb ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000003b352 : add eax, 0x38b0ff ; add rsp, 8 ; ret
0x000000000003546c : add eax, 0x38ba07 ; mov dword ptr fs:[rax], 0x22 ; add rsp, 8 ; ret
0x0000000000035137 : add eax, 0x38bd3c ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x0000000000034e1a : add eax, 0x38c059 ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x000000000013ac16 : add eax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac46 : add eax, 0xa8 ; add rsp, 8 ; ret
0x00000000001395d1 : add eax, 0xffff93ea ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000009671f : add eax, 1 ; mov qword ptr [rbx], rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000131a16 : add eax, 4 ; mov qword ptr [rbx + 0x20], rax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000001034cb : add eax, dword ptr [rax] ; add byte ptr [rax - 0x73], cl ; add eax, 0x2c0d4b ; add rsp, 0x18 ; ret
0x0000000000102f53 : add eax, dword ptr [rax] ; add byte ptr [rax - 0x73], cl ; add eax, 0x2c1273 ; add rsp, 8 ; ret
0x0000000000131e9b : add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x30 ; pop rbx ; ret
0x0000000000107800 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010acf6 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000013a96a : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x00000000001398c1 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x00000000001a3c5c : add eax, dword ptr [rax] ; add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rbx], cl ; add byte ptr [rax], al ; pop rax ; outsd dx, dword ptr [rsi] ; out dx, al ; jmp qword ptr [rdi]
0x00000000000cf008 : add eax, dword ptr [rax] ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000004ab4e : add eax, dword ptr [rax] ; mov rax, rbx ; add rsp, 0x440 ; pop rbx ; ret
0x000000000007ef1a : add eax, dword ptr [rbp + 0x10] ; mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007eee9 : add eax, dword ptr [rbp + 0x18] ; mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132ad6 : add eax, dword ptr [rbp - 0x47ea8b40] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195f75 : add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], ah ; dec esp ; add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000195f7d : add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000146a4a : add eax, dword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x000000000014636e : add eax, dword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000001adaa2 : add eax, dword ptr [rsi + rcx + 0x20] ; add dword ptr [rsp + rbp*2], 0xa ; ret
0x00000000000f7395 : add eax, ebp ; test dword ptr [rcx], ecx ; add byte ptr [rax], al ; add rsp, 0x18 ; ret
0x00000000000a083a : add eax, ebx ; nop dword ptr [rax] ; mov eax, dword ptr [rsp + 0x10] ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 4] ; ret
0x0000000000050b1f : add ebp, 0x30 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000173393 : add ebx, 8 ; cmp rbx, rbp ; jb 0x17339e ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012ae86 : add ebx, 8 ; test rdi, rdi ; jne 0x12ae86 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000131201 : add edi, dword ptr [rax + 1] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000198571 : add edi, ecx ; jmp rsp
0x0000000000198569 : add edi, ecx ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x0000000000127aae : add edx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x0000000000100ffc : add edx, 8 ; mov qword ptr [rip + 0x2c30ea], rdx ; add rsp, 8 ; ret
0x00000000000ff2f3 : add edx, dword ptr [rsp + 0x38] ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000bbc75 : add edx, ecx ; mov rax, rdx ; add rsp, 0x18 ; ret
0x0000000000126943 : add esi, eax ; add al, byte ptr [r8] ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000cba66 : add esp, 0x20 ; sar eax, 0x1f ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000122929 : add esp, 0x80 ; add rsp, 0x18 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000053706 : add esp, 0x80 ; add rsp, 0x18 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000008aef7 : add esp, 0x80 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006c5c6 : add esp, 0x80 ; add rsp, 0xd0 ; mov eax, esi ; pop rbx ; ret
0x000000000007177c : add esp, 0x80 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000006ea26 : add esp, 0x80 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000006c717 : add esp, 0x80 ; add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000003a449 : add esp, 0x80 ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x00000000000711b8 : add esp, 0x80 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bdffe : add esp, 0x80 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003abc3 : add esp, 0x80 ; add rsp, 8 ; ret
0x00000000000ca38c : add esp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x00000000000ca456 : add esp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 8 ; ret
0x00000000000ca535 : add esp, 0x80 ; mov dword ptr fs:[rdx], r8d ; mov eax, esi ; add rsp, 0x48 ; ret
0x000000000010e999 : add esp, 0x80 ; mov eax, edx ; add rsp, 8 ; ret
0x0000000000135ff1 : add esp, 0x80 ; mov rax, qword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000808f6 : add esp, 0x80 ; mov rax, r8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000143c96 : add esp, 0x80 ; mov rax, rdx ; add rsp, 8 ; ret
0x000000000003adb4 : add esp, 0x80 ; movsxd rax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000bc64f : add esp, eax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x0000000000187275 : add esp, esi ; jmp rsp
0x00000000000f1760 : add qword ptr [r8], 1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003b2d1 : add qword ptr [r8], rax ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x00000000001969fd : add qword ptr [rax], r8 ; adc al, 0xaa ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000196a05 : add qword ptr [rax], r8 ; add al, 0xab ; jmp rsp
0x0000000000196a4d : add qword ptr [rax], r8 ; push rsp ; loope 0x196a4c ; call rsp
0x0000000000196985 : add qword ptr [rax], rax ; add al, 0xa0 ; jmp rsp
0x0000000000053be3 : add qword ptr [rax], rax ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013e7cc : add qword ptr [rbp + 0x18], rbx ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000000bc64e : add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x00000000001991ad : add r8b, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x000000000019959c : add rax, 0x34a40002 ; sti ; call rsp
0x000000000013ac15 : add rax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac45 : add rax, 0xa8 ; add rsp, 8 ; ret
0x000000000009671e : add rax, 1 ; mov qword ptr [rbx], rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000131a15 : add rax, 4 ; mov qword ptr [rbx + 0x20], rax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007ef19 : add rax, qword ptr [rbp + 0x10] ; mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007eee8 : add rax, qword ptr [rbp + 0x18] ; mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000146a49 : add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x000000000014636d : add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x0000000000173392 : add rbx, 8 ; cmp rbx, rbp ; jb 0x17339f ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012ae85 : add rbx, 8 ; test rdi, rdi ; jne 0x12ae87 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000127aad : add rdx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x0000000000100ffb : add rdx, 8 ; mov qword ptr [rip + 0x2c30ea], rdx ; add rsp, 8 ; ret
0x00000000000bbc74 : add rdx, rcx ; mov rax, rdx ; add rsp, 0x18 ; ret
0x0000000000102ef3 : add rsp, 0x10 ; lea rax, qword ptr [rip + 0x2c12f2] ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000076422 : add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8142 : add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x000000000013d2a6 : add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000008a843 : add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000139d62 : add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x00000000001071c0 : add rsp, 0x10 ; mov eax, r13d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c9ae6 : add rsp, 0x10 ; mov eax, r14d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000be354 : add rsp, 0x10 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002a5ef : add rsp, 0x10 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008879b : add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000088e48 : add rsp, 0x10 ; mov rsi, r12 ; mov rdi, rax ; pop rbx ; pop rbp ; pop r12 ; jmp rcx
0x00000000000888b8 : add rsp, 0x10 ; mov rsi, r12 ; pop rbx ; pop rbp ; pop r12 ; jmp rax
0x00000000000799d5 : add rsp, 0x10 ; movzx eax, al ; neg eax ; pop rbx ; ret
0x0000000000116fc3 : add rsp, 0x10 ; pop rbx ; and eax, 0xc ; pop rbp ; pop r12 ; ret
0x000000000007d380 : add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000008b52d : add rsp, 0x10 ; pop rbx ; mov eax, 1 ; pop rbp ; pop r12 ; ret
0x00000000000856b2 : add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000048548 : add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035b7d : add rsp, 0x10 ; pop rbx ; ret
0x000000000007693c : add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000003b01b : add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba3f0 : add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x000000000002a692 : add rsp, 0x10 ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000139f3e : add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000909ee : add rsp, 0x100 ; ret
0x000000000008d64c : add rsp, 0x100 ; sub rax, rdx ; ret
0x000000000008fabc : add rsp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x00000000000f9876 : add rsp, 0x1000 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001173c1 : add rsp, 0x1000 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bcc2 : add rsp, 0x1000 ; pop rbx ; ret
0x000000000006bcd0 : add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000006bb68 : add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000035d2c : add rsp, 0x108 ; ret
0x00000000000f98fd : add rsp, 0x120 ; pop rbx ; ret
0x000000000007832f : add rsp, 0x130 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000360cd : add rsp, 0x140 ; pop rbx ; ret
0x00000000000356a8 : add rsp, 0x148 ; ret
0x000000000013a254 : add rsp, 0x158 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013a392 : add rsp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000453a3 : add rsp, 0x170 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001196e7 : add rsp, 0x18 ; div rbp ; mov rbx, rax ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000079e9d : add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x00000000000769f0 : add rsp, 0x18 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000769d7 : add rsp, 0x18 ; mov eax, 2 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f1145 : add rsp, 0x18 ; mov eax, 5 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ea073 : add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000132e09 : add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013a631 : add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x00000000000c8cbf : add rsp, 0x18 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012292f : add rsp, 0x18 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000005370c : add rsp, 0x18 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000006d4c8 : add rsp, 0x18 ; mov rax, r12 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079bf5 : add rsp, 0x18 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000a0f15 : add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001196ba : add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000008040f : add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000070bb0 : add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000006c2b5 : add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000013d459 : add rsp, 0x18 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000013ec5b : add rsp, 0x18 ; movzx eax, al ; ret
0x000000000006d558 : add rsp, 0x18 ; pop rbx ; mov rax, r12 ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000001fd6d : add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000004b236 : add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003b3e4 : add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000d6da9 : add rsp, 0x18 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003adbf : add rsp, 0x18 ; ret
0x0000000000037523 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076a04 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079e70 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000080450 : add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000112c51 : add rsp, 0x190 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000feaea : add rsp, 0x190 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f9c22 : add rsp, 0x198 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000070451 : add rsp, 0x20 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8ec6 : add rsp, 0x20 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000136389 : add rsp, 0x20 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000033252 : add rsp, 0x20 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007de6c : add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000008b0b2 : add rsp, 0x20 ; mov rax, r14 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013bca9 : add rsp, 0x20 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013c950 : add rsp, 0x20 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006f1f5 : add rsp, 0x20 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007da4c : add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007dea5 : add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000080089 : add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000070463 : add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000004acc7 : add rsp, 0x20 ; pop rbx ; ret
0x00000000000cba65 : add rsp, 0x20 ; sar eax, 0x1f ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000080aac : add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000136418 : add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8e73 : add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x000000000006ccb5 : add rsp, 0x200 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000130ac5 : add rsp, 0x2270 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000781c3 : add rsp, 0x228 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000072d6c : add rsp, 0x238 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000037135 : add rsp, 0x240 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010e88d : add rsp, 0x268 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002074d : add rsp, 0x28 ; jmp rax
0x00000000000f16d0 : add rsp, 0x28 ; mov eax, 5 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000e9bfc : add rsp, 0x28 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000022359 : add rsp, 0x28 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f0e4e : add rsp, 0x28 ; mov eax, r13d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006bbe5 : add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000004251e : add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; fmul st(0) ; ret
0x0000000000042496 : add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; fmulp st(1) ; ret
0x0000000000021416 : add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000020279 : add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000044fa4 : add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000dbd3d : add rsp, 0x28 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000034e26 : add rsp, 0x28 ; ret
0x00000000000cf960 : add rsp, 0x28 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012e0a4 : add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297c91] ; pop rbx ; ret
0x000000000012e06c : add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297cc9] ; pop rbx ; ret
0x000000000012dfad : add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297d88] ; pop rbx ; ret
0x00000000001304f9 : add rsp, 0x30 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fdd53 : add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000008926d : add rsp, 0x30 ; mov rax, r14 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000136270 : add rsp, 0x30 ; pop rbx ; movzx eax, al ; pop rbp ; pop r12 ; ret
0x00000000000793ba : add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124339 : add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012df7a : add rsp, 0x30 ; pop rbx ; ret
0x0000000000079806 : add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124368 : add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000072ce4 : add rsp, 0x330 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007e7af : add rsp, 0x38 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000e91bd : add rsp, 0x38 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000029cfb : add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cf00a : add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x00000000000798c5 : add rsp, 0x38 ; ret
0x00000000000c94a0 : add rsp, 0x38 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003615b : add rsp, 0x40 ; pop rbx ; ret
0x000000000010bd87 : add rsp, 0x40 ; ret
0x000000000006b90b : add rsp, 0x400 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000106657 : add rsp, 0x408 ; ret
0x0000000000137754 : add rsp, 0x418 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000137367 : add rsp, 0x438 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000004ab3b : add rsp, 0x440 ; pop rbx ; ret
0x000000000002396e : add rsp, 0x48 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000d9d72 : add rsp, 0x48 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fa061 : add rsp, 0x48 ; movzx eax, al ; ret
0x0000000000049724 : add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0d7 : add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000127ab3 : add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x00000000000ca541 : add rsp, 0x48 ; ret
0x000000000007610b : add rsp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0fb : add rsp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001210ba : add rsp, 0x50 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000acbba : add rsp, 0x50 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001433ca : add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x0000000000143490 : add rsp, 0x518 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000024266 : add rsp, 0x58 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fa8e8 : add rsp, 0x58 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012b9a2 : add rsp, 0x58 ; pop rbx ; neg eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000002468c : add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000128a5a : add rsp, 0x58 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013530f : add rsp, 0x60 ; mov eax, ecx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ad159 : add rsp, 0x60 ; mov rax, -1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012e949 : add rsp, 0x60 ; mov rax, r12 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fe08a : add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x00000000000fe0da : add rsp, 0x60 ; mov rbx, rax ; mov rax, rbx ; pop rbx ; ret
0x00000000000acdb7 : add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f8766 : add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ad1e5 : add rsp, 0x60 ; pop rbx ; pop rbp ; sub rax, r12 ; pop r12 ; ret
0x00000000000f8d1f : add rsp, 0x60 ; pop rbx ; ret
0x00000000000acfc8 : add rsp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000001fb8f : add rsp, 0x608 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000136b9f : add rsp, 0x68 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000055eb6 : add rsp, 0x68 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ea37d : add rsp, 0x68 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000005387e : add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013b03b : add rsp, 0x68 ; ret
0x000000000008401e : add rsp, 0x68 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013972f : add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x0000000000140ac3 : add rsp, 0x78 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000048b88 : add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000010723c : add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000122928 : add rsp, 0x80 ; add rsp, 0x18 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000053705 : add rsp, 0x80 ; add rsp, 0x18 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000008aef6 : add rsp, 0x80 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007177b : add rsp, 0x80 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000006ea25 : add rsp, 0x80 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000006c716 : add rsp, 0x80 ; add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000003a448 : add rsp, 0x80 ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x00000000000bdffd : add rsp, 0x80 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003abc2 : add rsp, 0x80 ; add rsp, 8 ; ret
0x00000000000ca38b : add rsp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x00000000000ca455 : add rsp, 0x80 ; mov dword ptr fs:[rdx], esi ; add rsp, 8 ; ret
0x000000000010e998 : add rsp, 0x80 ; mov eax, edx ; add rsp, 8 ; ret
0x0000000000055a8d : add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x000000000007723f : add rsp, 0x80 ; mov eax, edx ; ret
0x000000000006ca00 : add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000000724a7 : add rsp, 0x80 ; mov eax, r8d ; pop rbx ; ret
0x0000000000143b1c : add rsp, 0x80 ; mov rax, qword ptr [rip + 0x27e8c6] ; call qword ptr [rax]
0x00000000001434ef : add rsp, 0x80 ; mov rax, qword ptr [rip + 0x27eef3] ; call qword ptr [rax]
0x00000000000808f5 : add rsp, 0x80 ; mov rax, r8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007011f : add rsp, 0x80 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003ad17 : add rsp, 0x80 ; mov rax, rbx ; pop rbx ; ret
0x0000000000143c95 : add rsp, 0x80 ; mov rax, rdx ; add rsp, 8 ; ret
0x000000000003adb3 : add rsp, 0x80 ; movsxd rax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000047ee2 : add rsp, 0x80 ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x0000000000118b46 : add rsp, 0x80 ; pop rbx ; mov eax, esi ; pop rbp ; pop r12 ; ret
0x000000000006edf4 : add rsp, 0x80 ; pop rbx ; mov rax, rdx ; pop rbp ; pop r12 ; ret
0x00000000001027ab : add rsp, 0x80 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000045692 : add rsp, 0x80 ; pop rbx ; ret
0x000000000006c458 : add rsp, 0x80 ; ret
0x000000000003a14e : add rsp, 0x80 ; xor eax, eax ; pop rbx ; ret
0x0000000000035c23 : add rsp, 0x88 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000035c0c : add rsp, 0x88 ; neg ebx ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000036f3b : add rsp, 0x88 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000036fab : add rsp, 0x88 ; pop rbx ; pop rbp ; ret
0x0000000000102afb : add rsp, 0x90 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011fb19 : add rsp, 0x90 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013ec11 : add rsp, 0x90 ; pop rbx ; mov eax, eax ; ret
0x0000000000035de0 : add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035ee8 : add rsp, 0x90 ; pop rbx ; ret
0x0000000000035782 : add rsp, 0x90 ; ret
0x00000000000f8ac8 : add rsp, 0x98 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000c86c6 : add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000007b3e4 : add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000036ca0 : add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000002056e : add rsp, 0x98 ; ret
0x00000000000c9006 : add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000029b49 : add rsp, 0xa0 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fa332 : add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000029b19 : add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013942e : add rsp, 0xa8 ; pop rbx ; pop rbp ; ret
0x000000000003704c : add rsp, 0xa8 ; ret
0x00000000000cd81b : add rsp, 0xb0 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010b237 : add rsp, 0xc8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bc9f4 : add rsp, 0xd0 ; mov eax, edx ; pop rbx ; ret
0x0000000000118839 : add rsp, 0xd0 ; mov eax, esi ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006c5cc : add rsp, 0xd0 ; mov eax, esi ; pop rbx ; ret
0x0000000000106b10 : add rsp, 0xd0 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000106974 : add rsp, 0xd0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bca5d : add rsp, 0xd0 ; pop rbx ; ret
0x00000000000359d9 : add rsp, 0xd0 ; ret
0x00000000001189f2 : add rsp, 0xd8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x000000000011066c : add rsp, 0xd8 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010631a : add rsp, 0xd8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010645d : add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x0000000000045fc3 : add rsp, 0xd8 ; ret
0x00000000001278a3 : add rsp, 0xe0 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000715ec : add rsp, 0xf8 ; mov eax, ebp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006cb6c : add rsp, 0xf8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000050b54 : add rsp, 8 ; add ebp, 0x30 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000001181a2 : add rsp, 8 ; add rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000102d0c : add rsp, 8 ; cmp rax, -0xfff ; jae 0x102d25 ; ret
0x0000000000109382 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x10939b ; ret
0x0000000000109682 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x10969b ; ret
0x0000000000109712 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x10972b ; ret
0x00000000001097d2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x1097eb ; ret
0x000000000010991c : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109935 ; ret
0x0000000000109a2c : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109a45 ; ret
0x0000000000109abc : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109ad5 ; ret
0x0000000000109ca2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109cbb ; ret
0x0000000000109ca2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109cbf ; ret
0x0000000000109f02 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x109f1b ; ret
0x000000000010a552 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a56b ; ret
0x000000000010a5b2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a5cb ; ret
0x00000000000cd29c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd2b5 ; ret
0x00000000000cd2fc : add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd315 ; ret
0x00000000000f6ea2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6ebb ; ret
0x00000000000f6ea2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6ebf ; ret
0x00000000000f6f02 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6f1b ; ret
0x00000000000f869c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf86b5 ; ret
0x00000000000f88bc : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf88d5 ; ret
0x00000000000f891c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8935 ; ret
0x00000000000f8f4c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8f65 ; ret
0x00000000000f909c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xf90b5 ; ret
0x00000000000fcd9c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfcdb5 ; ret
0x00000000000fd8a2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfd8bb ; ret
0x00000000000fd8a2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfd8bf ; ret
0x00000000000fe5ec : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe605 ; ret
0x00000000000fe64c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe665 ; ret
0x00000000000fe6b2 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe6cb ; ret
0x00000000000fe712 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe72b ; ret
0x00000000000feb82 : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfeb9b ; ret
0x00000000000fed3c : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfed55 ; ret
0x00000000000fedcc : add rsp, 8 ; cmp rax, -0xfff ; jae 0xfede5 ; ret
0x000000000008fb6c : add rsp, 8 ; jmp rax
0x000000000012679c : add rsp, 8 ; lea eax, dword ptr [rbx + rbp] ; pop rbx ; pop rbp ; ret
0x000000000012e660 : add rsp, 8 ; mov eax, 0x10 ; pop rbx ; pop rbp ; ret
0x000000000011b138 : add rsp, 8 ; mov eax, 0xca ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a09e : add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000071848 : add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x0000000000079d91 : add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000110572 : add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000001176e6 : add rsp, 8 ; mov eax, 5 ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x0000000000114b48 : add rsp, 8 ; mov eax, 7 ; pop rbx ; pop rbp ; ret
0x0000000000107951 : add rsp, 8 ; mov eax, 9 ; pop rbx ; pop rbp ; ret
0x0000000000050a9e : add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000000f709c : add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000070a78 : add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007183c : add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000020d97 : add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x00000000000557c6 : add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000045f13 : add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000006f350 : add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006c71d : add rsp, 8 ; mov eax, esi ; pop rbx ; pop rbp ; ret
0x00000000001351a0 : add rsp, 8 ; mov eax, r13d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000137d70 : add rsp, 8 ; mov edx, r13d ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000791f2 : add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008fc0f : add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000006f4c4 : add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000328f3 : add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000007fe5f : add rsp, 8 ; mov rax, rdi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000c8b28 : add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000869e8 : add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000000c04c3 : add rsp, 8 ; mov rax, rdx ; ret
0x0000000000071006 : add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a44f : add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x000000000009846f : add rsp, 8 ; mov rbp, rdx ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000006f4d8 : add rsp, 8 ; mov rbx, r13 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008822e : add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x000000000012fe08 : add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x0000000000073670 : add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x00000000001358f2 : add rsp, 8 ; movzx eax, al ; add eax, 1 ; ret
0x0000000000109055 : add rsp, 8 ; movzx eax, al ; neg eax ; ret
0x0000000000131c66 : add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000000456c5 : add rsp, 8 ; movzx eax, al ; ret
0x0000000000129cd9 : add rsp, 8 ; movzx eax, ax ; ret
0x0000000000072c26 : add rsp, 8 ; pop rbx ; mov eax, r13d ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000130f28 : add rsp, 8 ; pop rbx ; pop rbp ; add eax, edx ; ret
0x0000000000086a8d : add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x000000000002bb66 : add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000033047 : add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000215b0 : add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000035436 : add rsp, 8 ; ret
0x0000000000143250 : add rsp, 8 ; sar eax, 0x1f ; ret
0x000000000013ed53 : add rsp, 8 ; shr eax, 0x1f ; ret
0x00000000000ba2ea : add rsp, 8 ; sub ebx, eax ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001176cd : add rsp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000002bb9e : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000022687 : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079670 : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ec1aa : add rsp, 8 ; xor eax, eax ; ret
0x00000000000f7049 : add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000001725ba : and al, 0 ; lea rbx, qword ptr [rip + 0x24b1dd] ; sub rsp, 8 ; call 0x7e8af
0x00000000001725c1 : and al, 0 ; sub rsp, 8 ; call 0x7e8a8
0x0000000000124337 : and al, 0x10 ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131199 : and al, 0x10 ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fcd33 : and al, 0x10 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000035227 : and al, 0x10 ; fld xword ptr [rsp + 8] ; ret
0x0000000000029868 : and al, 0x10 ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x00000000000a07fa : and al, 0x10 ; mov dword ptr [rdi], eax ; mov eax, dword ptr [rsp + 0x18] ; mov dword ptr [rdi + 4], eax ; lea rax, qword ptr [rdi + 8] ; ret
0x00000000000843ba : and al, 0x10 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000104321 : and al, 0x10 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000010bd1b : and al, 0x10 ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd7c : and al, 0x10 ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x000000000007da78 : and al, 0x10 ; mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007de9e : and al, 0x10 ; mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x00000000000ad45a : and al, 0x10 ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71a : and al, 0x10 ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x00000000001108fe : and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d6 : and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x0000000000088f68 : and al, 0x14 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000203e5 : and al, 0x14 ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000001462d3 : and al, 0x18 ; add byte ptr [rax - 0x75], cl ; and al, 0x38 ; jne 0x1462c6 ; add rsp, 0x48 ; ret
0x000000000002a7c5 : and al, 0x18 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000c9477 : and al, 0x18 ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000008822c : and al, 0x18 ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x0000000000086a8b : and al, 0x18 ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x000000000013a730 : and al, 0x18 ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x0000000000083f41 : and al, 0x18 ; mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x0000000000145d13 : and al, 0x18 ; mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000843b5 : and al, 0x18 ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000131b8b : and al, 0x18 ; mov rcx, qword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000013a9b4 : and al, 0x1a ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000135a81 : and al, 0x1c ; add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0d3 : and al, 0x1c ; pop rdx ; pop rcx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001463f5 : and al, 0x1f ; add byte ptr [rbp + 0x16], dh ; add rsp, 0x38 ; ret
0x0000000000199480 : and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x00000000000acdb5 : and al, 0x20 ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000336ff : and al, 0x20 ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9b8
0x00000000000842c1 : and al, 0x20 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000c984f : and al, 0x20 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039274 : and al, 0x20 ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000027a87 : and al, 0x20 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025349 : and al, 0x20 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x00000000000ccaa6 : and al, 0x28 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000036153 : and al, 0x28 ; and edx, 1 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x0000000000083f46 : and al, 0x28 ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842bc : and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000336fa : and al, 0x28 ; mov qword ptr [rsp + 0x20], rdx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9bd
0x00000000000336f9 : and al, 0x28 ; mov qword ptr [rsp + 0x20], rdx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9be
0x0000000000023a21 : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238bc : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000c984a : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024d65 : and al, 0x28 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818c : and al, 0x28 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000013a776 : and al, 0x2a ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012cf86 : and al, 0x2c ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000453a1 : and al, 0x30 ; add rsp, 0x170 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ad1e3 : and al, 0x30 ; add rsp, 0x60 ; pop rbx ; pop rbp ; sub rax, r12 ; pop r12 ; ret
0x000000000013846d : and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000023a1c : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f7a : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1d : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000000ff2ed : and al, 0x30 ; sldt word ptr [rbx] ; push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000983f5 : and al, 0x31 ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000197fe0 : and al, 0x33 ; clc ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x000000000011d0f2 : and al, 0x34 ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000198688 : and al, 0x36 ; stc ; call rsp
0x000000000014636b : and al, 0x38 ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x0000000000048b86 : and al, 0x38 ; add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013ec0f : and al, 0x38 ; add rsp, 0x90 ; pop rbx ; mov eax, eax ; ret
0x0000000000137d57 : and al, 0x38 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001462d9 : and al, 0x38 ; jne 0x1462c0 ; add rsp, 0x48 ; ret
0x00000000001462d8 : and al, 0x38 ; jne 0x1462c1 ; add rsp, 0x48 ; ret
0x00000000000ff2f5 : and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000359d0 : and al, 0x38 ; mov qword ptr [r8 + 0x90], rdx ; add rsp, 0xd0 ; ret
0x0000000000026682 : and al, 0x38 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000241b4 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e5 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc1a2 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df5 : and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000000238b7 : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db3 : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cda : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000011b9c3 : and al, 0x3c ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000198050 : and al, 0x40 ; clc ; call rsp
0x0000000000025843 : and al, 0x40 ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000023f7f : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c41 : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534e : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667d : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000243e0 : and al, 0x40 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000001966e0 : and al, 0x42 ; call rsp
0x00000000000bbbcb : and al, 0x48 ; lea eax, dword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x00000000000e16ab : and al, 0x48 ; lea edx, dword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94d
0x00000000000e163d : and al, 0x48 ; mov edx, ebp ; mov ecx, eax ; mov rsi, r13 ; mov qword ptr [rsp + 8], r9 ; call 0xdd950
0x0000000000027db8 : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdf : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583e : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000241af : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd2 : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3c : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000000f175f : and al, 0x49 ; add dword ptr [rax], 1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000acc5b : and al, 0x4c ; lea ecx, dword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000013500f : and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000198150 : and al, 0x54 ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000111808 : and al, 0x58 ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fe327 : and al, 0x60 ; mov dword ptr [rbp + 0x24], eax ; xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000198238 : and al, 0x65 ; clc ; lcall ptr [rbp + rdx*8 + 0x66240001] ; clc ; jmp rsp
0x0000000000195d28 : and al, 0x65 ; out dx, eax ; jmp rsp
0x0000000000198240 : and al, 0x66 ; clc ; jmp rsp
0x000000000013ad1a : and al, 0x66 ; mov dword ptr [rax + rdx*8 - 4], ecx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000198710 : and al, 0x66 ; stc ; call rsp
0x0000000000198df8 : and al, 0x68 ; cli ; jmp rsp
0x0000000000197110 : and al, 0x68 ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197123 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000000c24e5 : and al, 0x68 ; or eax, 8 ; mov byte ptr [rsp + 0x79], al ; jmp 0xc2506
0x000000000010e414 : and al, 0x74 ; adc dword ptr [rcx], esi ; rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x0000000000198ee0 : and al, 0x77 ; cli ; call rsp
0x0000000000194060 : and al, 0x9e ; cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x0000000000195a30 : and al, 0xa0 ; out dx, al ; jmp rsp
0x00000000000fdbf0 : and al, 0xa4 ; cmp dword ptr [rsp - 0x2c], ecx ; je 0xfdc38 ; mov dword ptr fs:[r8], r12d ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000132bb8 : and al, 0xa7 ; add byte ptr [rax], al ; test eax, eax ; jne 0x132be0 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f8c9d : and al, 0xb4 ; mov edx, eax ; neg eax ; cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x000000000010a37c : and al, 0xc ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000cd0c0 : and al, 0xc ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035b7b : and al, 0xc ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000108fac : and al, 0xc ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cd1b7 : and al, 0xc ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003adbd : and al, 0xc ; add rsp, 0x18 ; ret
0x00000000000c9bb2 : and al, 0xc ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000221a2 : and al, 0xc ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000146420 : and al, 0xc ; add rsp, 0x38 ; ret
0x000000000012ef11 : and al, 0xc ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001210b8 : and al, 0xc ; add rsp, 0x50 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002468a : and al, 0xc ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000035e67 : and al, 0xc ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035f38 : and al, 0xc ; add rsp, 0x90 ; pop rbx ; ret
0x00000000001311fc : and al, 0xc ; bswap eax ; mov dword ptr [rbx], eax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e5a2 : and al, 0xc ; mov byte ptr [rbx], al ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000007d3a3 : and al, 0xc ; mov rdi, qword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000bfdef : and al, 0xc ; mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013e4c2 : and al, 0xc ; mov word ptr [rbx], ax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x00000000000fdf35 : and al, 0xc ; test edx, edx ; js 0xfdf56 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fdf34 : and al, 0xc ; test edx, edx ; js 0xfdf57 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000139626 : and al, 0xc ; xor eax, eax ; test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000352fc : and al, 0xe8 ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000352cc : and al, 0xe8 ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x00000000000bbce0 : and al, 0xe8 ; fsubp st(1) ; fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x000000000004a694 : and al, 0xe8 ; shr rax, 0x20 ; mov dword ptr [rsp - 0x14], eax ; fld xword ptr [rsp - 0x18] ; ret
0x000000000003528b : and al, 0xec ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000004a69c : and al, 0xec ; fld xword ptr [rsp - 0x18] ; ret
0x00000000001462ba : and al, 0xf ; add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146382 : and al, 0xf ; add byte ptr [rbp + 9], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000035327 : and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035305 : and al, 0xf0 ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000353f0 : and al, 0xf0 ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000bbce6 : and al, 0xf0 ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x0000000000196a91 : and al, 0xf4 ; call rsp
0x00000000001976c9 : and al, 0xf7 ; jmp rsp
0x0000000000197e91 : and al, 0xf8 ; call rsp
0x000000000004a651 : and al, 0xf8 ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x0000000000035362 : and al, 0xfc ; fild dword ptr [rsp - 4] ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x0000000000035366 : and al, 0xfc ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x000000000004a60b : and al, 0xfc ; movss xmm0, dword ptr [rsp - 4] ; ret
0x00000000000354a7 : and al, 0xfe ; fldcw word ptr [rsp - 2] ; ret
0x00000000001963fd : and al, 1 ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x00000000000c83e6 : and al, 4 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000dbd7f : and al, 4 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000e2e83 : and al, 4 ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001221d1 : and al, 7 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000085722 : and al, 8 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000109d38 : and al, 8 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba406 : and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000020c73 : and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000011bd6b : and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f1d2 : and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b25c : and al, 8 ; add rsp, 0x18 ; ret
0x000000000007da7d : and al, 8 ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007dea3 : and al, 8 ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000080a6a : and al, 8 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fce67 : and al, 8 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006ff06 : and al, 8 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fec61 : and al, 8 ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000137752 : and al, 8 ; add rsp, 0x418 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000137365 : and al, 8 ; add rsp, 0x438 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f87dd : and al, 8 ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000005387c : and al, 8 ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000798bc : and al, 8 ; cmp qword ptr [rax + 0x30], 0 ; je 0x798d7 ; add rsp, 0x38 ; ret
0x00000000000798bb : and al, 8 ; cmp qword ptr [rax + 0x30], 0 ; je 0x798d8 ; add rsp, 0x38 ; ret
0x000000000006f02e : and al, 8 ; je 0x6f060 ; lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000013dd87 : and al, 8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013dec7 : and al, 8 ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x0000000000124b0d : and al, 8 ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000360c6 : and al, 8 ; mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x000000000013d2a2 : and al, 8 ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x00000000000203e1 : and al, 8 ; mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000013d3c1 : and al, 8 ; mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x0000000000139e53 : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981e : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a2 : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000012df6a : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df88 ; mov rdi, rsp ; call rax
0x000000000012df69 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df89 ; mov rdi, rsp ; call rax
0x000000000012e055 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e073 ; mov rdi, rsp ; call rax
0x000000000012e054 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e074 ; mov rdi, rsp ; call rax
0x000000000010bd20 : and al, 8 ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd81 : and al, 8 ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x0000000000104230 : and al, 8 ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x000000000008417b : and al, 8 ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x000000000013d722 : and al, 8 ; mov word ptr [rbx], ax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000013a727 : and al, 8 ; push r14 ; push r13 ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x0000000000034e22 : and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x28 ; ret
0x00000000000a0e1d : and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000035474 : and al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000001034ca : and al, byte ptr [rbx] ; add byte ptr [rax], al ; lea rax, qword ptr [rip + 0x2c0d4b] ; add rsp, 0x18 ; ret
0x000000000008bd7a : and al, byte ptr [rsp - 0xb7f68c] ; ret 0xc148
0x000000000003549e : and ax, 0xf0c0 ; or edi, eax ; mov word ptr [rsp - 2], di ; fldcw word ptr [rsp - 2] ; ret
0x0000000000197e39 : and bh, al ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000197e41 : and bh, al ; jmp rsp
0x0000000000002fa8 : and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x00000000001811c5 : and bh, byte ptr [rsi - 0x5e0466e] ; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp ; ret
0x000000000002534a : and byte ptr [rax - 0x75], cl ; je 0x2537e ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000027a88 : and byte ptr [rax - 0x75], cl ; je 0x27abd ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000079650 : and byte ptr [rax - 0x77], cl ; sbb byte ptr [r15 + 0x11], r14b ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000075ea3 : and byte ptr [rax - 1], bh ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000129862 : and byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000131e95 : and byte ptr [rax], al ; add byte ptr [rsi + 0xe], dh ; mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x00000000000791f0 : and byte ptr [rax], al ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000000044b : and byte ptr [rax], al ; mov dword ptr [rcx + 0x7c05000c], eax ; adc byte ptr [rsp + rcx], bl ; ret 0x4412
0x0000000000033255 : and byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000019637d : and byte ptr [rcx], al ; add byte ptr [rax + rbx*4], al ; int1 ; call rsp
0x0000000000080aaf : and byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000fdc93 : and byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000fffe8 : and byte ptr [rdi], cl ; xchg eax, esp ; sar dword ptr [rsp + rbx*2], 0xf ; xchg eax, esp ; ret 0xd108
0x0000000000185df8 : and byte ptr [rdx - 0x5545000f], ch ; int1 ; call rsp
0x0000000000100881 : and byte ptr [rsp + rbp*8 + 0x41], dh ; mov byte ptr [rcx - 1], 0 ; ret
0x0000000000194320 : and byte ptr [rsp + rdi*8 - 0x36c6f01], dl ; inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000196451 : and dh, dl ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000194ad9 : and dl, ch ; jmp rsp
0x000000000010a7cc : and dl, dh ; dec dword ptr [rax - 0x7b] ; sal byte ptr [rsp + rdx + 0x48], 0x89 ; ret
0x00000000000ceea8 : and dword ptr [rax - 0x73], ecx ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000007430c : and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074368 : and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004b231 : and dword ptr [rcx + 0xf], eax ; mov dh, 0xc4 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001963b5 : and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x00000000001963ad : and dword ptr [rcx], eax ; add byte ptr [rbx*4 + 0x21ccfff1], dh ; add dword ptr [rax], eax ; popfq ; int1 ; jmp rsp
0x0000000000198bf5 : and dword ptr [rdx], eax ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000198bfd : and dword ptr [rdx], eax ; add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x00000000000801a3 : and dword ptr [rsp + rsi], ecx ; add byte ptr [rax - 0x77], cl ; cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x000000000011b1fd : and eax, 0x2a9f46 ; mov eax, 0xca ; add rsp, 0x28 ; ret
0x0000000000020748 : and eax, 0x30 ; add rsp, 0x28 ; jmp rax
0x000000000008fb67 : and eax, 0x30 ; add rsp, 8 ; jmp rax
0x0000000000047bc4 : and eax, 0x30 ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003521e : and eax, 0x7fff ; or eax, edx ; mov dword ptr [rsp + 0x10], eax ; fld xword ptr [rsp + 8] ; ret
0x0000000000124b0a : and eax, 0x824448b ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003549f : and eax, 0xc709f0c0 ; mov word ptr [rsp - 2], di ; fldcw word ptr [rsp - 2] ; ret
0x00000000000fc504 : and eax, 0xe8ef8948 ; stosd dword ptr [rdi], eax ; xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000118499 : and eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x00000000001963e5 : and eax, dword ptr [rcx] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x00000000001148c8 : and ebp, 0x200 ; jne 0x11490d ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001148c7 : and ebp, 0x200 ; jne 0x11490e ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007430d : and ebp, edi ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074369 : and ebp, edi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195111 : and ebp, esp ; jmp rsp
0x0000000000035287 : and ecx, ecx ; mov dword ptr [rsp - 0x14], ecx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x0000000000198601 : and ecx, edi ; call rsp
0x0000000000036155 : and edx, 1 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x00000000000f8499 : and edx, dword ptr [rbx] ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x7d], 0xec ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000352c8 : and edx, eax ; mov dword ptr [rsp - 0x18], edx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000007732b : and edx, edi ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x0000000000196459 : and esi, edx ; jmp rsp
0x00000000000bc64b : and esp, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x00000000001963ac : and qword ptr [rcx], r8 ; add byte ptr [rbx*4 + 0x21ccfff1], dh ; add dword ptr [rax], eax ; popfq ; int1 ; jmp rsp
0x0000000000198bf4 : and qword ptr [rdx], r8 ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000000bc64a : and r12d, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x000000000013ece1 : bswap eax ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x00000000001311fe : bswap eax ; mov dword ptr [rbx], eax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013ed21 : bswap eax ; mov eax, eax ; mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x00000000001004ec : bt esp, edx ; jae 0x1004bf ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001004eb : bt r12, rdx ; jae 0x1004c0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000194a7b : call qword ptr [rsp + rdi*2 + 0x1d940000]
0x00000000000299ba : call rsp
0x00000000000566d3 : cdq ; scasb al, byte ptr [rdi] ; add dword ptr [rax], eax ; add rsp, 0xd8 ; ret
0x000000000008fc08 : cdqe ; mov byte ptr [rbp + rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000013126d : cdqe ; mov qword ptr [rbx], rax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000003b448 : cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195d45 : clc ; add byte ptr [rax], al ; adc al, 0x6a ; out dx, eax ; jmp rsp
0x000000000009969f : clc ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bc8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000011a7f0 : clc ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000715ef : clc ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; ret
0x0000000000195d3d : clc ; add byte ptr [rax], al ; in al, 0x67 ; out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x000000000006c27d : clc ; add dword ptr [rax - 1], edi ; cmove eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000198705 : clc ; add dword ptr [rax], eax ; add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x000000000019870d : clc ; add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x00000000001361a0 : clc ; add dword ptr [rsi + 0x27], edi ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001360ae : clc ; add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000197e92 : clc ; call rsp
0x0000000000199329 : clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000198092 : clc ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000198012 : clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x0000000000198482 : clc ; dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x0000000000198152 : clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000197e3a : clc ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x000000000019818a : clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000197f82 : clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000197e42 : clc ; jmp rsp
0x00000000000bbbc8 : clc ; jno 0xbbc59 ; and al, 0x48 ; lea eax, dword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x0000000000197fe2 : clc ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x000000000019823a : clc ; lcall ptr [rbp + rdx*8 + 0x66240001] ; clc ; jmp rsp
0x0000000000049122 : clc ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000198382 : clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x000000000004a652 : clc ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000007745c : clc ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000121a66 : clc ; push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007e4ef : clc ; push qword ptr [rbp - 0x44] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000074308 : clc ; push qword ptr [rbx + rax - 0x7d] ; and ebp, edi ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074364 : clc ; push qword ptr [rbx + rax - 0x7d] ; and ebp, edi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f041 : clc ; push qword ptr [rbx + rcx + 0x48] ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000c92e1 : clc ; push qword ptr [rsp + rax + 0x4d] ; mov dword ptr [rbp], esi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000010a236 : clc ; push qword ptr [rsp + rax - 0x75] ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000197ee2 : clc ; push rsp ; ret
0x0000000000102ebb : clc ; sub eax, dword ptr [rax] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013ad1f : cld ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000193b32 : cld ; call rsp
0x0000000000074362 : cld ; cmp eax, 0xff ; je 0x7437a ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000074361 : cld ; cmp eax, 0xff ; je 0x7437b ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019970a : cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x00000000001a7254 : cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000035363 : cld ; fild dword ptr [rsp - 4] ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x0000000000035367 : cld ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x0000000000195521 : cld ; in eax, dx ; jmp rsp
0x0000000000194066 : cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x0000000000193b56 : cld ; jmp rsp
0x0000000000033041 : cld ; jne 0x3302c ; mov byte ptr [rcx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019422a : cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000193c6a : cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000193c66 : cld ; ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000194226 : cld ; ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x000000000019422e : cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x0000000000193c6e : cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x000000000004a60c : cld ; movss xmm0, dword ptr [rsp - 4] ; ret
0x0000000000194062 : cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x0000000000127aab : cli ; add al, 0x48 ; add edx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x0000000000195d7d : cli ; add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000195d85 : cli ; add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d80 ; call rsp
0x0000000000107238 : cli ; add dword ptr [rbp - 0xc], esi ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000100880 : cli ; and byte ptr [rsp + rbp*8 + 0x41], dh ; mov byte ptr [rcx - 1], 0 ; ret
0x0000000000198bc2 : cli ; call rsp
0x00000000000f811b : cli ; dec dword ptr [rcx - 0x74fb8b30] ; and al, 0xc ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000198bba : cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x0000000000036c9d : cli ; je 0x36cbc ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000036dff : cli ; je 0x36e1c ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000018a4a6 : cli ; jmp rsp
0x0000000000198bfa : cli ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000198f92 : cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x000000000018a4a2 : cli ; lcall ptr [rsi + rbx*8] ; cli ; jmp rsp
0x0000000000198eda : cli ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000019932a : cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x000000000007732c : cli ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x0000000000199202 : cli ; push qword ptr [rcx + rcx*2 - 0x288bfffe] ; cli ; jmp rsp
0x00000000001811ca : cli ; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp ; ret
0x000000000013d246 : cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000001986a5 : cmc ; add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001986ad : cmc ; add dword ptr [rax], eax ; je 0x1986fd ; stc ; call rsp
0x00000000000c9ae5 : cmc ; add rsp, 0x10 ; mov eax, r14d ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000017339a : cmc ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000187dfe : cmc ; call rsp
0x0000000000187e12 : cmc ; dec dword ptr [rax - 0x2b000a22] ; iretd ; cmc ; call rsp
0x0000000000187e5e : cmc ; dec dword ptr [rdi - 0x2b000a32] ; iretd ; cmc ; call rsp
0x0000000000196ca2 : cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000187e02 : cmc ; inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x0000000000121a63 : cmc ; inc dword ptr [rbx + 0xe75fff8] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000187e4e : cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e1e : cmc ; inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x00000000001af88a : cmc ; jmp rsp
0x0000000000187e22 : cmc ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000187df6 : cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x00000000000e4c56 : cmc ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x0000000000187e4a : cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e46 : cmc ; push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x000000000012e89c : cmc ; push rbx ; sub rsp, 0x60 ; call 0x13ab08
0x00000000001175fc : cmova eax, edx ; add rsp, 0x28 ; ret
0x0000000000098458 : cmova ebp, eax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000098457 : cmova rbp, rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000013ec0c : cmove eax, dword ptr [rsp + 0x38] ; add rsp, 0x90 ; pop rbx ; mov eax, eax ; ret
0x000000000006c284 : cmove eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000f7f6b : cmove eax, dword ptr [rsp] ; add rsp, 0x18 ; ret
0x00000000000bc7f2 : cmove eax, edx ; add rsp, 0x28 ; ret
0x0000000000089c23 : cmove eax, edx ; add rsp, 8 ; ret
0x00000000000fe0be : cmove ebx, eax ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x00000000000f7f6a : cmove rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x00000000000bc7f1 : cmove rax, rdx ; add rsp, 0x28 ; ret
0x0000000000089c22 : cmove rax, rdx ; add rsp, 8 ; ret
0x00000000000fe0bd : cmove rbx, rax ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x00000000000cbb94 : cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000127cd5 : cmovne eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000f8d50 : cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x0000000000143446 : cmovne eax, edx ; add rsp, 8 ; ret
0x0000000000073131 : cmovne eax, edx ; mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000007d799 : cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000139d5f : cmovne edx, eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000090ae3 : cmovne edx, ecx ; mov qword ptr [r9], rdx ; add rsp, 0x100 ; ret
0x000000000009846c : cmovne edx, edi ; add rsp, 8 ; mov rbp, rdx ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000143445 : cmovne rax, rdx ; add rsp, 8 ; ret
0x0000000000090ae2 : cmovne rdx, rcx ; mov qword ptr [r9], rdx ; add rsp, 0x100 ; ret
0x000000000009846b : cmovne rdx, rdi ; add rsp, 8 ; mov rbp, rdx ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000356a0 : cmovns eax, dword ptr [rsp + 0xa0] ; add rsp, 0x148 ; ret
0x00000000000fe9c9 : cmovns eax, dword ptr [rsp] ; add rsp, 0x18 ; ret
0x000000000003569f : cmovns rax, qword ptr [rsp + 0xa0] ; add rsp, 0x148 ; ret
0x00000000000fe9c8 : cmovns rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x0000000000111b59 : cmovs ecx, dword ptr [rbp + 0x415bd865] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000708fc : cmovs ecx, dword ptr [rcx + 0x415d5bd8] ; pop rsp ; ret
0x00000000000fa059 : cmp al, 0 ; add byte ptr [rbp - 0x3f6bf040], al ; add rsp, 0x48 ; movzx eax, al ; ret
0x000000000007d3a7 : cmp al, 0x24 ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000acc5a : cmp al, 0x24 ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000e16aa : cmp al, 0x24 ; lea rdx, qword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94e
0x00000000000bd498 : cmp al, 0x90 ; xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019514c : cmp al, 0xa3 ; add byte ptr [rax], al ; je 0x1951e0 ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000035138 : cmp al, 0xbd ; cmp byte ptr [rax], al ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x000000000019808c : cmp al, 0xcc ; add dword ptr [rax], eax ; test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x000000000012fd50 : cmp al, 0xd6 ; add byte ptr [rax], al ; test eax, eax ; jne 0x12fd78 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000195d3c : cmp al, 0xf8 ; add byte ptr [rax], al ; in al, 0x67 ; out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x0000000000198019 : cmp al, 0xf8 ; jmp rsp
0x000000000001fd6b : cmp al, byte ptr [rax] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000198f95 : cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000198f8d : cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x000000000012eeed : cmp al, byte ptr [rsi] ; add byte ptr [rsi + 1], bh ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x0000000000198f8c : cmp al, byte ptr fs:[rdx] ; add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x00000000001af888 : cmp bh, ah ; cmc ; jmp rsp
0x0000000000146a50 : cmp bl, al ; nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000001077fd : cmp byte ptr [r8 + 3], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f8b3 : cmp byte ptr [r8], al ; add byte ptr [rax + 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001077fe : cmp byte ptr [rax + 3], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000011074c : cmp byte ptr [rax - 0x3c41f0e8], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000231e3 : cmp byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000025cdb : cmp byte ptr [rax - 0x75], cl ; je 0x25d0f ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000027db4 : cmp byte ptr [rax - 0x75], cl ; je 0x27de9 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000028d64 : cmp byte ptr [rax - 0x75], cl ; je 0x28d99 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x000000000013d243 : cmp byte ptr [rax - 0x77], cl ; cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000006f8b4 : cmp byte ptr [rax], al ; add byte ptr [rax + 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b355 : cmp byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000ba72e : cmp byte ptr [rax], al ; je 0xba744 ; add dword ptr [rax + 0x10], 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000034e1d : cmp byte ptr [rax], al ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x000000000003546f : cmp byte ptr [rax], al ; mov dword ptr fs:[rax], 0x22 ; add rsp, 8 ; ret
0x00000000001462da : cmp byte ptr [rbp - 0x25], dh ; add rsp, 0x48 ; ret
0x00000000000e91c0 : cmp byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000007e7b2 : cmp byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000134df6 : cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000000d9bb7 : cmp byte ptr [rcx], al ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000c94a3 : cmp byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0b5 : cmp byte ptr [rsi], al ; add byte ptr [rsi + 2], bh ; mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000001463f3 : cmp byte ptr [rsp + 0x1f], 0 ; jne 0x14641b ; add rsp, 0x38 ; ret
0x00000000001462b8 : cmp byte ptr [rsp + 0xf], 0 ; jne 0x1462f5 ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146380 : cmp byte ptr [rsp + 0xf], 0 ; jne 0x14639d ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000139727 : cmp byte ptr [rsp + 8], 0 ; setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x00000000001219e9 : cmp cl, dl ; je 0x121ada ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000798bf : cmp dword ptr [rax + 0x30], 0 ; je 0x798d4 ; add rsp, 0x38 ; ret
0x00000000000ba72d : cmp dword ptr [rax], 0 ; je 0xba745 ; add dword ptr [rax + 0x10], 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000079e98 : cmp dword ptr [rax], 0x1d ; je 0x79e75 ; add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000013e875 : cmp dword ptr [rbp], 2 ; je 0x13e8b6 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000036c9a : cmp dword ptr [rbx + 8], -6 ; je 0x36cbf ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000036dfc : cmp dword ptr [rbx + 8], -6 ; je 0x36e1f ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000007d474 : cmp dword ptr [rcx - 1], -1 ; dec dword ptr [rdi] ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000196715 : cmp dword ptr [rcx], eax ; add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000198f65 : cmp dword ptr [rdx], eax ; add byte ptr [rcx*4 + 0x3974fffa], dh ; add al, byte ptr [rax] ; mov ah, 0x8d ; cli ; jmp rsp
0x0000000000003846 : cmp dword ptr [rsi], ecx ; pop rsp ; ret
0x00000000000f8d4b : cmp dword ptr [rsp + 0x10], 2 ; cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x00000000001462d1 : cmp dword ptr [rsp + 0x18], 0 ; mov rax, qword ptr [rsp + 0x38] ; jne 0x1462c8 ; add rsp, 0x48 ; ret
0x00000000000fdbf2 : cmp dword ptr [rsp - 0x2c], ecx ; je 0xfdc36 ; mov dword ptr fs:[r8], r12d ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8ca3 : cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x00000000000984c0 : cmp dword ptr [rsp], 0 ; je 0x984db ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001967a5 : cmp eax, 0x58640001 ; call rsp
0x00000000000bbbc7 : cmp eax, 0x71 ; jg 0xbbc00 ; lea rax, qword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x000000000008fb20 : cmp eax, 0x89480033 ; add eax, 0x333d5e ; add rsp, 8 ; ret
0x0000000000102afa : cmp eax, 0x90c48148 ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; ret
0x0000000000089c1f : cmp eax, 0xff ; cmove rax, rdx ; add rsp, 8 ; ret
0x000000000010a235 : cmp eax, 0xff ; je 0x10a24b ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x000000000014554a : cmp eax, 0xff ; je 0x14552f ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000014558e : cmp eax, 0xff ; je 0x1455a9 ; add rsp, 8 ; ret
0x0000000000020565 : cmp eax, 0xff ; je 0x20663 ; add rsp, 0x98 ; ret
0x000000000006f040 : cmp eax, 0xff ; je 0x6f05e ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000074307 : cmp eax, 0xff ; je 0x7431d ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074363 : cmp eax, 0xff ; je 0x74379 ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007e452 : cmp eax, 0xff ; je 0x7e468 ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000121a65 : cmp eax, 0xff ; jne 0x121a85 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007e4ee : cmp eax, 0xff ; jne 0x7e4ba ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000117540 : cmp eax, 0xfffff000 ; ja 0x117521 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012b11a : cmp eax, 0xfffff000 ; ja 0x12b13f ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8d18 : cmp eax, 0xfffff000 ; ja 0xf8d6c ; add rsp, 0x60 ; pop rbx ; ret
0x00000000000fcdfe : cmp eax, 0xfffff000 ; ja 0xfce87 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001360ad : cmp eax, 1 ; jle 0x1360cd ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013619f : cmp eax, 1 ; jle 0x1361da ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013ec55 : cmp eax, 1 ; sete al ; add rsp, 0x18 ; movzx eax, al ; ret
0x000000000013edac : cmp eax, 1 ; sete al ; add rsp, 8 ; movzx eax, al ; ret
0x000000000013dbeb : cmp eax, 2 ; je 0x13dc6f ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013d1b3 : cmp eax, 2 ; sete al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x0000000000130d41 : cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e125 : cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000109079 : cmp eax, 8 ; setne al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000010904f : cmp eax, 8 ; setne al ; add rsp, 8 ; movzx eax, al ; neg eax ; ret
0x0000000000196765 : cmp eax, dword ptr [rcx] ; add ah, al ; dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x000000000019676d : cmp eax, dword ptr [rcx] ; add ah, dl ; call rsp
0x000000000007da44 : cmp eax, eax ; jbe 0x7da65 ; mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007d378 : cmp eax, ecx ; jbe 0x7d39d ; mov rax, qword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000013abb1 : cmp eax, edx ; je 0x13abc8 ; add rsp, 8 ; ret
0x000000000013abe1 : cmp eax, edx ; je 0x13abfc ; sub rax, -0x80 ; add rsp, 8 ; ret
0x000000000013ac11 : cmp eax, edx ; je 0x13ac2e ; add rax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac41 : cmp eax, edx ; je 0x13ac5e ; add rax, 0xa8 ; add rsp, 8 ; ret
0x000000000007625d : cmp ebp, 0xa ; je 0x76227 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000006efef : cmp ebp, eax ; jle 0x6f003 ; or dword ptr [rbx], 0x20 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000194ee9 : cmp ebp, ebx ; call rsp
0x00000000000d808f : cmp ebx, 0xa ; je 0xd80fc ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b016 : cmp ebx, 0xff ; jne 0x3b017 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013addc : cmp ebx, dword ptr [rax] ; je 0x13adfe ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000098455 : cmp ebx, eax ; cmova rbp, rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000f8e6f : cmp ebx, eax ; jne 0xf8efb ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x0000000000173397 : cmp ebx, ebp ; jb 0x17339a ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001986a9 : cmp ecx, edi ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000198011 : cmp edi, eax ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x00000000000f811a : cmp edx, 0xff ; mov eax, edx ; je 0xf8135 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d40a : cmp edx, 1 ; je 0x13d473 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d4ca : cmp edx, 1 ; je 0x13d533 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d58a : cmp edx, 1 ; je 0x13d5f3 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d64a : cmp edx, 1 ; je 0x13d6b3 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000107237 : cmp edx, 1 ; jne 0x10723b ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000001072a7 : cmp edx, 1 ; jne 0x1072ab ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000029b15 : cmp edx, ecx ; jb 0x29b37 ; add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000116fbe : cmp esi, 1 ; sbb eax, eax ; add rsp, 0x10 ; pop rbx ; and eax, 0xc ; pop rbp ; pop r12 ; ret
0x00000000000c7f21 : cmp esi, edi ; jge 0xc7f08 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000798be : cmp qword ptr [rax + 0x30], 0 ; je 0x798d5 ; add rsp, 0x38 ; ret
0x00000000000ba72c : cmp qword ptr [rax], 0 ; je 0xba746 ; add dword ptr [rax + 0x10], 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013d9d6 : cmp r8, 2 ; sete al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000019676c : cmp r8, qword ptr [rcx] ; add ah, dl ; call rsp
0x000000000013d1b2 : cmp r8d, 2 ; sete al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000011753f : cmp rax, -0x1000 ; ja 0x117522 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012b119 : cmp rax, -0x1000 ; ja 0x12b140 ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8d17 : cmp rax, -0x1000 ; ja 0xf8d6d ; add rsp, 0x60 ; pop rbx ; ret
0x00000000000fcdfd : cmp rax, -0x1000 ; ja 0xfce88 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000089c1e : cmp rax, 0xff ; cmove rax, rdx ; add rsp, 8 ; ret
0x000000000013ec54 : cmp rax, 1 ; sete al ; add rsp, 0x18 ; movzx eax, al ; ret
0x000000000013edab : cmp rax, 1 ; sete al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000109078 : cmp rax, 8 ; setne al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000010904e : cmp rax, 8 ; setne al ; add rsp, 8 ; movzx eax, al ; neg eax ; ret
0x000000000007da43 : cmp rax, r8 ; jbe 0x7da66 ; mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007d377 : cmp rax, rcx ; jbe 0x7d39e ; mov rax, qword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000013abb0 : cmp rax, rdx ; je 0x13abc9 ; add rsp, 8 ; ret
0x000000000013abe0 : cmp rax, rdx ; je 0x13abfd ; sub rax, -0x80 ; add rsp, 8 ; ret
0x000000000013ac10 : cmp rax, rdx ; je 0x13ac2f ; add rax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac40 : cmp rax, rdx ; je 0x13ac5f ; add rax, 0xa8 ; add rsp, 8 ; ret
0x000000000006efee : cmp rbp, rax ; jle 0x6f004 ; or dword ptr [rbx], 0x20 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013addb : cmp rbx, qword ptr [rax] ; je 0x13adff ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000098454 : cmp rbx, rax ; cmova rbp, rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000173396 : cmp rbx, rbp ; jb 0x17339b ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000107236 : cmp rdx, 1 ; jne 0x10723c ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000001072a6 : cmp rdx, 1 ; jne 0x1072ac ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000029b14 : cmp rdx, rcx ; jb 0x29b38 ; add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000195205 : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; push rsp ; jg 0x1951fe ; call rsp
0x0000000000132b1e : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132b3f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bb9 : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132bdf ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000009882f : cwde ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f8acb : cwde ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; ret
0x00000000000f89ac : cwde ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013580d : cwde ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003b2f4 : cwde ; add dword ptr [rax], eax ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x0000000000196381 : cwde ; int1 ; call rsp
0x000000000008fc09 : cwde ; mov byte ptr [rbp + rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000013126e : cwde ; mov qword ptr [rbx], rax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000003b449 : cwde ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f7f69 : dec dword ptr [rax + 0xf] ; add al, 0x24 ; add rsp, 0x18 ; ret
0x0000000000187e13 : dec dword ptr [rax - 0x2b000a22] ; iretd ; cmc ; call rsp
0x000000000017247b : dec dword ptr [rax - 0x39] ; add eax, 0x250779 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000172026 : dec dword ptr [rax - 0x39] ; add eax, 0x2508ae ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000172818 : dec dword ptr [rax - 0x39] ; add eax, 0x25292c ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000195a2b : dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x00000000000c8010 : dec dword ptr [rax - 0x73] ; add al, 0xd0 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000032504 : dec dword ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000735d7 : dec dword ptr [rax - 0x73] ; push rsi ; add al, 0x48 ; mov dword ptr [rax], edx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008b88f : dec dword ptr [rax - 0x75] ; adc eax, 0x3356c1 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000084268 : dec dword ptr [rax - 0x75] ; add eax, 0x33cb58 ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x000000000010422c : dec dword ptr [rax - 0x75] ; and al, 8 ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000393f6 : dec dword ptr [rax - 0x75] ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000122e5d : dec dword ptr [rax - 0x77] ; add eax, 0x29f9db ; add rsp, 8 ; ret
0x00000000000ffa1d : dec dword ptr [rax - 0x77] ; add eax, 0x2c2d5b ; add rsp, 8 ; ret
0x0000000000101068 : dec dword ptr [rax - 0x77] ; add eax, 0x2c3080 ; add rsp, 8 ; ret
0x00000000000843b1 : dec dword ptr [rax - 0x77] ; and al, 0x18 ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000001077fa : dec dword ptr [rax - 0x77] ; cmp byte ptr [r8 + 3], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000172241 : dec dword ptr [rax - 0x7b] ; in eax, dx ; jne 0x172238 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000017237c : dec dword ptr [rax - 0x7b] ; in eax, dx ; jne 0x172364 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f0c57 : dec dword ptr [rax - 0x7b] ; in eax, dx ; jne 0xf0c4d ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f0c56 : dec dword ptr [rax - 0x7b] ; in eax, dx ; jne 0xf0c4e ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010a7cf : dec dword ptr [rax - 0x7b] ; sal byte ptr [rsp + rdx + 0x48], 0x89 ; ret
0x000000000019676b : dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x000000000006e521 : dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x00000000001963ab : dec dword ptr [rcx + 1] ; add byte ptr [rbx*4 + 0x21ccfff1], dh ; add dword ptr [rax], eax ; popfq ; int1 ; jmp rsp
0x0000000000198bf3 : dec dword ptr [rcx + 2] ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000198723 : dec dword ptr [rcx + rdi*8 + 1] ; add byte ptr [rdx + rbp*2 - 7], ah ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x00000000000f811c : dec dword ptr [rcx - 0x74fb8b30] ; and al, 0xc ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001966d3 : dec dword ptr [rdi + rsi + 0x41a40001] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000187e5f : dec dword ptr [rdi - 0x2b000a32] ; iretd ; cmc ; call rsp
0x000000000006c283 : dec dword ptr [rdi] ; and al, 0xc ; add rsp, 0x18 ; ret
0x000000000007d478 : dec dword ptr [rdi] ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195e3b : dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000196ca3 : dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196c9b : dec dword ptr [rsp + 1] ; add byte ptr [rbp - 0xb], dh ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x00000000001969fb : dec dword ptr [rsp + rcx*2 + 1] ; add byte ptr [rdx + rbp*4], dl ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000198093 : dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000196b03 : dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x000000000019970b : dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x000000000019658b : dec esp ; add dword ptr cs:[rax], eax ; je 0x19651e ; jmp rsp
0x000000000019658a : dec esp ; add dword ptr cs:[rax], eax ; je 0x19651f ; jmp rsp
0x0000000000196453 : dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000195f7b : dec esp ; add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000196983 : dec esp ; add qword ptr [rax], rax ; add al, 0xa0 ; jmp rsp
0x00000000001963b3 : dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000195e73 : dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000196f1b : dec esp ; jb 0x196f28 ; add byte ptr [rsi + rdi - 0xa], dh ; jmp rsp
0x0000000000194b1b : dec esp ; jle 0x194b27 ; add byte ptr [rax + rbp - 0x16], dl ; jmp rsp
0x0000000000198013 : dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x0000000000197c3b : dec esp ; mov al, 1 ; add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x0000000000194cdb : dec esp ; mov byte ptr [rax], al ; add byte ptr [rsi + rbp*2 - 0x16], ah ; jmp rsp
0x0000000000198483 : dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x0000000000198153 : dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000197e3b : dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000195e13 : dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x000000000019734b : dec esp ; xchg byte ptr [rcx], al ; add byte ptr [rdx + rbp*4 - 0xa], al ; jmp rsp
0x0000000000197393 : dec esp ; xchg dword ptr [rcx], eax ; add byte ptr [rsi + rbp*4 - 0xa], al ; jmp rsp
0x000000000002a451 : div byte ptr [rsp + rcx - 0x7d] ; inc byte ptr [rbx] ; je 0x2a468 ; ret
0x0000000000132e44 : enter -0x3a0, -1 ; add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013ed22 : enter -0x3f77, 0x48 ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x000000000013126c : enter -0x67b8, 0x48 ; mov dword ptr [rbx], eax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000003b447 : enter -0x67b8, 0x48 ; mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000209fb : enter -0x72b8, 0x65 ; fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000019565d : enter 0, -0x3c ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x000000000010794d : enter 0, 0 ; add rsp, 8 ; mov eax, 9 ; pop rbx ; pop rbp ; ret
0x000000000012f636 : enter 0, 0 ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000012f62f : enter 0, 0 ; push qword ptr [rsp + 0xc8] ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000007d379 : enter 0x1476, 0x48 ; mov eax, dword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000007de65 : enter 0x1876, 0x48 ; mov eax, dword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000001311ff : enter 0x389, -0x48 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000007da42 : enter 0x394c, -0x40 ; jbe 0x7da67 ; mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x0000000000029ed3 : enter 0x5d5b, 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000135314 : enter 0x5d5b, 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000020742 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb61 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; add rsp, 8 ; jmp rax
0x0000000000047bbe : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x00000000000738a0 : enter 0x7676, 0x48 ; mov eax, dword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x0000000000197fe5 : enter 1, -0x4c ; xor edi, eax ; jmp rsp
0x0000000000197fdd : enter 1, 0x24 ; xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x00000000001a7255 : fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x00000000000879f7 : fadd dword ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f8d4a : fadd dword ptr [rbx + 0x210247c] ; cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x0000000000035434 : fadd st(0) ; add rsp, 8 ; ret
0x0000000000033043 : fadd st(6) ; add dword ptr [rax], eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f84e4 : fcom dword ptr [rdx] ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x7d], 0xec ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000adf4c : fcomp dword ptr [rbp + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000209ff : fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000001012e8 : fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop rbp ; ret
0x00000000000209fe : fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000187e31 : fcompi st(5) ; call rsp
0x000000000018a4a5 : fdivp st(2) ; jmp rsp
0x00000000000fdd68 : fdivr dword ptr [rbx - 1] ; mov dword ptr fs:[rdx], eax ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000007a724 : fdivr dword ptr [rsp + rsi] ; add byte ptr [rax + 0xf], cl ; ret 0x8948
0x0000000000077870 : fdivr st(4), st(0) ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000187e05 : fdivr st(5), st(0) ; call rsp
0x0000000000187e15 : fdivrp st(5) ; call rsp
0x0000000000187e21 : fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x00000000000c8e5d : fiadd word ptr [rax + rax] ; add rsp, 0x80 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000002fa2 : ficomp dword ptr [rbx + 0xb886fae] ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000002fa1 : ficomp dword ptr cs:[rbx + 0xb886fae] ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000100b42 : fidiv dword ptr [rsp + rbp] ; add byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001219ed : fild dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008a83b : fild dword ptr [rbp - 0x3c6bf040] ; neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000035364 : fild dword ptr [rsp - 4] ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x00000000000bbcde : fild qword ptr [rsp - 0x18] ; fsubp st(1) ; fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x00000000000c8dcf : fild word ptr [rax + rax] ; add rsp, 0x80 ; pop rbx ; ret
0x000000000019837d : fild word ptr [rcx] ; add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x00000000000c519e : fimul word ptr [rax - 0x77] ; out dx, eax ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913be
0x000000000011f8f4 : fistp dword ptr [rbx + 0x31] ; rol dh, 2 ; add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; ret
0x0000000000103346 : fisttp dword ptr [rcx + 0x5d0102] ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010347d : fisttp word ptr [rip + 0x415d002c] ; pop rsp ; ret
0x00000000000f813e : fisub dword ptr [rcx + rcx*4 + 0x10] ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000035a18 : fisub dword ptr [rcx + rcx*4 + 0x10] ; mov eax, 0xffffffff ; add rsp, 0xd0 ; ret
0x000000000019592d : fld dword ptr [rax] ; add ah, dl ; jle 0x195927 ; call rsp
0x0000000000195925 : fld dword ptr [rax] ; add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000049722 : fld qword ptr [rax] ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000035368 : fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x0000000000035480 : fld xword ptr [rsp + 8] ; fxam ; fnstsw ax ; fstp st(0) ; and eax, 0x200 ; ret
0x0000000000035229 : fld xword ptr [rsp + 8] ; ret
0x000000000003528d : fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x0000000000035329 : fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035307 : fld xword ptr [rsp - 0x18] ; ret
0x0000000000080bfb : fldcw word ptr [rbx] ; xor al, 0 ; jae 0x80bba ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000354a9 : fldcw word ptr [rsp - 2] ; ret
0x000000000004ae1d : fmul dword ptr [rax - 0x77] ; fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000012be10 : fmul dword ptr [rax - 0x77] ; rcr byte ptr [rbx + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000bd05c : fmul dword ptr [rcx + rcx*4 + 0x25] ; hlt ; imul esi, dword ptr [rax], 0x415d5b00 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000004ae1c : fmul dword ptr gs:[rax - 0x77] ; fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000012be0f : fmul dword ptr gs:[rax - 0x77] ; rcr byte ptr [rbx + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000cdb50 : fmul qword ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000424eb : fmulp st(1) ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003542f : fnstcw word ptr [rdx + 0xe] ; jne 0x3544b ; fadd st(0) ; add rsp, 8 ; ret
0x00000000000567f3 : fstp dword ptr [rax] ; add al, byte ptr [rax] ; add rsp, 0xd8 ; ret
0x00000000000bbce4 : fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x000000000003542e : fstp st(1) ; jp 0x3544c ; jne 0x3544c ; fadd st(0) ; add rsp, 8 ; ret
0x00000000000cbb8e : fstp xword ptr [rax] ; cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000011751c : fsub dword ptr [rcx + rcx*4 + 2] ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ec1c1 : fsub dword ptr [rsp + rax*2 - 0x77] ; add byte ptr [rax - 1], bh ; ret
0x00000000000bbce2 : fsubp st(1) ; fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x0000000000195fd1 : fsubr st(7) ; call rsp
0x000000000003542c : fucomi st(1) ; fstp st(1) ; jp 0x3544e ; jne 0x3544e ; fadd st(0) ; add rsp, 8 ; ret
0x00000000000f8497 : fucompi st(0) ; and edx, dword ptr [rbx] ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x7d], 0xec ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000006e51c : fucompi st(0) ; xchg eax, esi ; adc al, 0xfb ; dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x000000000003542a : fxch st(1) ; fucomi st(1) ; fstp st(1) ; jp 0x35450 ; jne 0x35450 ; fadd st(0) ; add rsp, 8 ; ret
0x000000000012f427 : hlt ; add byte ptr [rax], al ; test eax, eax ; jne 0x12f44f ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f426 : hlt ; add byte ptr [rax], al ; test eax, eax ; jne 0x12f450 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000198685 : hlt ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x000000000019867d : hlt ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000010723b : hlt ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000196a90 : hlt ; and al, 0xf4 ; call rsp
0x0000000000196a92 : hlt ; call rsp
0x0000000000198080 : hlt ; clc ; jmp rsp
0x0000000000195520 : hlt ; cld ; in eax, dx ; jmp rsp
0x0000000000196b02 : hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x00000000000bd060 : hlt ; imul esi, dword ptr [rax], 0x415d5b00 ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000196b82 : hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000196b52 : hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000187276 : hlt ; jmp rsp
0x0000000000195e70 : hlt ; mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000077871 : hlt ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000195a28 : hlt ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x00000000001988d8 : hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x00000000000ba3ee : idiv bh ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x0000000000106655 : idiv bh ; add rsp, 0x408 ; ret
0x0000000000106318 : idiv bh ; add rsp, 0xd8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010645b : idiv bh ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x000000000012679a : idiv bh ; add rsp, 8 ; lea eax, dword ptr [rbx + rbp] ; pop rbx ; pop rbp ; ret
0x000000000010685c : idiv bh ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000ffc0c : idiv bh ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000197112 : idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197121 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x000000000012470b : idiv edi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001181a0 : idiv edi ; add rsp, 8 ; add rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ea207 : idiv edi ; inc dword ptr [rbp - 0x3f6bf040] ; add rsp, 8 ; movzx eax, al ; ret
0x000000000012aa1e : idiv edi ; inc dword ptr [rbx + 0x29b03c0d] ; add byte ptr [rdx], al ; add rsp, 8 ; ret
0x00000000000ff43d : idiv edi ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000197ac2 : idiv edi ; mov esp, 0x740001aa ; movsxd rsi, edi ; call rsp
0x00000000000371da : imul al ; push rax ; add byte ptr [rax], r8b ; add rsp, 8 ; ret
0x000000000003b2f2 : imul eax ; cwde ; add dword ptr [rax], eax ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x000000000003b2a2 : imul eax ; js 0x3b2b6 ; add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000003b252 : imul eax ; sub byte ptr [rcx], al ; add byte ptr [rax], al ; movsd xmm0, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000019466d : imul eax, dword ptr [rax], 0xe9938400 ; jmp rsp
0x0000000000126942 : imul eax, dword ptr [rcx], -0x3a ; add al, byte ptr [r8] ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b321 : imul eax, dword ptr [rcx], 0 ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x0000000000194435 : imul eax, dword ptr [rcx], 0xe8b95400 ; call rsp
0x0000000000143971 : imul ecx, esp, 0x27 ; add byte ptr [rax - 0x77], cl ; adc eax, 0x27ea74 ; add rsp, 8 ; ret
0x00000000000bd061 : imul esi, dword ptr [rax], 0x415d5b00 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000008fb3c : imul esi, dword ptr [rbx], 0 ; test eax, eax ; jne 0x8fb5b ; add rsp, 8 ; ret
0x0000000000198af0 : in al, -0x14 ; stc ; jmp rsp
0x0000000000198480 : in al, -0x32 ; clc ; dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x00000000001963f0 : in al, -0x33 ; int1 ; call rsp
0x0000000000199690 : in al, -0x38 ; sti ; call rsp
0x0000000000195e18 : in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195550 : in al, -1 ; in eax, dx ; jmp rsp
0x0000000000196450 : in al, 0x22 ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000195730 : in al, 0x42 ; out dx, al ; call rsp
0x0000000000198098 : in al, 0x47 ; clc ; call rsp
0x0000000000195850 : in al, 0x57 ; out dx, al ; call rsp
0x0000000000195d40 : in al, 0x67 ; out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x0000000000198260 : in al, 0x6a ; clc ; jmp rsp
0x0000000000195d80 : in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x00000000001993a0 : in al, 0xe ; sti ; call rsp
0x000000000010d75e : in al, 0xf ; xchg eax, ebp ; sal bh, 0xd8 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019841d : in al, 1 ; add byte ptr [rbp + rsi*4 - 0x1b6b0008], al ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x00000000000bc64c : in al, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x000000000019515a : in al, dx ; call rsp
0x000000000003528c : in al, dx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000004a69d : in al, dx ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000195112 : in al, dx ; jmp rsp
0x0000000000195152 : in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x000000000012d7cb : in al, dx ; mov rax, rbp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012fe8a : in al, dx ; or al, ch ; call rsp
0x00000000000ffc07 : in al, dx ; or al, ch ; loop 0xffc03 ; idiv bh ; mov eax, 1 ; add rsp, 8 ; ret
0x00000000000f84a1 : in al, dx ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000198af1 : in al, dx ; stc ; jmp rsp
0x00000000001148c9 : in eax, 0 ; add al, byte ptr [rax] ; add byte ptr [rbp + 0x2f], dh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000002056a : in eax, 0 ; add byte ptr [rax], al ; add rsp, 0x98 ; ret
0x0000000000049dfa : in eax, 0 ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000004acbf : in eax, dx ; add al, 0 ; lea rax, qword ptr [rax + rbx] ; add rsp, 0x20 ; pop rbx ; ret
0x000000000003b01a : in eax, dx ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013bca8 : in eax, dx ; add rsp, 0x20 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bbf1 : in eax, dx ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000019520a : in eax, dx ; call rsp
0x00000000000f0c55 : in eax, dx ; dec dword ptr [rax - 0x7b] ; in eax, dx ; jne 0xf0c4f ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000044f9d : in eax, dx ; je 0x44fb1 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004501d : in eax, dx ; je 0x45031 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000450cb : in eax, dx ; je 0x450df ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000006bbe2 : in eax, dx ; je 0x6bc0c ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000b650e : in eax, dx ; je 0xb6522 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b65bc : in eax, dx ; je 0xb65d0 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b665e : in eax, dx ; je 0xb6672 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000195322 : in eax, dx ; jmp rsp
0x000000000013da0c : in eax, dx ; jne 0x13da6e ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000172244 : in eax, dx ; jne 0x172235 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000017237f : in eax, dx ; jne 0x172361 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007cc97 : in eax, dx ; jne 0x7cd6e ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007cf48 : in eax, dx ; jne 0x7cffe ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000f0c5a : in eax, dx ; jne 0xf0c4a ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019531a : in eax, dx ; push qword ptr [rdi + rbp*4 - 0x4afc0000] ; in eax, dx ; jmp rsp
0x000000000019554a : in eax, dx ; push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x0000000000139c76 : in eax, dx ; setne al ; neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000195e3d : inc byte ptr [rax] ; add ah, dl ; xchg eax, esp ; out dx, eax ; call rsp
0x0000000000195e35 : inc byte ptr [rax] ; add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x000000000012e896 : inc byte ptr [rcx + 0x54] ; push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0e
0x0000000000116fbf : inc byte ptr [rcx] ; sbb eax, eax ; add rsp, 0x10 ; pop rbx ; and eax, 0xc ; pop rbp ; pop r12 ; ret
0x00000000000e9017 : inc dword ptr [rax + 0x3108384b] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000019947b : inc dword ptr [rax + rbx*2 + 0x1f240002] ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x000000000019870b : inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000195d43 : inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x0000000000198703 : inc dword ptr [rax + rdi*8 + 1] ; add byte ptr [rsi + rbx*2], al ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000199323 : inc dword ptr [rax + rdx*2 - 0x72bfffe] ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000195e6d : inc dword ptr [rax] ; add ah, dh ; mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000195e75 : inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x00000000000ea37b : inc dword ptr [rax] ; add rsp, 0x68 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000187e03 : inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x000000000010a4ef : inc dword ptr [rax] ; or eax, edx ; or eax, ebx ; add rsp, 0x90 ; pop rbx ; ret
0x0000000000114738 : inc dword ptr [rbp + 0x49d674c0] ; mov eax, dword ptr [rsp + 0x38] ; jmp 0x114712
0x0000000000194067 : inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x00000000001986ab : inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001358ec : inc dword ptr [rbp - 0x3f6af040] ; add rsp, 8 ; movzx eax, al ; add eax, 1 ; ret
0x0000000000132aa3 : inc dword ptr [rbp - 0x3f6af040] ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000001308c6 : inc dword ptr [rbp - 0x3f6af040] ; movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000456bf : inc dword ptr [rbp - 0x3f6bf040] ; add rsp, 8 ; movzx eax, al ; ret
0x000000000013619e : inc dword ptr [rbx + 0x277e01f8] ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012aa20 : inc dword ptr [rbx + 0x29b03c0d] ; add byte ptr [rdx], al ; add rsp, 8 ; ret
0x000000000010a234 : inc dword ptr [rbx + 0x474fff8] ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x000000000014558d : inc dword ptr [rbx + 0xd74fff8] ; add rsp, 8 ; ret
0x0000000000121a64 : inc dword ptr [rbx + 0xe75fff8] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001360ac : inc dword ptr [rbx + 0xe7e01f8] ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000019939b : inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x000000000003b015 : inc dword ptr [rbx - 0x128a0005] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000187e4f : inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000145549 : inc dword ptr [rbx - 0x2e8b0008] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001963eb : inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000196b83 : inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x000000000019592b : inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x000000000019818b : inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x000000000019646b : inc dword ptr [rdi + 0x5e040001] ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000198bbb : inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x000000000019837b : inc dword ptr [rdi + rbx*8 + 1] ; add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000195543 : inc dword ptr [rdi + rdi*4 - 0x9c0000] ; in eax, dx ; push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x0000000000196b53 : inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b4b : inc dword ptr [rdi + rdx*2] ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x00000000001988d3 : inc dword ptr [rdx + rcx - 0x570bfffe] ; stc ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000195d7b : inc dword ptr [rdx + rdi*8 + 0x70e40000] ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000019688b : inc dword ptr [rsi + rax*2 - 0x739bffff] ; ljmp ptr [rsi + rax*2 - 0x72fbffff] ; jmp rsp
0x0000000000197f83 : inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000198943 : inc dword ptr [rsi + rcx - 0x455bfffe] ; stc ; lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x0000000000199803 : inc dword ptr [rsp + rbp + 1] ; add byte ptr [rcx + rcx*8 - 3], dh ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x0000000000196afb : inc dword ptr [rsp + rdx*2 + 1] ; add byte ptr [rdx + rcx*2], dl ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198ed3 : inc dword ptr [rsp + rsi + 0x76c40002] ; cli ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000008d64a : inc eax ; add rsp, 0x100 ; sub rax, rdx ; ret
0x000000000008faba : inc eax ; add rsp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x000000000008d647 : inc eax ; inc rax ; add rsp, 0x100 ; sub rax, rdx ; ret
0x000000000007d44b : inc ebx ; nop dword ptr [rax] ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x0000000000187e1f : inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000195ed3 : inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x000000000008d649 : inc rax ; add rsp, 0x100 ; sub rax, rdx ; ret
0x000000000008d646 : inc rax ; inc rax ; add rsp, 0x100 ; sub rax, rdx ; ret
0x00000000000bbcdf : insb byte ptr [rdi], dx ; and al, 0xe8 ; fsubp st(1) ; fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x00000000001963fc : insb byte ptr [rdi], dx ; and al, 1 ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x00000000001963e4 : insb byte ptr [rdi], dx ; and eax, dword ptr [rcx] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000193c6d : insb byte ptr [rdi], dx ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x00000000001986a4 : insb byte ptr [rdi], dx ; cmc ; add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x000000000019565c : insb byte ptr [rdi], dx ; enter 0, -0x3c ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000197fdc : insb byte ptr [rdi], dx ; enter 1, 0x24 ; xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x000000000019841c : insb byte ptr [rdi], dx ; in al, 1 ; add byte ptr [rbp + rsi*4 - 0x1b6b0008], al ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x0000000000198d34 : insb byte ptr [rdi], dx ; sub dword ptr [rdx], eax ; add byte ptr [rsi + rcx*2 + 0x29bcfffa], ah ; add al, byte ptr [rax] ; push rsp ; cli ; jmp rsp
0x000000000013dd93 : insb byte ptr [rdi], dx ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000991cf : insd dword ptr [rdi], dx ; add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000193c69 : insd dword ptr [rdi], dx ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000193c65 : insd dword ptr [rdi], dx ; cld ; ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000198e59 : insd dword ptr [rdi], dx ; cli ; call rsp
0x00000000001985fd : int1 ; add dword ptr [rax], eax ; push rsp ; and ecx, edi ; call rsp
0x0000000000185dfe : int1 ; call rsp
0x000000000007745b : int1 ; clc ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x00000000000ffa1c : int1 ; dec dword ptr [rax - 0x77] ; add eax, 0x2c2d5b ; add rsp, 8 ; ret
0x00000000001963b2 : int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x000000000008fb3b : int1 ; imul esi, dword ptr [rbx], 0 ; test eax, eax ; jne 0x8fb5c ; add rsp, 8 ; ret
0x00000000001963ea : int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000185e02 : int1 ; jmp rsp
0x00000000000768ce : int1 ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8a : int1 ; lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000fb183 : int1 ; pop rsp ; sub al, 0 ; mov dword ptr fs:[rax], 0x16 ; mov eax, 0xffffffff ; ret
0x0000000000196262 : int1 ; push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x0000000000198489 : iretd ; clc ; jmp rsp
0x0000000000187e09 : iretd ; cmc ; call rsp
0x0000000000187e01 : iretd ; cmc ; inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x0000000000187e1d : iretd ; cmc ; inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000187e45 : iretd ; cmc ; push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x000000000007518e : iretd ; sub r8, rsi ; mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913be
0x0000000000117545 : ja 0x11751c ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001196b3 : ja 0x119710 ; test rbx, rbx ; jne 0x1196d8 ; add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000011aea1 : ja 0x11aed2 ; mov r15, qword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x000000000012b11f : ja 0x12b13a ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001329c5 : ja 0x132986 ; add byte ptr [rax], al ; test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000194da1 : ja 0x194d8f ; call rsp
0x0000000000195929 : ja 0x195923 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000195928 : ja 0x195924 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000198ee1 : ja 0x198edf ; call rsp
0x00000000000355e1 : ja 0x35612 ; mov r15, qword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x0000000000036f39 : ja 0x36f5f ; add rsp, 0x88 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079655 : ja 0x79673 ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x00000000000d7104 : ja 0xd7146 ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f8760 : ja 0xf87fe ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8d1d : ja 0xf8d67 ; add rsp, 0x60 ; pop rbx ; ret
0x00000000000fce03 : ja 0xfce82 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000febf7 : ja 0xfec7e ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001004ef : jae 0x1004bc ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000102f59 : jae 0x102f75 ; sub al, 0 ; add rsp, 8 ; ret
0x0000000000050a98 : jae 0x50ac0 ; mov qword ptr [rcx + rdx*8], rax ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000000737de : jae 0x73745 ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d473 : jae 0x7d401 ; movzx eax, byte ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d797 : jae 0x7d7dd ; cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000080bff : jae 0x80bb6 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000098568 : jae 0x98590 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000130d3f : jb 0x130d80 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d27f : jb 0x13d2c8 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d2ef : jb 0x13d338 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d39f : jb 0x13d3e8 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d6ff : jb 0x13d748 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d76f : jb 0x13d7b8 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d8df : jb 0x13d930 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013d94f : jb 0x13d998 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e49f : jb 0x13e4e8 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e50f : jb 0x13e558 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e57f : jb 0x13e5c8 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e5ef : jb 0x13e638 ; cmp eax, 2 ; sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000173399 : jb 0x173398 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000196f1d : jb 0x196f26 ; add byte ptr [rsi + rdi - 0xa], dh ; jmp rsp
0x0000000000029b17 : jb 0x29b35 ; add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085a2c : jb 0x85a17 ; mov byte ptr [rsi + rbx], r9b ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x0000000000131e98 : jbe 0x131eb4 ; mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x0000000000139f3a : jbe 0x139f5f ; xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000193b31 : jbe 0x193b31 ; call rsp
0x0000000000193b30 : jbe 0x193b32 ; call rsp
0x0000000000196b51 : jbe 0x196b51 ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198ed9 : jbe 0x198edf ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000003b3dd : jbe 0x3b401 ; add dl, dh ; movups xmmword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000568d0 : jbe 0x568f8 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000070baa : jbe 0x70c17 ; mov rax, qword ptr [rbp + 0x48] ; add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x00000000000738a2 : jbe 0x738fa ; mov eax, dword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x00000000000738a1 : jbe 0x73928 ; mov rax, qword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x0000000000077ad6 : jbe 0x77ad8 ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x000000000007d37a : jbe 0x7d39b ; mov rax, qword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000007da46 : jbe 0x7da63 ; mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007de66 : jbe 0x7de8f ; mov rax, qword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000000a0e4c : jbe 0xa0e2a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010a066 : je 0x10a090 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000010a238 : je 0x10a248 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000114adc : je 0x114b86 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001176cb : je 0x1176f4 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000001192e9 : je 0x119310 ; or ebp, edx ; mov dword ptr [rbx], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011946c : je 0x11947e ; add rsp, 8 ; ret
0x000000000011a429 : je 0x11a450 ; or ebp, edx ; mov dword ptr [rbx], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011eb65 : je 0x11eb90 ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000011f0b5 : je 0x11f0e0 ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001219eb : je 0x121ad8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001273f7 : je 0x127420 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000012adb0 : je 0x12adf0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012b5f4 : je 0x12b668 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000012d737 : je 0x12d72a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012df73 : je 0x12df7f ; mov rdi, rsp ; call rax
0x000000000012dfab : je 0x12dfce ; add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297d88] ; pop rbx ; ret
0x000000000012e05e : je 0x12e06a ; mov rdi, rsp ; call rax
0x0000000000132ad9 : je 0x132afd ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132b99 : je 0x132bbd ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000132c89 : je 0x132cad ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000134df4 : je 0x134e25 ; cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500e : je 0x13503f ; push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000137ae3 : je 0x137b14 ; cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000137cd6 : je 0x137d07 ; push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000013846c : je 0x13849d ; xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000013abb3 : je 0x13abc6 ; add rsp, 8 ; ret
0x000000000013abe3 : je 0x13abfa ; sub rax, -0x80 ; add rsp, 8 ; ret
0x000000000013ac13 : je 0x13ac2c ; add rax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac43 : je 0x13ac5c ; add rax, 0xa8 ; add rsp, 8 ; ret
0x000000000013adde : je 0x13adfc ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013cfee : je 0x13d058 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013d40d : je 0x13d470 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d4cd : je 0x13d530 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d58d : je 0x13d5f0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d64d : je 0x13d6b0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013daa7 : je 0x13db30 ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013dbee : je 0x13dc6c ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013e879 : je 0x13e8b2 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000014554d : je 0x14552c ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000145591 : je 0x1455a6 ; add rsp, 8 ; ret
0x00000000001462b6 : je 0x1462df ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x1462f7 ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000001463f1 : je 0x14640d ; cmp byte ptr [rsp + 0x1f], 0 ; jne 0x14641d ; add rsp, 0x38 ; ret
0x0000000000146a44 : je 0x146a6d ; mov rax, qword ptr [rax] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x0000000000195150 : je 0x1951dc ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195a24 : je 0x195a15 ; add byte ptr [rax], al ; hlt ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x0000000000195c68 : je 0x195c9e ; out dx, eax ; call rsp
0x0000000000195f80 : je 0x195f59 ; out dx, eax ; jmp rsp
0x0000000000196590 : je 0x196519 ; jmp rsp
0x0000000000196714 : je 0x19675e ; add dword ptr [rax], eax ; add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000196ca0 : je 0x196d12 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000197ee0 : je 0x197f0d ; clc ; push rsp ; ret
0x0000000000197f80 : je 0x197fb7 ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000198564 : je 0x198563 ; add dword ptr [rax], eax ; add edi, ecx ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x0000000000198684 : je 0x198681 ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x00000000001986b0 : je 0x1986fa ; stc ; call rsp
0x0000000000198f98 : je 0x198f2c ; cli ; call rsp
0x0000000000198f6c : je 0x198fae ; add al, byte ptr [rax] ; mov ah, 0x8d ; cli ; jmp rsp
0x0000000000199208 : je 0x1991e4 ; cli ; jmp rsp
0x0000000000199330 : je 0x19932e ; cli ; call rsp
0x00000000001995b0 : je 0x1995ea ; sti ; jmp rsp
0x0000000000199710 : je 0x1996d4 ; cld ; jmp rsp
0x0000000000199808 : je 0x1997de ; std ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x00000000000203e0 : je 0x20415 ; or byte ptr [rbx + 0x4814247c], cl ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000020568 : je 0x20660 ; add rsp, 0x98 ; ret
0x0000000000023c40 : je 0x23c6f ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000023f7e : je 0x23fad ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024bd6 : je 0x24c05 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024d69 : je 0x24d98 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024fb5 : je 0x24fe4 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002534d : je 0x2537b ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002583d : je 0x25870 ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000025cde : je 0x25d0c ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002667c : je 0x266af ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000026c21 : je 0x26c50 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000027716 : je 0x27745 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000027a8b : je 0x27aba ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000027db7 : je 0x27de6 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000028190 : je 0x281be ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000286a1 : je 0x286d0 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000028d67 : je 0x28d96 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000029130 : je 0x2915e ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000036c9e : je 0x36cbb ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000036e00 : je 0x36e1b ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000044f9e : je 0x44fb0 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004501e : je 0x45030 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000450cc : je 0x450de ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004a1b2 : je 0x4a180 ; or byte ptr [rax - 0x73], cl ; push rsi ; add dword ptr [rcx - 0x77], ecx ; push rsp ; ret 0x4808
0x000000000004ab4b : je 0x4ab70 ; mov byte ptr [rbx], 0 ; mov rax, rbx ; add rsp, 0x440 ; pop rbx ; ret
0x000000000006bb66 : je 0x6bb9e ; add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000006bbe3 : je 0x6bc0b ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000006f043 : je 0x6f05b ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000006f030 : je 0x6f05e ; lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000007044f : je 0x70433 ; add rsp, 0x20 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007430a : je 0x7431a ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074366 : je 0x74376 ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000076260 : je 0x76224 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000076243 : je 0x7626f ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000007625b : je 0x76271 ; cmp ebp, 0xa ; je 0x76229 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000076420 : je 0x7643f ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000793b8 : je 0x79426 ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000798c3 : je 0x798d0 ; add rsp, 0x38 ; ret
0x0000000000079e9b : je 0x79e72 ; add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000007d3a2 : je 0x7d3d4 ; or al, 0x48 ; mov edi, dword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000007e455 : je 0x7e465 ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000856b0 : je 0x856da ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008a858 : je 0x8a873 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000000ac37d : je 0xac373 ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000b650f : je 0xb6521 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b65bd : je 0xb65cf ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b665f : je 0xb6671 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000ba730 : je 0xba742 ; add dword ptr [rax + 0x10], 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ba840 : je 0xba825 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000c7f1d : je 0xc7f3d ; jle 0xc7f0e ; cmp esi, edi ; jge 0xc7f0c ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cc4a5 : je 0xcc4d0 ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cc845 : je 0xcc870 ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000d7ccf : je 0xd7cde ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000d8092 : je 0xd80f9 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000d9b3e : je 0xd9bbe ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000f811f : je 0xf8130 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000fdf8b : je 0xfdfaf ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fe126 : je 0xfe091 ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x00000000000ffbe8 : je 0xffc00 ; or dword ptr [rax], 0x8000 ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000102af9 : jg 0x102b47 ; add rsp, 0x90 ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011aea5 : jg 0x11aeda ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x0000000000125c44 : jg 0x125cc7 ; mov byte ptr [rbp + 0x11], bl ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012ff0d : jg 0x12fef3 ; add byte ptr [rax], al ; test eax, eax ; jne 0x12ff30 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000194b3d : jg 0x194b45 ; add ah, ah ; sub ebp, edx ; call rsp
0x0000000000195159 : jg 0x195149 ; call rsp
0x0000000000195151 : jg 0x195149 ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195209 : jg 0x1951fa ; call rsp
0x00000000000355e5 : jg 0x3561a ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x000000000004a603 : jg 0x4a615 ; or edx, esi ; or edx, eax ; mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
0x00000000000bbbca : jg 0xbbbfd ; lea rax, qword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x00000000000ce354 : jg 0xce356 ; lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000000fe0bc : jg 0xfe113 ; cmove ebx, eax ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x000000000008fb1f : jge 0x8fb6d ; xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x00000000000c7f23 : jge 0xc7f06 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000012e068 : jl 0x12e0a3 ; add byte ptr [rdx], al ; add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297cc9] ; pop rbx ; ret
0x0000000000139728 : jl 0x13975c ; or byte ptr [rax], al ; setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x000000000013b575 : jl 0x13b548 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001462d2 : jl 0x146307 ; sbb byte ptr [rax], al ; mov rax, qword ptr [rsp + 0x38] ; jne 0x1462c7 ; add rsp, 0x48 ; ret
0x000000000018a4a0 : jl 0x18a47d ; cli ; lcall ptr [rsi + rbx*8] ; cli ; jmp rsp
0x0000000000194de1 : jl 0x194dcf ; jmp rsp
0x0000000000195c64 : jl 0x195c5d ; add byte ptr [rax], al ; je 0x195ca2 ; out dx, eax ; call rsp
0x0000000000195d1c : jl 0x195d24 ; add byte ptr [rax], al ; xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000196834 : jl 0x196880 ; add dword ptr [rax], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x0000000000198234 : jl 0x19821a ; add dword ptr [rax], eax ; and al, 0x65 ; clc ; lcall ptr [rbp + rdx*8 + 0x66240001] ; clc ; jmp rsp
0x0000000000198aec : jl 0x198b0e ; add al, byte ptr [rax] ; in al, -0x14 ; stc ; jmp rsp
0x00000000000203e4 : jl 0x20415 ; adc al, 0x48 ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000025842 : jl 0x25870 ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000035361 : jl 0x35396 ; cld ; fild dword ptr [rsp - 4] ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x00000000000c7f1b : jl 0xc7f34 ; je 0xc7f3f ; jle 0xc7f10 ; cmp esi, edi ; jge 0xc7f0e ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000f8d4c : jl 0xf8d7e ; adc byte ptr [rdx], al ; cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x00000000001360b0 : jle 0x1360ca ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001361a2 : jle 0x1361d7 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000194b1d : jle 0x194b25 ; add byte ptr [rax + rbp - 0x16], dl ; jmp rsp
0x0000000000195931 : jle 0x195923 ; call rsp
0x0000000000050b70 : jle 0x50a64 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000006eff1 : jle 0x6f001 ; or dword ptr [rbx], 0x20 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c7f1f : jle 0xc7f0c ; cmp esi, edi ; jge 0xc7f0a ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000c8dce : jle 0xc8dbb ; add al, 0 ; add rsp, 0x80 ; pop rbx ; ret
0x0000000000194c03 : jmp qword ptr [rsp + rax*4 + 0x61240000]
0x000000000019665b : jmp qword ptr [rsp + rsi - 0xcabffff]
0x0000000000002a79 : jmp rsp
0x0000000000106d3b : jne 0x106d46 ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d98
0x000000000010723a : jne 0x107238 ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000001072aa : jne 0x1072a8 ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x0000000000111b58 : jne 0x111b79 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000001148ce : jne 0x114907 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001148c6 : jne 0x114916 ; and ebp, 0x200 ; jne 0x11490f ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000114e6e : jne 0x114e60 ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001196b8 : jne 0x1196d3 ; add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000121a68 : jne 0x121a82 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000126c6c : jne 0x126cb0 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000012aade : jne 0x12aac0 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012ae8c : jne 0x12ae80 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012cc6c : jne 0x12cc0a ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012d7ca : jne 0x12d7c7 ; mov rax, rbp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012e0d3 : jne 0x12e0ea ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2c3 : jne 0x12f2da ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f380 : jne 0x12f34e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f42c : jne 0x12f44a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f489 : jne 0x12f4b0 ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012fd56 : jne 0x12fd72 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd93 : jne 0x12fdaa ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe43 : jne 0x12fe5a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe93 : jne 0x12feaa ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff13 : jne 0x12ff2a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130dcd : jne 0x130e2c ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131c83 : jne 0x131c9a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a88 : jne 0x132aa2 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b23 : jne 0x132b3a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bbe : jne 0x132bda ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c37 : jne 0x132bf6 ; add byte ptr [rax], al ; test eax, eax ; jne 0x132c60 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132c3d : jne 0x132c5a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000139f82 : jne 0x139f4e ; mov byte ptr [rdx], 0 ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013d155 : jne 0x13d148 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013d205 : jne 0x13d235 ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x000000000013d7e9 : jne 0x13d810 ; mov byte ptr [rbx], bpl ; mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d868 : jne 0x13d890 ; mov byte ptr [rbx], bpl ; mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013da0d : jne 0x13da6d ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x000000000013dc2d : jne 0x13dcb1 ; add rsp, 0x20 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013dd92 : jne 0x13de0e ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013dec2 : jne 0x13de5f ; mov rax, qword ptr [r12 + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x000000000013e006 : jne 0x13dfd6 ; mov rax, qword ptr [r12 + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x000000000013e146 : jne 0x13e1aa ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e216 : jne 0x13e27a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e6 : jne 0x13e34a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a6 : jne 0x13e40a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e897 : jne 0x13e870 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000145876 : jne 0x14588a ; mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001462db : jne 0x1462be ; add rsp, 0x48 ; ret
0x00000000001462bd : jne 0x1462f0 ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146385 : jne 0x146398 ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000001463f8 : jne 0x146416 ; add rsp, 0x38 ; ret
0x0000000000171143 : jne 0x171140 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000172245 : jne 0x172234 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000172380 : jne 0x172360 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001733db : jne 0x1733fc ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002219e : jne 0x221c0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000022802 : jne 0x227f8 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000002bb64 : jne 0x2bbc0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000002e5fa : jne 0x2e610 ; mov eax, dword ptr [rbp + 8] ; sub eax, dword ptr [rbx + 8] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000033042 : jne 0x3302b ; mov byte ptr [rcx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000035432 : jne 0x35448 ; fadd st(0) ; add rsp, 8 ; ret
0x000000000003a89c : jne 0x3a868 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b019 : jne 0x3b014 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bbde : jne 0x6bc00 ; test rbp, rbp ; je 0x6bc10 ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000007693a : jne 0x76915 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000768d1 : jne 0x7692d ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a02 : jne 0x769e5 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000076afa : jne 0x76ad7 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000078f9f : jne 0x78ff0 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000007a349 : jne 0x7a362 ; mov rdx, qword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000007cc98 : jne 0x7cd6d ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007cf49 : jne 0x7cffd ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007e121 : jne 0x7e138 ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007e4f1 : jne 0x7e4b7 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007fe5d : jne 0x7fe57 ; add rsp, 8 ; mov rax, rdi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008574a : jne 0x8575a ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000869e2 : jne 0x86aa4 ; add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000088166 : jne 0x88248 ; add rsp, 8 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000008b3bc : jne 0x8b2b3 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008fb41 : jne 0x8fb56 ; add rsp, 8 ; ret
0x00000000000acfc6 : jne 0xad04c ; add rsp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ba278 : jne 0xba260 ; sub ebx, eax ; mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ba2e8 : jne 0xba2d0 ; add rsp, 8 ; sub ebx, eax ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bf835 : jne 0xbf828 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000bfe58 : jne 0xbfe80 ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000c04a9 : jne 0xc04c1 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000c7f4f : jne 0xc7f1e ; nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000d8eca : jne 0xd8eb8 ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000db19e : jne 0xdb16a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f0c5b : jne 0xf0c49 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f7019 : jne 0xf7032 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000f8e71 : jne 0xf8ef9 ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x000000000013ad71 : jno 0x13ad83 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000195d89 : jno 0x195d7c ; call rsp
0x00000000000bbbc9 : jno 0xbbc58 ; and al, 0x48 ; lea eax, dword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x000000000019710d : jnp 0x19711e ; add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197126 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000197115 : jnp 0x19711e ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000036c9b : jnp 0x36cb3 ; cli ; je 0x36cbe ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000036dfd : jnp 0x36e15 ; cli ; je 0x36e1e ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x00000000000c8567 : jnp 0xc857f ; mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000193b55 : jns 0x193b55 ; jmp rsp
0x0000000000196269 : jns 0x19625e ; jmp rsp
0x0000000000196261 : jns 0x19625e ; push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x0000000000187e4c : jo 0x187e23 ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e48 : jo 0x187e23 ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000195d81 : jo 0x195d7c ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x00000000001a25c2 : jo 0x1a25d3 ; add byte ptr [rax], al ; add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x000000000007312f : jo 0x7316e ; cmovne eax, edx ; mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000079adc : jo 0x79abe ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x0000000000196839 : jp 0x196830 ; call rsp
0x0000000000035430 : jp 0x3544a ; jne 0x3544a ; fadd st(0) ; add rsp, 8 ; ret
0x0000000000088797 : jp 0x887a9 ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013a62f : js 0x13a64a ; add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000143893 : js 0x1438a8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000014391c : js 0x14395b ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000143d73 : js 0x143dac ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000143dd3 : js 0x143e0c ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001949bd : js 0x1949c5 ; add byte ptr [rcx + rdx - 0x16], ah ; call rsp
0x0000000000196b59 : js 0x196b51 ; call rsp
0x0000000000196b58 : js 0x196b52 ; call rsp
0x0000000000002fa9 : js 0x2f5f ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000035d23 : js 0x35d48 ; mov eax, dword ptr [rsp + 0x80] ; add rsp, 0x108 ; ret
0x0000000000035d76 : js 0x35da0 ; mov eax, dword ptr [rsp + 0x80] ; add rsp, 0x108 ; ret
0x000000000003b2a4 : js 0x3b2b4 ; add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000079f08 : js 0x79f4f ; mov qword ptr [rbx + 0x90], rax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000cd23c : js 0xcd25d ; mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fdd97 : js 0xfddb2 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000fdf39 : js 0xfdf52 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fce62 : lahf ; add dword ptr [rax], eax ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000196981 : lahf ; dec esp ; add qword ptr [rax], rax ; add al, 0xa0 ; jmp rsp
0x0000000000131c7d : lahf ; rol dword ptr [rax], 0 ; test eax, eax ; jne 0x131ca0 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000011b1ff : lahf ; sub al, byte ptr [rax] ; mov eax, 0xca ; add rsp, 0x28 ; ret
0x0000000000197fe3 : lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x00000000000752a3 : lcall ptr [rbp + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000125aed : lcall ptr [rbp + 0x41] ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000011f860 : lcall ptr [rbp + 0x41] ; pop rsp ; pop r13 ; ret
0x00000000000fe42c : lcall ptr [rbp + 0x41] ; pop rsp ; ret
0x000000000019823b : lcall ptr [rbp + rdx*8 + 0x66240001] ; clc ; jmp rsp
0x0000000000187e23 : lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000020b20 : lcall ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000195153 : lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x000000000019584b : lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x00000000000ca19d : lcall ptr [rbx - 0x77] ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000712ee : lcall ptr [rbx - 0x77] ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; ret
0x0000000000198bfb : lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000197e33 : lcall ptr [rcx + rax*8 + 0x22640001] ; clc ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000196b7b : lcall ptr [rcx + rbx*2] ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x000000000019671b : lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000019448b : lcall ptr [rdi + rdx*2] ; add byte ptr [rax], al ; push rsp ; ret
0x0000000000187def : lcall ptr [rdi] ; mov edx, 0xb6e6fff5 ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x000000000019625b : lcall ptr [rdx + rbx + 0x79940001] ; int1 ; push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x00000000001988db : lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000198f93 : lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000195d83 : lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000198633 : lcall ptr [rdx + rsi*8 + 0x25340001] ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x0000000000187df7 : lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x000000000019422b : lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x00000000001995ab : lcall ptr [rsi + rax + 2] ; add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x000000000018a4a3 : lcall ptr [rsi + rbx*8] ; cli ; jmp rsp
0x000000000019894b : lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x0000000000193c6b : lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x000000000019570b : lcall ptr [rsp + rcx*8 + 0x3f840000] ; out dx, al ; jmp rsp
0x0000000000198edb : lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000019867b : lcall ptr [rsp + rsi*8] ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000010c6c5 : lds r8d, ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000004acc4 : lea eax, dword ptr [rax + rbx] ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000c8012 : lea eax, dword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001034cf : lea eax, dword ptr [rip + 0x2c0d4b] ; add rsp, 0x18 ; ret
0x0000000000102f57 : lea eax, dword ptr [rip + 0x2c1273] ; add rsp, 8 ; ret
0x00000000000ff53b : lea eax, dword ptr [rip + 0x2c4a57] ; add rsp, 8 ; ret
0x00000000000bbbcd : lea eax, dword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x000000000003b351 : lea eax, dword ptr [rip + 0x38b0ff] ; add rsp, 8 ; ret
0x00000000001395d0 : lea eax, dword ptr [rip - 0x6c16] ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000002986b : lea eax, dword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000012cdcc : lea ebp, dword ptr [rsp + 8] ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000001725bd : lea ebx, dword ptr [rip + 0x24b1dd] ; sub rsp, 8 ; call 0x7e8ac
0x00000000000ad19d : lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000073406 : lea ecx, dword ptr [rax + 4] ; mov qword ptr [rdx], rcx ; mov edx, dword ptr [rax] ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000768d4 : lea ecx, dword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000001397c9 : lea ecx, dword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000012f19b : lea ecx, dword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000769b0 : lea ecx, dword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000001395da : lea ecx, dword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000012eef9 : lea ecx, dword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000000ad113 : lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x00000000000acd8f : lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000acc5d : lea ecx, dword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000ad5ea : lea ecx, dword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x000000000013a972 : lea ecx, dword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x000000000012f63b : lea ecx, dword ptr [rsp + 0x30] ; call qword ptr [rax]
0x00000000000bb41f : lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x000000000013a733 : lea ecx, dword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x00000000000ad321 : lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000007d65a : lea edx, dword ptr [rax + 1] ; mov qword ptr [rbx + 8], rdx ; movzx eax, byte ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c800e : lea edx, dword ptr [rdi + rdi*8] ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013abaa : lea edx, dword ptr [rip + 0x28b3f0] ; cmp rax, rdx ; je 0x13abcf ; add rsp, 8 ; ret
0x00000000000c04a3 : lea edx, dword ptr [rip + 0x303697] ; jne 0xc04c7 ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000121a9f : lea edx, dword ptr [rip + 0x6727b] ; mov eax, dword ptr [rdx + rax*8 + 4] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f24d : lea edx, dword ptr [rip + 0xe00d] ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000735d9 : lea edx, dword ptr [rsi + 4] ; mov qword ptr [rax], rdx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000e16ad : lea edx, dword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94b
0x00000000000768d0 : lea esi, dword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8c : lea esi, dword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769a9 : lea esi, dword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x000000000013db05 : lea esi, dword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000130d55 : lea esi, dword ptr [rsp + 8] ; call qword ptr [rax]
0x000000000006f033 : lea esi, dword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000013deca : lea esi, dword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x000000000013d485 : lea esi, dword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x00000000001395cf : lea r8, qword ptr [rip - 0x6c16] ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000002986a : lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x00000000000768d3 : lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000001397c8 : lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000012f19a : lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000769af : lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000001395d9 : lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000012eef8 : lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000000ad112 : lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000acd8e : lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000acc5c : lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000ad5e9 : lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x000000000013a971 : lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x000000000012f63a : lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x00000000000bb41e : lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x000000000013a732 : lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x00000000000ad320 : lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000004acc3 : lea rax, qword ptr [rax + rbx] ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000c8011 : lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001034ce : lea rax, qword ptr [rip + 0x2c0d4b] ; add rsp, 0x18 ; ret
0x0000000000102f56 : lea rax, qword ptr [rip + 0x2c1273] ; add rsp, 8 ; ret
0x00000000000ff53a : lea rax, qword ptr [rip + 0x2c4a57] ; add rsp, 8 ; ret
0x00000000000bbbcc : lea rax, qword ptr [rip + 0x307ded] ; add rsp, 8 ; ret
0x000000000003b350 : lea rax, qword ptr [rip + 0x38b0ff] ; add rsp, 8 ; ret
0x00000000001725bc : lea rbx, qword ptr [rip + 0x24b1dd] ; sub rsp, 8 ; call 0x7e8ad
0x00000000000ad19c : lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000c800d : lea rdx, qword ptr [rdi + rdi*8] ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013aba9 : lea rdx, qword ptr [rip + 0x28b3f0] ; cmp rax, rdx ; je 0x13abd0 ; add rsp, 8 ; ret
0x00000000000c04a2 : lea rdx, qword ptr [rip + 0x303697] ; jne 0xc04c8 ; mov rax, rdx ; add rsp, 8 ; ret
0x000000000012f24c : lea rdx, qword ptr [rip + 0xe00d] ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000735d8 : lea rdx, qword ptr [rsi + 4] ; mov qword ptr [rax], rdx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000e16ac : lea rdx, qword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94c
0x00000000000768cf : lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8b : lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769a8 : lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x000000000013db04 : lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000130d54 : lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x000000000006f032 : lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000013dec9 : lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x000000000013d484 : lea rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x0000000000039b41 : lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x00000000000ce368 : lea rsp, qword ptr [rbp - 0x18] ; mov eax, 1 ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000001012e3 : lea rsp, qword ptr [rbp - 0x18] ; mov eax, ebx ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000006e270 : lea rsp, qword ptr [rbp - 0x18] ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000000ce356 : lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000004ba71 : lea rsp, qword ptr [rbp - 0x28] ; mov eax, ebx ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000021eeb : lea rsp, qword ptr [rbp - 0x28] ; mov eax, ecx ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000135108 : lea rsp, qword ptr [rbp - 0x28] ; mov eax, edx ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000209fc : lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000002b498 : lea rsp, qword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000198015 : leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x000000000019800d : leave ; add dword ptr [rax], eax ; test byte ptr [rbx], bh ; clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x000000000007693b : leave ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000424ec : leave ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003542b : leave ; fucomi st(1) ; fstp st(1) ; jp 0x3544f ; jne 0x3544f ; fadd st(0) ; add rsp, 8 ; ret
0x000000000012470a : leave ; idiv edi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000d7cce : leave ; je 0xd7cdf ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000035288 : leave ; mov dword ptr [rsp - 0x14], ecx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000007312c : leave ; mov qword ptr [r8 + 0x30], rsi ; cmovne eax, edx ; mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000007d794 : leave ; mov qword ptr [rbx + 0x38], rsi ; cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000003b445 : leave ; or eax, ecx ; cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000199809 : leave ; std ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x00000000000ad10f : leave ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000199483 : ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000195663 : ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000197fdb : ljmp ptr [rax + rcx*8 + 1] ; add byte ptr [rbx + rsi], ah ; clc ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x000000000019565b : ljmp ptr [rax + rcx*8] ; add ah, al ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x000000000019932b : ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x00000000001986a3 : ljmp ptr [rbp + rsi*8 + 1] ; add byte ptr [rcx + rdi], al ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000193c67 : ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x00000000001963e3 : ljmp ptr [rbx + 1] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000195ecb : ljmp ptr [rcx + rax - 0x3acbffff] ; out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000198d33 : ljmp ptr [rcx + rbp + 2] ; add byte ptr [rsi + rcx*2 + 0x29bcfffa], ah ; add al, byte ptr [rax] ; push rsp ; cli ; jmp rsp
0x000000000019980b : ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x0000000000198bb3 : ljmp ptr [rdi + rbx + 2] ; add byte ptr [rbx + rdx], dl ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x0000000000198383 : ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x00000000001966db : ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000196893 : ljmp ptr [rsi + rax*2 - 0x72fbffff] ; jmp rsp
0x0000000000196583 : ljmp ptr [rsi + rbp - 0x7bbbffff] ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196526 ; jmp rsp
0x0000000000194227 : ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x000000000019422f : ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x000000000019841b : ljmp ptr [rsp + 1] ; add byte ptr [rbp + rsi*4 - 0x1b6b0008], al ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x00000000001963fb : ljmp ptr [rsp + 1] ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x0000000000193c6f : ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x000000000007805e : lock add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5be8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000195c65 : lock add byte ptr [rax], al ; je 0x195ca1 ; out dx, eax ; call rsp
0x00000000001bca04 : lodsb al, byte ptr [rsi] ; add al, byte ptr [rax] ; add byte ptr [rsp + rax], ah ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 3
0x0000000000196894 : lodsb al, byte ptr [rsi] ; add dword ptr [rax], r8d ; add al, 0x8d ; jmp rsp
0x0000000000195ecc : lodsb al, byte ptr [rsi] ; add dword ptr [rcx], eax ; add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000196584 : lodsb al, byte ptr [rsi] ; add dword ptr cs:[rax], eax ; test dl, r14b ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196525 ; jmp rsp
0x00000000001a5a81 : lodsb al, byte ptr [rsi] ; cli ; call rsp
0x0000000000126799 : lodsb al, byte ptr [rsi] ; idiv bh ; add rsp, 8 ; lea eax, dword ptr [rbx + rbp] ; pop rbx ; pop rbp ; ret
0x000000000019932c : lodsb al, byte ptr [rsi] ; push rax ; add al, byte ptr [rax] ; je 0x199332 ; cli ; call rsp
0x0000000000194ca4 : lodsb al, byte ptr [rsi] ; xchg dword ptr [rax], eax ; add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x0000000000132c38 : lodsd eax, dword ptr [rsi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132c5f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000071a9f : lodsd eax, dword ptr [rsi] ; push rdx ; or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000001983d5 : loop 0x1983de ; add byte ptr [rdi + rbp*4], al ; clc ; jmp rsp
0x0000000000036156 : loop 0x36163 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x00000000000ad31f : loop 0xad376 ; lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000ad5e8 : loop 0xad63f ; lea ecx, dword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c8 : loop 0xad91f ; lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000ffc0a : loop 0xffc00 ; idiv bh ; mov eax, 1 ; add rsp, 8 ; ret
0x00000000001307ad : loope 0x130820 ; nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000196a51 : loope 0x196a48 ; call rsp
0x0000000000187e51 : loopne 0x187e4a ; call rsp
0x0000000000187e50 : loopne 0x187e4b ; call rsp
0x0000000000195a25 : loopne 0x195a35 ; add ah, dh ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x0000000000195a2d : loopne 0x195a35 ; add byte ptr [rax], ah ; out dx, al ; jmp rsp
0x00000000000715ca : loopne 0x715da ; add byte ptr [rcx + rcx*4 - 0x16], cl ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89e
0x0000000000073bc4 : loopne 0x73c10 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000007ada2 : loopne 0x7adee ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ad1ed : loopne 0xad233 ; pop rsp ; ret
0x0000000000132a0b : mov ah, 0 ; add byte ptr [rbp - 0x3f6af040], al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000199704 : mov ah, 0x13 ; add dword ptr [rax], eax ; xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000198bc0 : mov ah, 0x14 ; cli ; call rsp
0x000000000019978c : mov ah, 0x16 ; add dword ptr [rax], eax ; push rsp ; movabs eax, dword ptr [0xa164000116ccfffd] ; std ; jmp rsp
0x0000000000199400 : mov ah, 0x17 ; sti ; call rsp
0x000000000012fbd9 : mov ah, 0x24 ; add byte ptr [rdx], ch ; add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000012f634 : mov ah, 0x24 ; enter 0, 0 ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x000000000019644c : mov ah, 0x26 ; add dword ptr [rax], eax ; in al, 0x22 ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x0000000000196474 : mov ah, 0x27 ; add dword ptr [rax], eax ; push rsp ; pop rsi ; jmp rsp
0x0000000000195668 : mov ah, 0x2d ; out dx, al ; call rsp
0x0000000000197fe8 : mov ah, 0x33 ; clc ; jmp rsp
0x0000000000195758 : mov ah, 0x48 ; out dx, al ; jmp rsp
0x0000000000199204 : mov ah, 0x49 ; add al, byte ptr [rax] ; je 0x1991e8 ; cli ; jmp rsp
0x000000000005c0cb : mov ah, 0x49 ; mov eax, dword ptr [rsp + 8] ; lea rdx, qword ptr [rax + 8] ; mov qword ptr [r12 + 8], rdx ; jmp 0x5c0ae
0x0000000000196a04 : mov ah, 0x4c ; add dword ptr [rax], eax ; add al, 0xab ; jmp rsp
0x00000000001949bc : mov ah, 0x78 ; add byte ptr [rax], al ; adc edx, ebp ; call rsp
0x0000000000198f70 : mov ah, 0x8d ; cli ; jmp rsp
0x0000000000195e10 : mov ah, 0x91 ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000194064 : mov ah, 0x9d ; cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x000000000019531c : mov ah, 0xaf ; add byte ptr [rax], al ; add al, 0xb5 ; in eax, dx ; jmp rsp
0x0000000000198428 : mov ah, 0xb6 ; clc ; jmp rsp
0x000000000019554c : mov ah, 0xbf ; add byte ptr [rax], al ; in al, -1 ; in eax, dx ; jmp rsp
0x000000000019800c : mov ah, 0xc9 ; add dword ptr [rax], eax ; test byte ptr [rbx], bh ; clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x000000000019572c : mov ah, 0xcd ; add byte ptr [rax], al ; in al, 0x42 ; out dx, al ; call rsp
0x0000000000199398 : mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x000000000019814c : mov ah, 0xd0 ; add dword ptr [rax], eax ; and al, 0x54 ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x000000000019847c : mov ah, 0xe7 ; add dword ptr [rax], eax ; in al, -0x32 ; clc ; dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x0000000000195319 : mov ah, 0xed ; push qword ptr [rdi + rbp*4 - 0x4afc0000] ; in eax, dx ; jmp rsp
0x000000000019856c : mov ah, 0xee ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; add edi, ecx ; jmp rsp
0x0000000000196408 : mov ah, 0xf3 ; int1 ; call rsp
0x0000000000195d24 : mov ah, 0xf7 ; add byte ptr [rax], al ; and al, 0x65 ; out dx, eax ; jmp rsp
0x0000000000195e0c : mov ah, 0xfd ; add byte ptr [rax], al ; mov ah, 0x91 ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195e6c : mov ah, 0xff ; add byte ptr [rax], al ; hlt ; mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x000000000012aa24 : mov al, 0x29 ; add byte ptr [rdx], al ; add rsp, 8 ; ret
0x000000000010299c : mov al, 0x43 ; add dword ptr [rax], eax ; add rsp, 0x80 ; add rsp, 8 ; ret
0x0000000000197c35 : mov al, 1 ; add ah, dl ; mov bh, dh ; dec esp ; mov al, 1 ; add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x0000000000197c3d : mov al, 1 ; add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x00000000000f8762 : mov al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000187dfd : mov bh, 0xf5 ; call rsp
0x00000000000fddc5 : mov bh, 7 ; add byte ptr [rax], al ; add rsp, 0x18 ; ret
0x0000000000197c39 : mov bh, dh ; dec esp ; mov al, 1 ; add byte ptr [rcx + rcx*4 - 9], dl ; jmp rsp
0x000000000013abdd : mov bl, 0x28 ; add byte ptr [rax + 0x39], cl ; sal byte ptr [rbx + rcx + 0x48], 1 ; sub eax, -0x80 ; add rsp, 8 ; ret
0x00000000000715c9 : mov bl, 0xe0 ; add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89f
0x0000000000195e79 : mov bl, 0xef ; jmp rsp
0x0000000000196871 : mov bl, dh ; jmp rsp
0x0000000000131d82 : mov byte ptr [r8 + 7], dl ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f7342 : mov byte ptr [rax + 0x16b8ff], 0 ; add byte ptr [rsp + rax - 0xd], dh ; ret
0x00000000000fdd4f : mov byte ptr [rax + 0xc], 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x0000000000038648 : mov byte ptr [rax + 0xe], cl ; mov rdx, r13 ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x0000000000131d83 : mov byte ptr [rax + 7], dl ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000a04a9 : mov byte ptr [rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000001064a8 : mov byte ptr [rax], 0xa ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x0000000000194cdd : mov byte ptr [rax], al ; add byte ptr [rsi + rbp*2 - 0x16], ah ; jmp rsp
0x000000000011074d : mov byte ptr [rax], bl ; movsx eax, bl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000125c46 : mov byte ptr [rbp + 0x11], bl ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008fc0a : mov byte ptr [rbp + rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000126941 : mov byte ptr [rbx + 1], ch ; mov byte ptr [rbx + 2], 0 ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000126944 : mov byte ptr [rbx + 2], 0 ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004ab4d : mov byte ptr [rbx], 0 ; mov rax, rbx ; add rsp, 0x440 ; pop rbx ; ret
0x000000000013e5a4 : mov byte ptr [rbx], al ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000013d7eb : mov byte ptr [rbx], bpl ; mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d7ec : mov byte ptr [rbx], ch ; mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000002fa6 : mov byte ptr [rbx], cl ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000033044 : mov byte ptr [rcx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000197f7d : mov byte ptr [rcx], 0 ; je 0x197fba ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x000000000004b230 : mov byte ptr [rcx], ah ; movzx eax, r12b ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000139f84 : mov byte ptr [rdx], 0 ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085a2f : mov byte ptr [rsi + rbx], cl ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x0000000000085a2e : mov byte ptr [rsi + rbx], r9b ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x0000000000083f44 : mov byte ptr [rsp + 0x28], bl ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842ba : mov byte ptr [rsp + 0x28], bl ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x0000000000083f43 : mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842b9 : mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000c24ea : mov byte ptr [rsp + 0x79], al ; jmp 0xc2501
0x000000000013a5b7 : mov byte ptr [rsp + rbp], 0 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000195321 : mov ch, 0xed ; jmp rsp
0x00000000001991b1 : mov cl, 0xfa ; call rsp
0x00000000000ff536 : mov cl, byte ptr [rdx + 0x2c] ; add byte ptr [rax - 0x73], cl ; add eax, 0x2c4a57 ; add rsp, 8 ; ret
0x000000000007b6bd : mov dh, 0 ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007d47a : mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000034ec5 : mov dh, 0x14 ; add byte ptr [rdi], cl ; push rsp ; ret
0x00000000000acdb3 : mov dh, 0x44 ; and al, 0x20 ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000130dae : mov dh, 0xc0 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000130d48 : mov dh, 0xc0 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e12c : mov dh, 0xc0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010a01e : mov dh, 0xc0 ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001308cd : mov dh, 0xc0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007efdb : mov dh, 0xc4 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000004b234 : mov dh, 0xc4 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000187df5 : mov dh, 0xf5 ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x0000000000198429 : mov dh, 0xf8 ; jmp rsp
0x0000000000187e14 : mov dh, bl ; cmc ; call rsp
0x0000000000196311 : mov dh, cl ; call rsp
0x00000000001725b9 : mov dl, 0x24 ; add byte ptr [rax - 0x73], cl ; sbb eax, 0x24b1dd ; sub rsp, 8 ; call 0x7e8b0
0x0000000000195e71 : mov dl, 0xef ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x00000000000c0826 : mov dword ptr [r15 + 0x18], eax ; or byte ptr [rsp + 0x78], 2 ; jmp 0xc05b7
0x0000000000071837 : mov dword ptr [rax + 0x20], ecx ; mov dword ptr [rdx], ebx ; add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000007312e : mov dword ptr [rax + 0x30], esi ; cmovne eax, edx ; mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000359d3 : mov dword ptr [rax + 0x90], edx ; add rsp, 0xd0 ; ret
0x00000000000f7043 : mov dword ptr [rax + 8], ebp ; mov dword ptr [rbx + 4], edx ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000013ad1c : mov dword ptr [rax + rdx*8 - 4], ecx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ff3e9 : mov dword ptr [rax], 0 ; mov rax, qword ptr [rsp - 0x50] ; ret
0x00000000000f8ec0 : mov dword ptr [rax], 0x16 ; add rsp, 0x20 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000034e20 : mov dword ptr [rax], 0x22 ; add rsp, 0x28 ; ret
0x0000000000035472 : mov dword ptr [rax], 0x22 ; add rsp, 8 ; ret
0x00000000000bbbf8 : mov dword ptr [rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x0000000000110588 : mov dword ptr [rax], 0xc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003a306 : mov dword ptr [rax], 2 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012472e : mov dword ptr [rax], 6 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000146fcf : mov dword ptr [rax], ebx ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000014703a : mov dword ptr [rax], ebx ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000231e2 : mov dword ptr [rax], edi ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000f8140 : mov dword ptr [rax], edx ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000104560 : mov dword ptr [rax], edx ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000108c43 : mov dword ptr [rax], edx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000035a1a : mov dword ptr [rax], edx ; mov eax, 0xffffffff ; add rsp, 0xd0 ; ret
0x00000000000735dd : mov dword ptr [rax], edx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f16c3 : mov dword ptr [rax], esi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008a9db : mov dword ptr [rax], esi ; xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x0000000000079652 : mov dword ptr [rbp + 0x18], eax ; ja 0x79676 ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x00000000000fe329 : mov dword ptr [rbp + 0x24], eax ; xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000011074a : mov dword ptr [rbp + 0x38], edx ; mov byte ptr [rax], bl ; movsx eax, bl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000076d1b : mov dword ptr [rbp + 0xc0], eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000d03e4 : mov dword ptr [rbp + 8], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000fccab : mov dword ptr [rbp + 8], eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007ef1e : mov dword ptr [rbp + 8], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f6f49 : mov dword ptr [rbp + 8], eax ; mov dword ptr [rbp], ebx ; xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007eeed : mov dword ptr [rbp + 8], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000173524 : mov dword ptr [rbp], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012780d : mov dword ptr [rbp], eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000003b144 : mov dword ptr [rbp], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000074446 : mov dword ptr [rbp], eax ; mov qword ptr [rbx + 0x60], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b4aa : mov dword ptr [rbp], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007c32a : mov dword ptr [rbp], ebp ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000144b4d : mov dword ptr [rbp], ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000044fa1 : mov dword ptr [rbp], ebx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000f6f4c : mov dword ptr [rbp], ebx ; xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000035c20 : mov dword ptr [rbp], ecx ; add rsp, 0x88 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000089ac7 : mov dword ptr [rbp], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000085749 : mov dword ptr [rbp], esi ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000106d3a : mov dword ptr [rbp], esi ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d99
0x000000000003a7fd : mov dword ptr [rbx + 0x10], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001107d4 : mov dword ptr [rbx + 0x10], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ba83d : mov dword ptr [rbx + 0x10], edx ; je 0xba828 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006d555 : mov dword ptr [rbx + 0x18], eax ; add rsp, 0x18 ; pop rbx ; mov rax, r12 ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000110804 : mov dword ptr [rbx + 0x18], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c856a : mov dword ptr [rbx + 0x18], edx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000050a97 : mov dword ptr [rbx + 0x18], esi ; mov qword ptr [rcx + rdx*8], rax ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000006d4c5 : mov dword ptr [rbx + 0x20], eax ; add rsp, 0x18 ; mov rax, r12 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000131a1a : mov dword ptr [rbx + 0x20], eax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007d2cf : mov dword ptr [rbx + 0x20], eax ; mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001319c4 : mov dword ptr [rbx + 0x20], ecx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c85e6 : mov dword ptr [rbx + 0x20], edx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000122095 : mov dword ptr [rbx + 0x30], eax ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007828d : mov dword ptr [rbx + 0x30], ebp ; add rsp, 8 ; pop rbx ; mov eax, r13d ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001077fc : mov dword ptr [rbx + 0x38], eax ; mov eax, 3 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d796 : mov dword ptr [rbx + 0x38], esi ; cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000011056f : mov dword ptr [rbx + 0x40], ebp ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000136386 : mov dword ptr [rbx + 0x48], eax ; add rsp, 0x20 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007444a : mov dword ptr [rbx + 0x60], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007b792 : mov dword ptr [rbx + 0x70], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000073134 : mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000079f0b : mov dword ptr [rbx + 0x90], eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000bfdf2 : mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000012f1cc : mov dword ptr [rbx + 2], eax ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000124b0f : mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000f7046 : mov dword ptr [rbx + 4], edx ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000036cb0 : mov dword ptr [rbx + 8], 0 ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000002a614 : mov dword ptr [rbx + 8], eax ; add rsp, 0x10 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001107a4 : mov dword ptr [rbx + 8], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bc9f1 : mov dword ptr [rbx + 8], ecx ; add rsp, 0xd0 ; mov eax, edx ; pop rbx ; ret
0x00000000000c8566 : mov dword ptr [rbx + 8], edi ; mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000036158 : mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x000000000007d65e : mov dword ptr [rbx + 8], edx ; movzx eax, byte ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000360c8 : mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x000000000009673d : mov dword ptr [rbx], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000021623 : mov dword ptr [rbx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000033ea4 : mov dword ptr [rbx], 2 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d2a4 : mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000013ece3 : mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x000000000007d79c : mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000011c2a1 : mov dword ptr [rbx], eax ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000050b52 : mov dword ptr [rbx], eax ; add rsp, 8 ; add ebp, 0x30 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000096723 : mov dword ptr [rbx], eax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000131200 : mov dword ptr [rbx], eax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139e56 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000139821 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a5 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003b44b : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000cd23f : mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001192ed : mov dword ptr [rbx], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000145879 : mov dword ptr [rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000737dc : mov dword ptr [rbx], ecx ; jae 0x73747 ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000075172 : mov dword ptr [rbx], edx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000a04a7 : mov dword ptr [rbx], edx ; mov byte ptr [rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000007d2d2 : mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bca5b : mov dword ptr [rbx], esi ; add rsp, 0xd0 ; pop rbx ; ret
0x00000000000ba401 : mov dword ptr [rbx], esi ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000008040b : mov dword ptr [rbx], esi ; xor al, 0 ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000098220 : mov dword ptr [rbx], esp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000dadae : mov dword ptr [rcx + 0x40], 0xffffffff ; add rsp, 0x10 ; pop rbx ; ret
0x000000000000044d : mov dword ptr [rcx + 0x7c05000c], eax ; adc byte ptr [rsp + rcx], bl ; ret 0x4412
0x000000000013ad70 : mov dword ptr [rcx + 4], esi ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000050a9b : mov dword ptr [rcx + rdx*8], eax ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000000d7cd2 : mov dword ptr [rcx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013ad6d : mov dword ptr [rcx], ebp ; mov word ptr [rcx + 4], si ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000c04bb : mov dword ptr [rcx], ecx ; xor byte ptr [rax], al ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x0000000000090ae7 : mov dword ptr [rcx], edx ; add rsp, 0x100 ; ret
0x0000000000080012 : mov dword ptr [rcx], edx ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000ceea7 : mov dword ptr [rcx], esp ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000c0827 : mov dword ptr [rdi + 0x18], eax ; or byte ptr [rsp + 0x78], 2 ; jmp 0xc05b6
0x00000000001064a5 : mov dword ptr [rdi + 0x28], edx ; mov byte ptr [rax], 0xa ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x000000000007e4a8 : mov dword ptr [rdi + 8], edx ; movzx eax, byte ptr [rax - 1] ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000cc874 : mov dword ptr [rdi], eax ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cc4d4 : mov dword ptr [rdi], eax ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000011c79e : mov dword ptr [rdi], eax ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000a07fc : mov dword ptr [rdi], eax ; mov eax, dword ptr [rsp + 0x18] ; mov dword ptr [rdi + 4], eax ; lea rax, qword ptr [rdi + 8] ; ret
0x0000000000029dc2 : mov dword ptr [rdi], ecx ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000c91f7 : mov dword ptr [rdi], ecx ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000353f2 : mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000072c23 : mov dword ptr [rdx + 0x28], ebx ; add rsp, 8 ; pop rbx ; mov eax, r13d ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000124362 : mov dword ptr [rdx], 0x26 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000103347 : mov dword ptr [rdx], eax ; add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012cdba : mov dword ptr [rdx], eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012cc98 : mov dword ptr [rdx], eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fdd6f : mov dword ptr [rdx], eax ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000014340a : mov dword ptr [rdx], eax ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x000000000011fb17 : mov dword ptr [rdx], eax ; add rsp, 0x90 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000002bf3a : mov dword ptr [rdx], eax ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000011751e : mov dword ptr [rdx], eax ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ca53d : mov dword ptr [rdx], eax ; mov eax, esi ; add rsp, 0x48 ; ret
0x00000000000c9cf2 : mov dword ptr [rdx], eax ; mov rax, rsi ; add rsp, 8 ; ret
0x000000000012b13a : mov dword ptr [rdx], eax ; sub rsp, -0x80 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000d7cca : mov dword ptr [rdx], eax ; test rcx, rcx ; je 0xd7ce3 ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000c04bf : mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x0000000000056bdf : mov dword ptr [rdx], ebp ; mov eax, ebp ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007183a : mov dword ptr [rdx], ebx ; add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000007340a : mov dword ptr [rdx], ecx ; mov edx, dword ptr [rax] ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000ca393 : mov dword ptr [rdx], esi ; add rsp, 0x18 ; ret
0x00000000000ca45d : mov dword ptr [rdx], esi ; add rsp, 8 ; ret
0x00000000000ca53c : mov dword ptr [rdx], r8d ; mov eax, esi ; add rsp, 0x48 ; ret
0x00000000000c9cf1 : mov dword ptr [rdx], r8d ; mov rax, rsi ; add rsp, 8 ; ret
0x000000000017247d : mov dword ptr [rip + 0x250779], 0 ; add rsp, 8 ; ret
0x0000000000172028 : mov dword ptr [rip + 0x2508ae], 0 ; add rsp, 8 ; ret
0x000000000017281a : mov dword ptr [rip + 0x25292c], 1 ; add rsp, 8 ; ret
0x0000000000143976 : mov dword ptr [rip + 0x27ea74], edx ; add rsp, 8 ; ret
0x00000000001441e8 : mov dword ptr [rip + 0x281f32], eax ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000140963 : mov dword ptr [rip + 0x286003], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012ecb9 : mov dword ptr [rip + 0x2970fd], eax ; add rsp, 8 ; ret
0x0000000000122e5f : mov dword ptr [rip + 0x29f9db], eax ; add rsp, 8 ; ret
0x000000000010acf0 : mov dword ptr [rip + 0x2b6526], 3 ; add rsp, 8 ; ret
0x00000000000ffa1f : mov dword ptr [rip + 0x2c2d5b], eax ; add rsp, 8 ; ret
0x000000000010106a : mov dword ptr [rip + 0x2c3080], eax ; add rsp, 8 ; ret
0x0000000000101043 : mov dword ptr [rip + 0x2c30a3], 0 ; add rsp, 8 ; ret
0x0000000000101000 : mov dword ptr [rip + 0x2c30ea], edx ; add rsp, 8 ; ret
0x00000000000ff9f6 : mov dword ptr [rip + 0x2c4560], 0 ; add rsp, 8 ; ret
0x00000000000909e8 : mov dword ptr [rip + 0x332f1a], edx ; add rsp, 0x100 ; ret
0x000000000008fb24 : mov dword ptr [rip + 0x333d5e], eax ; add rsp, 8 ; ret
0x000000000008a9e0 : mov dword ptr [rip + 0x338e1a], edx ; add rsp, 0x18 ; ret
0x0000000000080409 : mov dword ptr [rip + 0x343389], eax ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000006bc1f : mov dword ptr [rip + 0x357acb], eax ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000074e18 : mov dword ptr [rsi + 8], eax ; mov qword ptr [rsi], rax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012cbff : mov dword ptr [rsi], eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000074e1c : mov dword ptr [rsi], eax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000021414 : mov dword ptr [rsi], edx ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000075196 : mov dword ptr [rsp + 0x10], eax ; call 0x913b6
0x0000000000035225 : mov dword ptr [rsp + 0x10], eax ; fld xword ptr [rsp + 8] ; ret
0x0000000000081984 : mov dword ptr [rsp + 0x10], eax ; pop r12 ; ret
0x00000000000c51a6 : mov dword ptr [rsp + 0x10], ebx ; call 0x913b6
0x00000000000843b8 : mov dword ptr [rsp + 0x10], ecx ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000084181 : mov dword ptr [rsp + 0x10], esi ; call qword ptr [rax]
0x000000000008197a : mov dword ptr [rsp + 0x14], 0 ; pop rbp ; mov dword ptr [r12 + 0x10], eax ; pop r12 ; ret
0x00000000000843b3 : mov dword ptr [rsp + 0x18], eax ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000106d3e : mov dword ptr [rsp + 0x18], eax ; mov rdx, rax ; jmp 0x106d95
0x00000000000842c4 : mov dword ptr [rsp + 0x18], edx ; call rdx
0x0000000000083f3f : mov dword ptr [rsp + 0x18], edx ; mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842bf : mov dword ptr [rsp + 0x20], eax ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x0000000000083f49 : mov dword ptr [rsp + 0x20], edx ; call qword ptr [rax]
0x00000000000336fd : mov dword ptr [rsp + 0x20], edx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9ba
0x00000000000336f8 : mov dword ptr [rsp + 0x28], eax ; mov qword ptr [rsp + 0x20], rdx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9bf
0x0000000000078402 : mov dword ptr [rsp + 0x28], eax ; mov rax, r13 ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000e4c58 : mov dword ptr [rsp + 0x28], edi ; add rax, rdx ; jmp rax
0x00000000000783cf : mov dword ptr [rsp + 0x30], ebx ; mov qword ptr [rbp + 0x18], rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000137d55 : mov dword ptr [rsp + 0x38], eax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000033701 : mov dword ptr [rsp + 0x38], eax ; call 0x1f9b6
0x000000000012a17f : mov dword ptr [rsp + 0x40], ebp ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bc652 : mov dword ptr [rsp + 0xa8], esp ; call r15
0x00000000000e0a8a : mov dword ptr [rsp + 4], esi ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008b560 : mov dword ptr [rsp + 8], eax ; call qword ptr [rdx]
0x0000000000104236 : mov dword ptr [rsp + 8], eax ; call rbx
0x000000000013dd85 : mov dword ptr [rsp + 8], eax ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000084271 : mov dword ptr [rsp + 8], eax ; xor edi, edi ; call qword ptr [rax]
0x0000000000080a68 : mov dword ptr [rsp + 8], ebx ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000e1647 : mov dword ptr [rsp + 8], ecx ; call 0xdd946
0x00000000000843bd : mov dword ptr [rsp + 8], ecx ; call rsi
0x0000000000084179 : mov dword ptr [rsp + 8], ecx ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x00000000000757bf : mov dword ptr [rsp + 8], ecx ; mov rdi, r15 ; call rax
0x0000000000053723 : mov dword ptr [rsp + 8], edx ; call 0x1f986
0x000000000005c0d6 : mov dword ptr [rsp + 8], edx ; jmp 0x5c0a3
0x0000000000035325 : mov dword ptr [rsp - 0x10], eax ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035303 : mov dword ptr [rsp - 0x10], eax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000353ee : mov dword ptr [rsp - 0x10], eax ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x000000000004a69a : mov dword ptr [rsp - 0x14], eax ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000035289 : mov dword ptr [rsp - 0x14], ecx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000004a692 : mov dword ptr [rsp - 0x18], eax ; shr rax, 0x20 ; mov dword ptr [rsp - 0x14], eax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000352ca : mov dword ptr [rsp - 0x18], edx ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x0000000000108ce8 : mov dword ptr [rsp - 0x30], ecx ; syscall ; cmp rax, -0x1000 ; ja 0x108d0f ; ret
0x00000000000354a5 : mov dword ptr [rsp - 2], edi ; fldcw word ptr [rsp - 2] ; ret
0x0000000000035360 : mov dword ptr [rsp - 4], edi ; fild dword ptr [rsp - 4] ; fld xword ptr [rsp + 8] ; fscale ; fstp st(1) ; ret
0x000000000004a609 : mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
0x000000000004a64f : mov dword ptr [rsp - 8], edx ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000009841b : mov dword ptr [rsp], 0 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013d249 : mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000008a189 : mov dword ptr [rsp], eax ; je 0x8a26f ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008aeab : mov dword ptr [rsp], eax ; je 0x8af9f ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x00000000000f1022 : mov dword ptr [rsp], eax ; je 0xf1006 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ac732 : mov dword ptr [rsp], eax ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012ccc7 : mov dword ptr [rsp], eax ; mov rcx, rax ; call r12
0x000000000008a1a2 : mov dword ptr [rsp], eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000011b0f1 : mov dword ptr [rsp], ebp ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010e412 : mov dword ptr [rsp], ebp ; je 0x10e435 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x00000000000bd014 : mov dword ptr [rsp], ebp ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000983f3 : mov dword ptr [rsp], ebp ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000021821 : mov dword ptr [rsp], ebx ; call 0x8da35
0x000000000017209c : mov dword ptr [rsp], ebx ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b6 ; call rdx
0x000000000007a353 : mov dword ptr [rsp], ecx ; mov rdi, rbx ; call rax
0x00000000000ff3e8 : mov dword ptr fs:[rax], 0 ; mov rax, qword ptr [rsp - 0x50] ; ret
0x0000000000034e1f : mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x0000000000035471 : mov dword ptr fs:[rax], 0x22 ; add rsp, 8 ; ret
0x00000000000bbbf7 : mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x0000000000110587 : mov dword ptr fs:[rax], 0xc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f813f : mov dword ptr fs:[rax], edx ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000035a19 : mov dword ptr fs:[rax], edx ; mov eax, 0xffffffff ; add rsp, 0xd0 ; ret
0x00000000000cd23e : mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000145878 : mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000fdd6e : mov dword ptr fs:[rdx], eax ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x0000000000143409 : mov dword ptr fs:[rdx], eax ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x000000000011751d : mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012b139 : mov dword ptr fs:[rdx], eax ; sub rsp, -0x80 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ca392 : mov dword ptr fs:[rdx], esi ; add rsp, 0x18 ; ret
0x00000000000ca45c : mov dword ptr fs:[rdx], esi ; add rsp, 8 ; ret
0x00000000000ca53b : mov dword ptr fs:[rdx], r8d ; mov eax, esi ; add rsp, 0x48 ; ret
0x00000000000c9cf0 : mov dword ptr fs:[rdx], r8d ; mov rax, rsi ; add rsp, 8 ; ret
0x00000000001175f7 : mov eax, 0 ; cmova eax, edx ; add rsp, 0x28 ; ret
0x00000000000cbb8f : mov eax, 0 ; cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000fe9c3 : mov eax, 0x100 ; cmovns rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x00000000000a0e1c : mov eax, 0x22 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000187e10 : mov eax, 0x88fff5dd ; fdivrp st(5) ; call rsp
0x000000000011b202 : mov eax, 0xca ; add rsp, 0x28 ; ret
0x0000000000075ea4 : mov eax, 0xffffffff ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000035a1c : mov eax, 0xffffffff ; add rsp, 0xd0 ; ret
0x0000000000073550 : mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006c27f : mov eax, 0xffffffff ; cmove eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000f7f64 : mov eax, 0xffffffff ; cmove rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x0000000000127cd0 : mov eax, 0xffffffff ; cmovne eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000139d5a : mov eax, 0xffffffff ; cmovne edx, eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000131202 : mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ba7bd : mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d7ee : mov eax, 1 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000006e360 : mov eax, 1 ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006f8b7 : mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ff43f : mov eax, 1 ; add rsp, 8 ; ret
0x000000000013e892 : mov eax, 1 ; jne 0x13e875 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131e9a : mov eax, 3 ; add rsp, 0x30 ; pop rbx ; ret
0x00000000001077ff : mov eax, 3 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000aaa80 : mov eax, dword ptr [r8 + 4] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d1e5 : mov eax, dword ptr [rax + 0x10] ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x000000000013da3d : mov eax, dword ptr [rax + 0x18] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000012df6d : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12df85 ; mov rdi, rsp ; call rax
0x000000000012e058 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12e070 ; mov rdi, rsp ; call rax
0x00000000000aaa81 : mov eax, dword ptr [rax + 4] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000194d95 : mov eax, dword ptr [rax] ; add byte ptr [rdx + rsi*2 - 0x74ab0016], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d9b ; call rsp
0x0000000000146a47 : mov eax, dword ptr [rax] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x00000000000753a3 : mov eax, dword ptr [rax] ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000011c220 : mov eax, dword ptr [rax] ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000c800b : mov eax, dword ptr [rax] ; lea rdx, qword ptr [rdi + rdi*8] ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000146366 : mov eax, dword ptr [rax] ; mov rdx, qword ptr [rsp + 0x38] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000000738a4 : mov eax, dword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000007366d : mov eax, dword ptr [rbp + 0x28] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x0000000000070bad : mov eax, dword ptr [rbp + 0x48] ; add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000002e5fc : mov eax, dword ptr [rbp + 8] ; sub eax, dword ptr [rbx + 8] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010c6c4 : mov eax, dword ptr [rbp + rax*8] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000a0f97 : mov eax, dword ptr [rbp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001107d0 : mov eax, dword ptr [rbx + 0x10] ; mov qword ptr [rbx + 0x10], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d37d : mov eax, dword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000007d39e : mov eax, dword ptr [rbx + 0x18] ; mov esi, dword ptr [rsp + 0xc] ; mov rdi, qword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x0000000000110800 : mov eax, dword ptr [rbx + 0x18] ; mov qword ptr [rbx + 0x18], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130f21 : mov eax, dword ptr [rbx + 0x20] ; sub rax, qword ptr [rbx + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; add eax, edx ; ret
0x000000000007da49 : mov eax, dword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007de69 : mov eax, dword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000013d481 : mov eax, dword ptr [rbx + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x00000000001107a0 : mov eax, dword ptr [rbx + 8] ; mov qword ptr [rbx + 8], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130e21 : mov eax, dword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x000000000013942c : mov eax, dword ptr [rbx] ; add rsp, 0xa8 ; pop rbx ; pop rbp ; ret
0x000000000019747d : mov eax, dword ptr [rcx] ; add byte ptr [rbx + rax*8 - 0xa], ah ; call rsp
0x000000000013db01 : mov eax, dword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000130d51 : mov eax, dword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x000000000013dd81 : mov eax, dword ptr [rdi + 8] ; mov qword ptr [rsp + 8], r8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013d469 : mov eax, dword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x0000000000121aa5 : mov eax, dword ptr [rdx + rax*8 + 4] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000075ee0 : mov eax, dword ptr [rdx] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013ac51 : mov eax, dword ptr [rip + 0x286241] ; add rsp, 8 ; ret
0x000000000013ac21 : mov eax, dword ptr [rip + 0x2862d9] ; add rsp, 8 ; ret
0x000000000013abc1 : mov eax, dword ptr [rip + 0x2863c1] ; add rsp, 8 ; ret
0x000000000013abf1 : mov eax, dword ptr [rip + 0x2863e9] ; add rsp, 8 ; ret
0x0000000000102eb8 : mov eax, dword ptr [rip + 0x2bf8ca] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bd496 : mov eax, dword ptr [rip + 0x30903c] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008fb39 : mov eax, dword ptr [rip + 0x336bf1] ; test eax, eax ; jne 0x8fb5e ; add rsp, 8 ; ret
0x000000000008426a : mov eax, dword ptr [rip + 0x33cb58] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000735df : mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000124335 : mov eax, dword ptr [rsp + 0x10] ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fcd31 : mov eax, dword ptr [rsp + 0x10] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000145d1e : mov eax, dword ptr [rsp + 0x10] ; call rax
0x00000000000a0850 : mov eax, dword ptr [rsp + 0x10] ; mov byte ptr [rdi + 4], cl ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 5] ; ret
0x00000000000a0840 : mov eax, dword ptr [rsp + 0x10] ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 4] ; ret
0x00000000000a0860 : mov eax, dword ptr [rsp + 0x10] ; mov word ptr [rdi + 4], r11w ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 6] ; ret
0x0000000000035200 : mov eax, dword ptr [rsp + 0x10] ; or eax, 0xffff8000 ; inc eax ; shr eax, 0x1f ; ret
0x00000000000203eb : mov eax, dword ptr [rsp + 0x18] ; call rax
0x00000000000a07fe : mov eax, dword ptr [rsp + 0x18] ; mov dword ptr [rdi + 4], eax ; lea rax, qword ptr [rdi + 8] ; ret
0x00000000000f1397 : mov eax, dword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13d9
0x000000000012f0d1 : mov eax, dword ptr [rsp + 0x1c] ; pop rdx ; pop rcx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000025846 : mov eax, dword ptr [rsp + 0x20] ; call rax
0x000000000004539f : mov eax, dword ptr [rsp + 0x30] ; add rsp, 0x170 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ad1e1 : mov eax, dword ptr [rsp + 0x30] ; add rsp, 0x60 ; pop rbx ; pop rbp ; sub rax, r12 ; pop r12 ; ret
0x0000000000039277 : mov eax, dword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x000000000011473e : mov eax, dword ptr [rsp + 0x38] ; jmp 0x11470c
0x00000000001462d7 : mov eax, dword ptr [rsp + 0x38] ; jne 0x1462c2 ; add rsp, 0x48 ; ret
0x0000000000136b8d : mov eax, dword ptr [rsp + 0x38] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136baf ; mov rdi, rbp ; call rax
0x000000000013699c : mov eax, dword ptr [rsp + 0x48] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369be ; mov rdi, r12 ; call rax
0x00000000000d64ff : mov eax, dword ptr [rsp + 0x68] ; xor edi, edi ; jmp 0xd64d0
0x0000000000035d25 : mov eax, dword ptr [rsp + 0x80] ; add rsp, 0x108 ; ret
0x000000000010a37a : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000cd0be : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035b79 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cd1b5 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000fdd99 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000c9bb0 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000221a0 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000014641e : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x38 ; ret
0x00000000001210b6 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x50 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000035e65 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000035f36 : mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x90 ; pop rbx ; ret
0x000000000013e5a0 : mov eax, dword ptr [rsp + 0xc] ; mov byte ptr [rbx], al ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x00000000000bfded : mov eax, dword ptr [rsp + 0xc] ; mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000fdf33 : mov eax, dword ptr [rsp + 0xc] ; test edx, edx ; js 0xfdf58 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085720 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000109d36 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba404 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000011bd69 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f1d0 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b2a9 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000fce65 : mov eax, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fec5f : mov eax, dword ptr [rsp + 8] ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f87db : mov eax, dword ptr [rsp + 8] ; add rsp, 0x60 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000798ba : mov eax, dword ptr [rsp + 8] ; cmp qword ptr [rax + 0x30], 0 ; je 0x798d9 ; add rsp, 0x38 ; ret
0x0000000000144194 : mov eax, dword ptr [rsp + 8] ; jns 0x1440af ; jmp 0x14416d
0x000000000005c0cd : mov eax, dword ptr [rsp + 8] ; lea rdx, qword ptr [rax + 8] ; mov qword ptr [r12 + 8], rdx ; jmp 0x5c0ac
0x000000000013dec5 : mov eax, dword ptr [rsp + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x0000000000124b0b : mov eax, dword ptr [rsp + 8] ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d2a0 : mov eax, dword ptr [rsp + 8] ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x0000000000139e51 : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981c : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a0 : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000012df68 : mov eax, dword ptr [rsp + 8] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df8a ; mov rdi, rsp ; call rax
0x000000000012e053 : mov eax, dword ptr [rsp + 8] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e075 ; mov rdi, rsp ; call rax
0x000000000010422e : mov eax, dword ptr [rsp + 8] ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x0000000000131a81 : mov eax, dword ptr [rsp + 8] ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000cd38a : mov eax, dword ptr [rsp + 8] ; test rax, rax ; je 0xcd39e ; call rax
0x00000000000f8c9b : mov eax, dword ptr [rsp - 0x4c] ; mov edx, eax ; neg eax ; cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x00000000000ff3f0 : mov eax, dword ptr [rsp - 0x50] ; ret
0x00000000000cd250 : mov eax, dword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000070460 : mov eax, dword ptr [rsp] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010bd23 : mov eax, dword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd84 : mov eax, dword ptr [rsp] ; add rsp, 0x40 ; ret
0x000000000013bae1 : mov eax, dword ptr [rsp] ; mov qword ptr [rbx + 8], rax ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c9951 : mov eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000035780 : mov eax, eax ; add rsp, 0x90 ; ret
0x00000000000808fd : mov eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013ed23 : mov eax, eax ; mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000056be1 : mov eax, ebp ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012d7cd : mov eax, ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011930e : mov eax, ebp ; or ebp, edx ; mov dword ptr [rbx], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000106d34 : mov eax, ebp ; sub rax, r14 ; mov qword ptr [rbp], r14 ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d9f
0x000000000004ab51 : mov eax, ebx ; add rsp, 0x440 ; pop rbx ; ret
0x0000000000089fae : mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000007c32e : mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ac380 : mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbc78 : mov eax, edx ; add rsp, 0x18 ; ret
0x00000000000ff2f7 : mov eax, edx ; add rsp, 0x48 ; ret
0x0000000000102d0a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x102d27 ; ret
0x0000000000109380 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10939d ; ret
0x0000000000109680 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10969d ; ret
0x0000000000109710 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10972d ; ret
0x00000000001097d0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x1097ed ; ret
0x000000000010991a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109937 ; ret
0x0000000000109a2a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109a47 ; ret
0x0000000000109aba : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109ad7 ; ret
0x0000000000109ca0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109cbd ; ret
0x0000000000109f00 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109f1d ; ret
0x000000000010a550 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a56d ; ret
0x000000000010a5b0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a5cd ; ret
0x00000000000cd29a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd2b7 ; ret
0x00000000000cd2fa : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd317 ; ret
0x00000000000f6ea0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6ebd ; ret
0x00000000000f6f00 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6f1d ; ret
0x00000000000f869a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf86b7 ; ret
0x00000000000f88ba : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf88d7 ; ret
0x00000000000f891a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8937 ; ret
0x00000000000f8f4a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8f67 ; ret
0x00000000000f909a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf90b7 ; ret
0x00000000000fcd9a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfcdb7 ; ret
0x00000000000fd8a0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfd8bd ; ret
0x00000000000fe5ea : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe607 ; ret
0x00000000000fe64a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe667 ; ret
0x00000000000fe6b0 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe6cd ; ret
0x00000000000fe710 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe72d ; ret
0x00000000000feb80 : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfeb9d ; ret
0x00000000000fed3a : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfed57 ; ret
0x00000000000fedca : mov eax, edx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfede7 ; ret
0x0000000000080015 : mov eax, edx ; add rsp, 8 ; ret
0x00000000000f811d : mov eax, edx ; je 0xf8132 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000bca55 : mov eax, edx ; sub rsi, rcx ; mov qword ptr [rbx], rsi ; add rsp, 0xd0 ; pop rbx ; ret
0x00000000001044c5 : mov eax, esi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ca53f : mov eax, esi ; add rsp, 0x48 ; ret
0x0000000000130f11 : mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c9cf5 : mov eax, esi ; add rsp, 8 ; ret
0x00000000000355e7 : mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x0000000000073243 : mov eax, esp ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000d2999 : mov eax, esp ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000195a2c : mov eax, fs ; add byte ptr [rax], al ; and al, 0xa0 ; out dx, al ; jmp rsp
0x000000000003577f : mov eax, r8d ; add rsp, 0x90 ; ret
0x0000000000105df7 : mov ebp, 0x49fff19b ; mov edi, dword ptr [rsp] ; call rbx
0x00000000001360aa : mov ebp, 0xf883ffff ; add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000037b8b : mov ebp, dword ptr [rsp + 0x50] ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x0000000000079bf3 : mov ebp, eax ; add rsp, 0x18 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006efdc : mov ebp, edx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000000e4c55 : mov ebp, esi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x000000000012e89b : mov ebp, esi ; push rbx ; sub rsp, 0x60 ; call 0x13ab09
0x00000000001954ad : mov ebx, 0xe9a40000 ; in eax, dx ; call rsp
0x0000000000121a62 : mov ebx, 0xf883fff5 ; push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fe084 : mov ebx, 0xffffffff ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x00000000000fdd69 : mov ebx, 0xffffffff ; mov dword ptr fs:[rdx], eax ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x000000000003a896 : mov ebx, dword ptr [rbp] ; test rbx, rbx ; jne 0x3a86e ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f4c2 : mov ebx, eax ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006bb64 : mov ebx, eax ; je 0x6bba0 ; add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000035c0a : mov ebx, ecx ; add rsp, 0x88 ; neg ebx ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000006efdf : mov ebx, edi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000187df9 : mov ecx, 0xb794fff5 ; cmc ; call rsp
0x0000000000138473 : mov ecx, dword ptr [rsp + 0x10] ; call rcx
0x00000000000ad458 : mov ecx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad718 : mov ecx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x000000000013a72e : mov ecx, dword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x0000000000027a85 : mov ecx, dword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025347 : mov ecx, dword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000135015 : mov ecx, dword ptr [rsp + 0x28] ; call rcx
0x0000000000024d63 : mov ecx, dword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818a : mov ecx, dword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000134dfb : mov ecx, dword ptr [rsp + 0x30] ; call rcx
0x0000000000023a1a : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f78 : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1b : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025cd8 : mov ecx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000243de : mov ecx, dword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000b73d9 : mov ecx, dword ptr [rsp + 0x84] ; lea rsi, qword ptr [rbx + rax*4] ; sub r10, rax ; jmp 0xb740f
0x000000000010bd1e : mov ecx, dword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd7f : mov ecx, dword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x0000000000131b8e : mov ecx, dword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000001029f3 : mov ecx, dword ptr [rsp + 8] ; syscall ; cmp rax, -0xfff ; jae 0x102a10 ; ret
0x000000000012fbe3 : mov ecx, dword ptr [rsp] ; call rcx
0x00000000000e1641 : mov ecx, eax ; mov rsi, r13 ; mov qword ptr [rsp + 8], r9 ; call 0xdd94c
0x00000000000bb41c : mov ecx, ebp ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e4 : mov ecx, ebp ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c4 : mov ecx, ebp ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000001226d1 : mov ecx, edi ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000ad31b : mov ecx, edi ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000768cd : mov ecx, esi ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000213de : mov ecx, esp ; push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000005371d : mov edi, 0x100 ; mov qword ptr [rsp + 8], rdx ; call 0x1f98c
0x00000000001108f6 : mov edi, 0x2000001 ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x0000000000195545 : mov edi, 0xff640000 ; in eax, dx ; push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x000000000019554d : mov edi, 0xffe40000 ; in eax, dx ; jmp rsp
0x0000000000104233 : mov edi, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000355e4 : mov edi, dword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x0000000000029866 : mov edi, dword ptr [rsp + 0x10] ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000010431f : mov edi, dword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000203e3 : mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000003761d : mov edi, dword ptr [rsp + 0x18] ; call r15
0x0000000000023a24 : mov edi, dword ptr [rsp + 0x20] ; call r14
0x00000000000238bf : mov edi, dword ptr [rsp + 0x20] ; call r15
0x00000000000c984d : mov edi, dword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039272 : mov edi, dword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000001236c1 : mov edi, dword ptr [rsp + 0x28] ; call 0x1f9be
0x00000000000241b7 : mov edi, dword ptr [rsp + 0x30] ; call r15
0x00000000000243e8 : mov edi, dword ptr [rsp + 0x30] ; call rbx
0x0000000000023f82 : mov edi, dword ptr [rsp + 0x38] ; call r14
0x0000000000023c44 : mov edi, dword ptr [rsp + 0x38] ; call r15
0x0000000000025351 : mov edi, dword ptr [rsp + 0x38] ; call rbx
0x0000000000026680 : mov edi, dword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000047bc9 : mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000027dbb : mov edi, dword ptr [rsp + 0x40] ; call r15
0x0000000000025ce2 : mov edi, dword ptr [rsp + 0x40] ; call rbx
0x0000000000025841 : mov edi, dword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000c24e3 : mov edi, dword ptr [rsp + 0x68] ; or eax, 8 ; mov byte ptr [rsp + 0x79], al ; jmp 0xc2508
0x00000000000e7a17 : mov edi, dword ptr [rsp + 0x78] ; call 0x1f9c4
0x000000000007da7b : mov edi, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007dea1 : mov edi, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x000000000007d3a6 : mov edi, dword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000391f9 : mov edi, dword ptr [rsp] ; call r14
0x0000000000104280 : mov edi, dword ptr [rsp] ; call rbx
0x00000000000acc59 : mov edi, dword ptr [rsp] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000e16a9 : mov edi, dword ptr [rsp] ; lea rdx, qword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94f
0x000000000014616b : mov edi, dword ptr [rsp] ; mov rax, qword ptr [rax + 0x128] ; jmp rax
0x00000000001397c6 : mov edi, eax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x00000000001395d7 : mov edi, eax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000012f198 : mov edi, ebp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000012f0be : mov edi, ebp ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x0000000000138470 : mov edi, ebp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000c51a0 : mov edi, ebp ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913bc
0x000000000012ccc4 : mov edi, ebx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x0000000000145d1b : mov edi, ebx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbe0 : mov edi, ebx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000007518d : mov edi, ecx ; sub r8, rsi ; mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913bf
0x000000000012eef6 : mov edi, edi ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a96f : mov edi, edi ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x0000000000197c41 : mov edi, esi ; jmp rsp
0x000000000008417e : mov edi, esi ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x0000000000135012 : mov edi, esp ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134df8 : mov edi, esp ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000143440 : mov edx, 0 ; cmovne rax, rdx ; add rsp, 8 ; ret
0x0000000000187df1 : mov edx, 0xb6e6fff5 ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x0000000000185dfc : mov edx, 0xd4fff1aa ; stosb byte ptr [rdi], al ; int1 ; jmp rsp
0x0000000000198949 : mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x000000000013ecdc : mov edx, 1 ; bswap eax ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x00000000000f7014 : mov edx, 9 ; jne 0xf7037 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007340c : mov edx, dword ptr [rax] ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000203e8 : mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000012fe05 : mov edx, dword ptr [rbx + 0x28] ; add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000007a34c : mov edx, dword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x0000000000108c40 : mov edx, dword ptr [rbx] ; mov qword ptr [rax], rdx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000db199 : mov edx, dword ptr [rbx] ; test rdx, rdx ; jne 0xdb16f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000757b8 : mov edx, dword ptr [rdi + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000008b891 : mov edx, dword ptr [rip + 0x3356c1] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b611 : mov edx, dword ptr [rip + 0x335941] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b559 : mov edx, dword ptr [rip + 0x3359f9] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000110a00 : mov edx, dword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000001108fc : mov edx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d4 : mov edx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x0000000000036151 : mov edx, dword ptr [rsp + 0x28] ; and edx, 1 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x00000000000c9848 : mov edx, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024faf : mov edx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000146369 : mov edx, dword ptr [rsp + 0x38] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000000238b5 : mov edx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db1 : mov edx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ad : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd0 : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3a : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087161 : mov edx, dword ptr [rsp + 0x68] ; call rax
0x0000000000088479 : mov edx, dword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000001304e7 : mov edx, dword ptr [rsp + 8] ; mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130509 ; mov rdi, rbp ; call rdx
0x00000000000391f1 : mov edx, dword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f8 : mov edx, dword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000130f5e : mov edx, dword ptr [rsp] ; bswap edx ; mov dword ptr [rax], edx ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000075193 : mov edx, eax ; mov qword ptr [rsp + 0x10], r8 ; call 0x913b9
0x00000000000f8c9f : mov edx, eax ; neg eax ; cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x00000000000e163f : mov edx, ebp ; mov ecx, eax ; mov rsi, r13 ; mov qword ptr [rsp + 8], r9 ; call 0xdd94e
0x000000000013da3a : mov edx, ebp ; mov rax, qword ptr [rax + 0x18] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000003864c : mov edx, ebp ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x00000000000213e3 : mov edx, ebp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x0000000000037617 : mov edx, ebp ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715ce : mov edx, ebp ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89a
0x000000000013d1e2 : mov edx, ebx ; mov rax, qword ptr [rax + 0x10] ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x000000000013d245 : mov edx, edi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000000c51a3 : mov edx, esi ; mov qword ptr [rsp + 0x10], r11 ; call 0x913b9
0x00000000000ad5e7 : mov edx, esp ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad31e : mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x0000000000194224 : mov esi, 0x2efffc93 ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000145d15 : mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x0000000000193b2c : mov esi, 0x64fffc76 ; jbe 0x193b36 ; call rsp
0x0000000000139df5 : mov esi, 0xa ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x00000000000235d8 : mov esi, 0xbe0f1a4a ; push rdx ; sbb ecx, dword ptr [rcx + 0x50895048] ; push rsp ; ret
0x00000000001811c6 : mov esi, 0xfa1fb992 ; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp ; ret
0x000000000019551d : mov esi, 0xfcf40000 ; in eax, dx ; jmp rsp
0x000000000012eef0 : mov esi, 1 ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000012f0b8 : mov esi, 2 ; mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x00000000001397c0 : mov esi, 2 ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000013a969 : mov esi, 3 ; mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x00000000001398c0 : mov esi, 3 ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000012f192 : mov esi, 4 ; mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000139a1b : mov esi, 6 ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x0000000000139b5b : mov esi, 7 ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x0000000000139d01 : mov esi, 8 ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000010431c : mov esi, dword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000355e0 : mov esi, dword ptr [rdi + 0x20] ; mov r15, qword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x000000000007da76 : mov esi, dword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000003864f : mov esi, dword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x000000000012e718 : mov esi, dword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x000000000008822a : mov esi, dword ptr [rsp + 0x18] ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x0000000000086a89 : mov esi, dword ptr [rsp + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x00000000000213e6 : mov esi, dword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000ad45d : mov esi, dword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71d : mov esi, dword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000023a1f : mov esi, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238ba : mov esi, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000877f1 : mov esi, dword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x000000000012fbd8 : mov esi, dword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013846b : mov esi, dword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000241b2 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e3 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc1a0 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df3 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000023f7d : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3f : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534c : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667b : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000086e01 : mov esi, dword ptr [rsp + 0x48] ; call rax
0x0000000000027db6 : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdd : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583c : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x000000000013500d : mov esi, dword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000007d3a1 : mov esi, dword ptr [rsp + 0xc] ; mov rdi, qword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x0000000000110901 : mov esi, dword ptr [rsp + 8] ; call rax
0x00000000000203df : mov esi, dword ptr [rsp + 8] ; mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000001226d9 : mov esi, dword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x000000000009833a : mov esi, dword ptr [rsp] ; test rsi, rsi ; jne 0x98355 ; jmp 0x9830f
0x00000000000acd8c : mov esi, ebp ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000e1644 : mov esi, ebp ; mov qword ptr [rsp + 8], r9 ; call 0xdd949
0x00000000000acc56 : mov esi, ebp ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000003926f : mov esi, ebp ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000000c519d : mov esi, ebx ; mov rdi, rbp ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913bf
0x0000000000146168 : mov esi, edi ; mov rdi, qword ptr [rsp] ; mov rax, qword ptr [rax + 0x128] ; jmp rax
0x000000000012ccc1 : mov esi, edi ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x000000000012e895 : mov esi, edi ; push r12 ; push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0f
0x0000000000130f0d : mov esi, edx ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003761a : mov esi, esp ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715d1 : mov esi, esp ; mov rdi, rsp ; call 0x4d897
0x000000000019804c : mov esp, 0x240001ca ; clc ; call rsp
0x0000000000193c64 : mov esp, 0x2cfffc6d ; insd dword ptr [rdi], dx ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x000000000019637c : mov esp, 0x4000120 ; cwde ; int1 ; call rsp
0x00000000001983d4 : mov esp, 0x40001e2 ; scasd eax, dword ptr [rdi] ; clc ; jmp rsp
0x0000000000195fcc : mov esp, 0x44000104 ; fsubr st(7) ; call rsp
0x0000000000195204 : mov esp, 0x540000a7 ; jg 0x1951ff ; call rsp
0x000000000019630c : mov esp, 0x5400011d ; mov dh, cl ; call rsp
0x0000000000196a4c : mov esp, 0x5400014e ; loope 0x196a4d ; call rsp
0x00000000001985fc : mov esp, 0x540001f1 ; and ecx, edi ; call rsp
0x0000000000198d3c : mov esp, 0x54000229 ; cli ; jmp rsp
0x0000000000194ee4 : mov esp, 0x64000095 ; cmp ebp, ebx ; call rsp
0x0000000000196664 : mov esp, 0x64000134 ; call rsp
0x00000000001967a4 : mov esp, 0x6400013d ; pop rax ; call rsp
0x0000000000197ac4 : mov esp, 0x740001aa ; movsxd rsi, edi ; call rsp
0x0000000000195984 : mov esp, 0x840000dc ; mov gs, esi ; call rsp
0x0000000000197e8c : mov esp, 0x940001c2 ; and al, 0xf8 ; call rsp
0x000000000019491c : mov esp, 0xa4000076 ; or ch, dl ; call rsp
0x0000000000196404 : mov esp, 0xb4000124 ; int1 ; call rsp
0x0000000000198e54 : mov esp, 0xc4000231 ; insd dword ptr [rdi], dx ; cli ; call rsp
0x0000000000198094 : mov esp, cs ; add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x000000000006e26e : mov esp, ebx ; lea rsp, qword ptr [rbp - 0x18] ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000000cdb4f : mov esp, ebx ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000195989 : mov gs, esi ; call rsp
0x000000000011b0f0 : mov qword ptr [r12], rbp ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000fccaa : mov qword ptr [r13 + 8], rax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012780c : mov qword ptr [r13], rax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000085748 : mov qword ptr [r13], rsi ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007312d : mov qword ptr [r8 + 0x30], rsi ; cmovne eax, edx ; mov dword ptr [rbx + 0x74], eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000359d2 : mov qword ptr [r8 + 0x90], rdx ; add rsp, 0xd0 ; ret
0x00000000000f16c2 : mov qword ptr [r8], rsi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000090ae6 : mov qword ptr [r9], rdx ; add rsp, 0x100 ; ret
0x0000000000080011 : mov qword ptr [r9], rdx ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000071836 : mov qword ptr [rax + 0x20], rcx ; mov dword ptr [rdx], ebx ; add rsp, 8 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x000000000003a305 : mov qword ptr [rax], 2 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000146fce : mov qword ptr [rax], rbx ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x0000000000147039 : mov qword ptr [rax], rbx ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000108c42 : mov qword ptr [rax], rdx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000735dc : mov qword ptr [rax], rdx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008a9da : mov qword ptr [rax], rsi ; xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x0000000000079651 : mov qword ptr [rbp + 0x18], rax ; ja 0x79677 ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000110749 : mov qword ptr [rbp + 0x38], rdx ; mov byte ptr [rax], bl ; movsx eax, bl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000d03e3 : mov qword ptr [rbp + 8], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007ef1d : mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007eeec : mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000173523 : mov qword ptr [rbp], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000106d39 : mov qword ptr [rbp], r14 ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d9a
0x0000000000074445 : mov qword ptr [rbp], rax ; mov qword ptr [rbx + 0x60], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b4a9 : mov qword ptr [rbp], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000144b4c : mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000044fa0 : mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000089ac6 : mov qword ptr [rbp], rdx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a7fc : mov qword ptr [rbx + 0x10], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001107d3 : mov qword ptr [rbx + 0x10], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ba83c : mov qword ptr [rbx + 0x10], rdx ; je 0xba829 ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000110803 : mov qword ptr [rbx + 0x18], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c8569 : mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000050a96 : mov qword ptr [rbx + 0x18], rsi ; mov qword ptr [rcx + rdx*8], rax ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000131a19 : mov qword ptr [rbx + 0x20], rax ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007d2ce : mov qword ptr [rbx + 0x20], rax ; mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001319c3 : mov qword ptr [rbx + 0x20], rcx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c85e5 : mov qword ptr [rbx + 0x20], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000122094 : mov qword ptr [rbx + 0x30], rax ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001077fb : mov qword ptr [rbx + 0x38], rax ; mov eax, 3 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d795 : mov qword ptr [rbx + 0x38], rsi ; cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000011056e : mov qword ptr [rbx + 0x40], rbp ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000074449 : mov qword ptr [rbx + 0x60], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000079f0a : mov qword ptr [rbx + 0x90], rax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001107a3 : mov qword ptr [rbx + 8], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bc9f0 : mov qword ptr [rbx + 8], rcx ; add rsp, 0xd0 ; mov eax, edx ; pop rbx ; ret
0x00000000000c8565 : mov qword ptr [rbx + 8], rdi ; mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x000000000007d65d : mov qword ptr [rbx + 8], rdx ; movzx eax, byte ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000009673c : mov qword ptr [rbx], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000021622 : mov qword ptr [rbx], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013d3c3 : mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000013ed25 : mov qword ptr [rbx], rax ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000050b51 : mov qword ptr [rbx], rax ; add rsp, 8 ; add ebp, 0x30 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x0000000000096722 : mov qword ptr [rbx], rax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x000000000013126f : mov qword ptr [rbx], rax ; mov eax, 1 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139e55 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000139820 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a4 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003b44a : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000a04a6 : mov qword ptr [rbx], rdx ; mov byte ptr [rax], 0 ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000bca5a : mov qword ptr [rbx], rsi ; add rsp, 0xd0 ; pop rbx ; ret
0x00000000000ba400 : mov qword ptr [rbx], rsi ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000050a9a : mov qword ptr [rcx + rdx*8], rax ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000000d7cd1 : mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001064a4 : mov qword ptr [rdi + 0x28], rdx ; mov byte ptr [rax], 0xa ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x00000000000d7cc9 : mov qword ptr [rdx], rax ; test rcx, rcx ; je 0xd7ce4 ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000073409 : mov qword ptr [rdx], rcx ; mov edx, dword ptr [rax] ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000017247c : mov qword ptr [rip + 0x250779], 0 ; add rsp, 8 ; ret
0x0000000000172027 : mov qword ptr [rip + 0x2508ae], 0 ; add rsp, 8 ; ret
0x0000000000172819 : mov qword ptr [rip + 0x25292c], 1 ; add rsp, 8 ; ret
0x0000000000143975 : mov qword ptr [rip + 0x27ea74], rdx ; add rsp, 8 ; ret
0x0000000000122e5e : mov qword ptr [rip + 0x29f9db], rax ; add rsp, 8 ; ret
0x000000000010acef : mov qword ptr [rip + 0x2b6526], 3 ; add rsp, 8 ; ret
0x00000000000ffa1e : mov qword ptr [rip + 0x2c2d5b], rax ; add rsp, 8 ; ret
0x0000000000101069 : mov qword ptr [rip + 0x2c3080], rax ; add rsp, 8 ; ret
0x0000000000101042 : mov qword ptr [rip + 0x2c30a3], 0 ; add rsp, 8 ; ret
0x0000000000100fff : mov qword ptr [rip + 0x2c30ea], rdx ; add rsp, 8 ; ret
0x00000000000ff9f5 : mov qword ptr [rip + 0x2c4560], 0 ; add rsp, 8 ; ret
0x00000000000909e7 : mov qword ptr [rip + 0x332f1a], rdx ; add rsp, 0x100 ; ret
0x000000000008fb23 : mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x000000000008a9df : mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x0000000000080408 : mov qword ptr [rip + 0x343389], rax ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000074e1b : mov qword ptr [rsi], rax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c51a5 : mov qword ptr [rsp + 0x10], r11 ; call 0x913b7
0x00000000000c51a4 : mov qword ptr [rsp + 0x10], r11 ; call 0x913b8
0x0000000000084180 : mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x0000000000075195 : mov qword ptr [rsp + 0x10], r8 ; call 0x913b7
0x00000000000843b7 : mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000842c3 : mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000843b2 : mov qword ptr [rsp + 0x18], rax ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000106d3d : mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d96
0x0000000000083f3e : mov qword ptr [rsp + 0x18], rdx ; mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x0000000000083f48 : mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842be : mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000336fc : mov qword ptr [rsp + 0x20], rdx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9bb
0x00000000000336f7 : mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x20], rdx ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9c0
0x00000000000e4c57 : mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x00000000000bc651 : mov qword ptr [rsp + 0xa8], r12 ; call r15
0x000000000013dd84 : mov qword ptr [rsp + 8], r8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000084270 : mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000e1646 : mov qword ptr [rsp + 8], r9 ; call 0xdd947
0x000000000008b55f : mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000104235 : mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000843bc : mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000084178 : mov qword ptr [rsp + 8], rcx ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x00000000000757be : mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x0000000000053722 : mov qword ptr [rsp + 8], rdx ; call 0x1f987
0x0000000000108ce7 : mov qword ptr [rsp - 0x30], r9 ; syscall ; cmp rax, -0x1000 ; ja 0x108d10 ; ret
0x000000000004a64e : mov qword ptr [rsp - 8], rdx ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000012ccc6 : mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x000000000007a352 : mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x0000000000080010 : mov qword ptr fs:[r9], rdx ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000173522 : mov qword ptr fs:[rbp], 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000079f09 : mov qword ptr ss:[rbx + 0x90], rax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000012e89a : mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0a
0x000000000012e894 : mov r14, rdi ; push r12 ; push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab10
0x00000000000355e3 : mov r15, qword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x00000000000d64fe : mov r8, qword ptr [rsp + 0x68] ; xor edi, edi ; jmp 0xd64d1
0x0000000000144193 : mov r8, qword ptr [rsp + 8] ; jns 0x1440b0 ; jmp 0x14416e
0x00000000000ad457 : mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad717 : mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000027a84 : mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025346 : mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000024d62 : mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000028189 : mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000023a19 : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f77 : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1a : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025cd7 : mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000243dd : mov r9, qword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000001029f2 : mov r9, qword ptr [rsp + 8] ; syscall ; cmp rax, -0xfff ; jae 0x102a11 ; ret
0x00000000000f7f63 : mov rax, -1 ; cmove rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x00000000000fcd30 : mov rax, qword ptr [r12 + 0x10] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013dec4 : mov rax, qword ptr [r12 + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x000000000010c6c3 : mov rax, qword ptr [r13 + rax*8] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d1e4 : mov rax, qword ptr [rax + 0x10] ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x000000000013da3c : mov rax, qword ptr [rax + 0x18] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000012df6c : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df86 ; mov rdi, rsp ; call rax
0x000000000012e057 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e071 ; mov rdi, rsp ; call rax
0x0000000000146a46 : mov rax, qword ptr [rax] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x00000000000c800a : mov rax, qword ptr [rax] ; lea rdx, qword ptr [rdi + rdi*8] ; lea rax, qword ptr [rax + rdx*8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000146365 : mov rax, qword ptr [rax] ; mov rdx, qword ptr [rsp + 0x38] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000000738a3 : mov rax, qword ptr [rbp + 0x20] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000007366c : mov rax, qword ptr [rbp + 0x28] ; add rsp, 8 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x0000000000070bac : mov rax, qword ptr [rbp + 0x48] ; add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x00000000000a0f96 : mov rax, qword ptr [rbp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001107cf : mov rax, qword ptr [rbx + 0x10] ; mov qword ptr [rbx + 0x10], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007d37c : mov rax, qword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000001107ff : mov rax, qword ptr [rbx + 0x18] ; mov qword ptr [rbx + 0x18], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130f20 : mov rax, qword ptr [rbx + 0x20] ; sub rax, qword ptr [rbx + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; add eax, edx ; ret
0x000000000007da48 : mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007de68 : mov rax, qword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000013d480 : mov rax, qword ptr [rbx + 8] ; lea rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call qword ptr [rax]
0x000000000011079f : mov rax, qword ptr [rbx + 8] ; mov qword ptr [rbx + 8], rbp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130e20 : mov rax, qword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x000000000013942b : mov rax, qword ptr [rbx] ; add rsp, 0xa8 ; pop rbx ; pop rbp ; ret
0x000000000013db00 : mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000130d50 : mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x000000000013dd80 : mov rax, qword ptr [rdi + 8] ; mov qword ptr [rsp + 8], r8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013d468 : mov rax, qword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x000000000013ac50 : mov rax, qword ptr [rip + 0x286241] ; add rsp, 8 ; ret
0x000000000013ac20 : mov rax, qword ptr [rip + 0x2862d9] ; add rsp, 8 ; ret
0x000000000013abc0 : mov rax, qword ptr [rip + 0x2863c1] ; add rsp, 8 ; ret
0x000000000013abf0 : mov rax, qword ptr [rip + 0x2863e9] ; add rsp, 8 ; ret
0x0000000000102eb7 : mov rax, qword ptr [rip + 0x2bf8ca] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bd495 : mov rax, qword ptr [rip + 0x30903c] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000084269 : mov rax, qword ptr [rip + 0x33cb58] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x0000000000145d1d : mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000203ea : mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000f1396 : mov rax, qword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13da
0x0000000000025845 : mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000ad1e0 : mov rax, qword ptr [rsp + 0x30] ; add rsp, 0x60 ; pop rbx ; pop rbp ; sub rax, r12 ; pop r12 ; ret
0x0000000000039276 : mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000001462d6 : mov rax, qword ptr [rsp + 0x38] ; jne 0x1462c3 ; add rsp, 0x48 ; ret
0x0000000000109d35 : mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba403 : mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000011bd68 : mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f1cf : mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b2a8 : mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000798b9 : mov rax, qword ptr [rsp + 8] ; cmp qword ptr [rax + 0x30], 0 ; je 0x798da ; add rsp, 0x38 ; ret
0x0000000000139e50 : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981b : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013999f : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000010422d : mov rax, qword ptr [rsp + 8] ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x0000000000131a80 : mov rax, qword ptr [rsp + 8] ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000ff3ef : mov rax, qword ptr [rsp - 0x50] ; ret
0x0000000000135ff7 : mov rax, qword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010bd22 : mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd83 : mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x00000000000a0f95 : mov rax, qword ptr fs:[rbp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000808fc : mov rax, r8 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012d7cc : mov rax, rbp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000004ab50 : mov rax, rbx ; add rsp, 0x440 ; pop rbx ; ret
0x000000000007c32d : mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ac37f : mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbc77 : mov rax, rdx ; add rsp, 0x18 ; ret
0x0000000000102d09 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x102d28 ; ret
0x000000000010937f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10939e ; ret
0x000000000010967f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10969e ; ret
0x000000000010970f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10972e ; ret
0x00000000001097cf : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x1097ee ; ret
0x0000000000109919 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109938 ; ret
0x0000000000109a29 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109a48 ; ret
0x0000000000109ab9 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109ad8 ; ret
0x0000000000109c9f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109cbe ; ret
0x0000000000109eff : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x109f1e ; ret
0x000000000010a54f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a56e ; ret
0x000000000010a5af : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0x10a5ce ; ret
0x00000000000cd299 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd2b8 ; ret
0x00000000000cd2f9 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xcd318 ; ret
0x00000000000f6e9f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6ebe ; ret
0x00000000000f6eff : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf6f1e ; ret
0x00000000000f8699 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf86b8 ; ret
0x00000000000f88b9 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf88d8 ; ret
0x00000000000f8919 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8938 ; ret
0x00000000000f8f49 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf8f68 ; ret
0x00000000000f9099 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xf90b8 ; ret
0x00000000000fcd99 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfcdb8 ; ret
0x00000000000fd89f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfd8be ; ret
0x00000000000fe5e9 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe608 ; ret
0x00000000000fe649 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe668 ; ret
0x00000000000fe6af : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe6ce ; ret
0x00000000000fe70f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfe72e ; ret
0x00000000000feb7f : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfeb9e ; ret
0x00000000000fed39 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfed58 ; ret
0x00000000000fedc9 : mov rax, rdx ; add rsp, 8 ; cmp rax, -0xfff ; jae 0xfede8 ; ret
0x0000000000080014 : mov rax, rdx ; add rsp, 8 ; ret
0x00000000000c9cf4 : mov rax, rsi ; add rsp, 8 ; ret
0x0000000000037b8a : mov rbp, qword ptr [rsp + 0x50] ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x0000000000079bf2 : mov rbp, rax ; add rsp, 0x18 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000e4c54 : mov rbp, rsi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x000000000010af88 : mov rbp, rsp ; lock cmpxchg qword ptr [rip + 0x2b628c], rdx ; je 0x10afa7 ; pop rbp ; ret
0x0000000000117663 : mov rbp, rsp ; pop rbp ; ret
0x00000000000fe083 : mov rbx, -1 ; add rsp, 0x60 ; mov rax, rbx ; pop rbx ; ret
0x000000000003a895 : mov rbx, qword ptr [rbp] ; test rbx, rbx ; jne 0x3a86f ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003a894 : mov rbx, qword ptr fs:[rbp] ; test rbx, rbx ; jne 0x3a870 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f4c1 : mov rbx, rax ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000006efde : mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000138472 : mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000013a72d : mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x0000000000135014 : mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134dfa : mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000010bd1d : mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd7e : mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x0000000000131b8d : mov rcx, qword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012fbe2 : mov rcx, qword ptr [rsp] ; call rcx
0x00000000000213dd : mov rcx, r12 ; push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000bb41b : mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e3 : mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c3 : mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000768cc : mov rcx, r14 ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000ad31a : mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000c24e2 : mov rdi, qword ptr [r12 + 0x68] ; or eax, 8 ; mov byte ptr [rsp + 0x79], al ; jmp 0xc2509
0x00000000000acc58 : mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x0000000000104232 : mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x000000000010431e : mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000003761c : mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000023a23 : mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238be : mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000c984c : mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039271 : mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000001236c0 : mov rdi, qword ptr [rsp + 0x28] ; call 0x1f9bf
0x00000000000241b6 : mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e7 : mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x0000000000023f81 : mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c43 : mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025350 : mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667f : mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000027dba : mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025ce1 : mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000025840 : mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000e7a16 : mov rdi, qword ptr [rsp + 0x78] ; call 0x1f9c5
0x000000000007da7a : mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000007dea0 : mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x000000000007d3a5 : mov rdi, qword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000e16a8 : mov rdi, qword ptr [rsp] ; lea rdx, qword ptr [rsp + 0x10] ; mov ecx, eax ; mov rsi, r13 ; call 0xdd950
0x000000000014616a : mov rdi, qword ptr [rsp] ; mov rax, qword ptr [rax + 0x128] ; jmp rax
0x0000000000135011 : mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134df7 : mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000012f0bd : mov rdi, r13 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000008417d : mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x000000000012eef5 : mov rdi, r15 ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x000000000013a96e : mov rdi, r15 ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x00000000001397c5 : mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x00000000001395d6 : mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x000000000012f197 : mov rdi, rbp ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013846f : mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000c519f : mov rdi, rbp ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913bd
0x000000000012ccc3 : mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x0000000000145d1a : mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbdf : mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000007518c : mov rdi, rcx ; sub r8, rsi ; mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913c0
0x00000000000715d3 : mov rdi, rsp ; call 0x4d895
0x000000000012df75 : mov rdi, rsp ; call rax
0x000000000013d250 : mov rdi, rsp ; call rdx
0x00000000000757b7 : mov rdx, qword ptr [r15 + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x00000000000203e7 : mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000012fe04 : mov rdx, qword ptr [rbx + 0x28] ; add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000007a34b : mov rdx, qword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x0000000000108c3f : mov rdx, qword ptr [rbx] ; mov qword ptr [rax], rdx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000db198 : mov rdx, qword ptr [rbx] ; test rdx, rdx ; jne 0xdb170 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008b890 : mov rdx, qword ptr [rip + 0x3356c1] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b610 : mov rdx, qword ptr [rip + 0x335941] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008b558 : mov rdx, qword ptr [rip + 0x3359f9] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x00000000001109ff : mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000001108fb : mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d3 : mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000c9847 : mov rdx, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024fae : mov rdx, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000146368 : mov rdx, qword ptr [rsp + 0x38] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000000238b4 : mov rdx, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db0 : mov rdx, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ac : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bcf : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c39 : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087160 : mov rdx, qword ptr [rsp + 0x68] ; call rax
0x0000000000088478 : mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391f0 : mov rdx, qword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f7 : mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x00000000000ad5e6 : mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad31d : mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000003864b : mov rdx, r13 ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x0000000000037616 : mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715cd : mov rdx, r13 ; mov rsi, r12 ; mov rdi, rsp ; call 0x4d89b
0x00000000000c51a2 : mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913ba
0x0000000000075192 : mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913ba
0x00000000000e163e : mov rdx, rbp ; mov ecx, eax ; mov rsi, r13 ; mov qword ptr [rsp + 8], r9 ; call 0xdd94f
0x00000000000213e2 : mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000013d244 : mov rdx, rdi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000010431b : mov rsi, qword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000007da75 : mov rsi, qword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x000000000003864e : mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x000000000012e717 : mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x0000000000088229 : mov rsi, qword ptr [rsp + 0x18] ; add rsp, 8 ; mov rdi, rbp ; pop rbx ; pop rbp ; jmp rax
0x0000000000086a88 : mov rsi, qword ptr [rsp + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x00000000000213e5 : mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000ad45c : mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71c : mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000023a1e : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238b9 : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000877f0 : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x000000000012fbd7 : mov rsi, qword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013846a : mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000241b1 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e2 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc19f : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df2 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000023f7c : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3e : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534b : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667a : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000086e00 : mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000027db5 : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdc : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583b : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x000000000013500c : mov rsi, qword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000110900 : mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d8 : mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x0000000000037619 : mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000715d0 : mov rsi, r12 ; mov rdi, rsp ; call 0x4d898
0x00000000000acd8b : mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000e1643 : mov rsi, r13 ; mov qword ptr [rsp + 8], r9 ; call 0xdd94a
0x000000000012ccc0 : mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x00000000000acc55 : mov rsi, rbp ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000c519c : mov rsi, rbx ; mov rdi, rbp ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913c0
0x0000000000146167 : mov rsi, rdi ; mov rdi, qword ptr [rsp] ; mov rax, qword ptr [rax + 0x128] ; jmp rax
0x000000000013d46c : mov rsi, rsp ; call qword ptr [rax]
0x0000000000130e24 : mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x0000000000035617 : mov rsi, rsp ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000355e9 : mov rsp, r8 ; mov rbp, r9 ; nop ; jmp rdx
0x000000000006e26d : mov rsp, rbx ; lea rsp, qword ptr [rbp - 0x18] ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000013ad1b : mov word ptr [rax + rdx*8 - 4], cx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000194dd5 : mov word ptr [rax], es ; add byte ptr [rsp + rdi*2 - 0x73330016], al ; add byte ptr [rax], al ; xchg eax, esp ; jl 0x194ddb ; jmp rsp
0x00000000000bfdf1 : mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000012f1cb : mov word ptr [rbx + 2], ax ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d724 : mov word ptr [rbx], ax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x000000000013ad6f : mov word ptr [rcx + 4], si ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000196ca4 : mov word ptr [rcx + rax], fs ; xor al, 0x68 ; cmc ; call rsp
0x0000000000196b04 : mov word ptr [rcx + rax], ss ; push rdx ; hlt ; call rsp
0x000000000013dec3 : mov word ptr [rcx - 0x75], cs ; and al, 8 ; lea rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; call qword ptr [rax]
0x00000000001441e7 : mov word ptr [rip + 0x281f32], ax ; mov eax, 1 ; add rsp, 8 ; ret
0x00000000000b73da : mov word ptr [rsp + rax*4], fs ; add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor al, 0x83 ; sub r10, rax ; jmp 0xb740e
0x0000000000035324 : mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; fstp xword ptr [rdi] ; ret
0x0000000000035302 : mov word ptr [rsp - 0x10], ax ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000353ed : mov word ptr [rsp - 0x10], ax ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x00000000000354a4 : mov word ptr [rsp - 2], di ; fldcw word ptr [rsp - 2] ; ret
0x000000000013a143 : movabs al, byte ptr [0x415d5bc031000000] ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000087157 : movabs byte ptr [0x90fffffe8ce90000], al ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x00000000000b67fc : movabs dword ptr [0x415d5bffffffffb8], eax ; pop rsp ; pop r14 ; ret
0x0000000000199099 : movabs dword ptr [0xa334000241bcfffa], eax ; cli ; call rsp
0x000000000007a71b : movabs eax, dword ptr [0x58d48c085003437] ; fdivr dword ptr [rsp + rsi] ; add byte ptr [rax + 0xf], cl ; ret 0x8948
0x0000000000194045 : movabs eax, dword ptr [0xa054fffca0c4fffc] ; cld ; jmp rsp
0x0000000000199791 : movabs eax, dword ptr [0xa164000116ccfffd] ; std ; jmp rsp
0x0000000000195105 : movabs eax, dword ptr [0xa1c4ffec23040000] ; add byte ptr [rax], al ; xchg eax, esp ; and ebp, esp ; jmp rsp
0x000000000016c5a8 : movabs rsp, 0xf66d1ef0f66bcb2 ; cmp byte ptr [rdi], dl ; ret 0x830f
0x0000000000198570 : movsb byte ptr [rdi], byte ptr [rsi] ; add edi, ecx ; jmp rsp
0x00000000001976c8 : movsb byte ptr [rdi], byte ptr [rsi] ; and al, 0xf7 ; jmp rsp
0x0000000000197e40 : movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x00000000000fdbf1 : movsb byte ptr [rdi], byte ptr [rsi] ; cmp dword ptr [rsp - 0x2c], ecx ; je 0xfdc37 ; mov dword ptr fs:[r8], r12d ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000194da0 : movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d90 ; call rsp
0x0000000000194b3c : movsb byte ptr [rdi], byte ptr [rsi] ; jg 0x194b46 ; add ah, ah ; sub ebp, edx ; call rsp
0x0000000000197114 : movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x19711f ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001966d8 : movsb byte ptr [rdi], byte ptr [rsi] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000198948 : movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000195104 : movsb byte ptr [rdi], byte ptr [rsi] ; movabs eax, dword ptr [0xa1c4ffec23040000] ; add byte ptr [rax], al ; xchg eax, esp ; and ebp, esp ; jmp rsp
0x0000000000194920 : movsb byte ptr [rdi], byte ptr [rsi] ; or ch, dl ; call rsp
0x0000000000196a8c : movsb byte ptr [rdi], byte ptr [rsi] ; push rax ; add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x00000000001993c4 : movsb byte ptr [rdi], byte ptr [rsi] ; push rsp ; add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x000000000019825c : movsb byte ptr [rdi], byte ptr [rsi] ; salc ; add dword ptr [rax], eax ; in al, 0x6a ; clc ; jmp rsp
0x0000000000196164 : movsb byte ptr [rdi], byte ptr [rsi] ; sgdt ptr [rax] ; push rsp ; ret
0x0000000000198d5c : movsb byte ptr [rdi], byte ptr [rsi] ; sub al, byte ptr [rdx] ; add byte ptr [rsp + rdx*2 - 6], ah ; jmp rsp
0x0000000000198680 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a0 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x00000000001990d9 : movsd dword ptr [rdi], dword ptr [rsi] ; cli ; jmp rsp
0x0000000000144b4b : movsd dword ptr [rdi], dword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b3e0 : movsd qword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b258 : movsd xmm0, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000bbce8 : movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x000000000004a653 : movsd xmm0, qword ptr [rsp - 8] ; ret
0x0000000000144b4a : movsq qword ptr [rdi], qword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000004a60d : movss xmm0, dword ptr [rsp - 4] ; ret
0x000000000011074f : movsx eax, bl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000b73d6 : movsxd r10, ebp ; mov ecx, dword ptr [rsp + 0x84] ; lea rsi, qword ptr [rbx + rax*4] ; sub r10, rax ; jmp 0xb7412
0x000000000003b4a5 : movsxd rax, dword ptr [rbx + 2] ; mov qword ptr [rbp], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000e4c50 : movsxd rax, dword ptr [rdx + rax*4] ; mov rbp, rsi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x000000000003adba : movsxd rax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000187e30 : movsxd rbx, edi ; cmc ; call rsp
0x0000000000124709 : movsxd rcx, ecx ; idiv edi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000b73d7 : movsxd rdx, ebp ; mov ecx, dword ptr [rsp + 0x84] ; lea rsi, qword ptr [rbx + rax*4] ; sub r10, rax ; jmp 0xb7411
0x0000000000197ac9 : movsxd rsi, edi ; call rsp
0x00000000001a9859 : movsxd rsp, edi ; jmp qword ptr [rbx]
0x000000000003b259 : movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000bbce9 : movups xmm0, xmmword ptr [rsp - 0x10] ; ret
0x000000000004a60e : movups xmm0, xmmword ptr [rsp - 4] ; ret
0x000000000004a654 : movups xmm0, xmmword ptr [rsp - 8] ; ret
0x000000000003b3e1 : movups xmmword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013ebf1 : movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x000000000004b233 : movzx eax, ah ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000130dad : movzx eax, al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000130d47 : movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e12b : movzx eax, al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010a01d : movzx eax, al ; add rsp, 0x90 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001308cc : movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007e4ab : movzx eax, byte ptr [rax - 1] ; and dword ptr [rbx], 0xffffffef ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007b6bc : movzx eax, byte ptr [rax] ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007d479 : movzx eax, byte ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004b232 : movzx eax, r12b ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013962f : neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139c7a : neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007c47c : neg eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000010d762 : neg eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f8d49 : neg eax ; cmp dword ptr [rsp + 0x10], 2 ; cmovne eax, edx ; add rsp, 0x60 ; pop rbx ; ret
0x00000000000f8ca1 : neg eax ; cmp dword ptr [rsp - 0x50], 2 ; cmovne eax, edx ; ret
0x000000000011751b : neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000cf002 : neg eax ; or rax, 0x31069 ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000008a841 : neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000045f11 : neg edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000f813d : neg edx ; mov dword ptr fs:[rax], edx ; add rsp, 0x10 ; mov eax, 0xffffffff ; pop rbx ; ret
0x00000000000cf001 : neg rax ; or rax, 0x31069 ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x0000000000102afe : nop ; add byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; ret
0x00000000000ba40f : nop ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x000000000012f38f : nop ; add rsp, 0x18 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011228f : nop ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000a105f : nop ; add rsp, 8 ; mov rax, rdi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000215af : nop ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007966f : nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000196b89 : nop ; hlt ; call rsp
0x00000000000a085f : nop ; mov eax, dword ptr [rsp + 0x10] ; mov word ptr [rdi + 4], r11w ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 6] ; ret
0x000000000007045f : nop ; mov eax, dword ptr [rsp] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fcd2f : nop ; mov rax, qword ptr [r12 + 0x10] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013daff : nop ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000013abef : nop ; mov rax, qword ptr [rip + 0x2863e9] ; add rsp, 8 ; ret
0x000000000008b60f : nop ; mov rdx, qword ptr [rip + 0x335941] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008715f : nop ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x0000000000193e94 : nop ; pop rsp ; cld ; call qword ptr [rax]
0x0000000000193e40 : nop ; push rsp ; cld ; call qword ptr [rax]
0x00000000000bd499 : nop ; xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010e2bf : nop ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bbef : nop ; xor ebp, ebp ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000048543 : nop dword ptr [rax + rax] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bccb : nop dword ptr [rax + rax] ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013d7fb : nop dword ptr [rax + rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044b : nop dword ptr [rax + rax] ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000136413 : nop dword ptr [rax + rax] ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012d743 : nop dword ptr [rax + rax] ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x000000000008d7b3 : nop dword ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000075ed8 : nop dword ptr [rax + rax] ; mov eax, dword ptr [rdx] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000cd24b : nop dword ptr [rax + rax] ; mov eax, dword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000130e1b : nop dword ptr [rax + rax] ; mov rax, qword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x000000000013d463 : nop dword ptr [rax + rax] ; mov rax, qword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x000000000013abbb : nop dword ptr [rax + rax] ; mov rax, qword ptr [rip + 0x2863c1] ; add rsp, 8 ; ret
0x0000000000086a83 : nop dword ptr [rax + rax] ; mov rsi, qword ptr [rsp + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; jmp rax
0x0000000000086df8 : nop dword ptr [rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000117658 : nop dword ptr [rax + rax] ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x0000000000146a53 : nop dword ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3b : nop dword ptr [rax + rax] ; xor eax, eax ; add rsp, 8 ; ret
0x0000000000146fdc : nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x000000000013d879 : nop dword ptr [rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000071845 : nop dword ptr [rax] ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x00000000001726c5 : nop dword ptr [rax] ; add rsp, 8 ; ret
0x00000000001307f4 : nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000a083c : nop dword ptr [rax] ; mov eax, dword ptr [rsp + 0x10] ; mov dword ptr [rdi], eax ; lea rax, qword ptr [rdi + 4] ; ret
0x000000000013dc3d : nop dword ptr [rax] ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000130db9 : nop dword ptr [rax] ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x00000000001236b9 : nop dword ptr [rax] ; mov rdi, qword ptr [rsp + 0x28] ; call 0x1f9c6
0x000000000008b554 : nop dword ptr [rax] ; mov rdx, qword ptr [rip + 0x3359f9] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x00000000000877ec : nop dword ptr [rax] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x00000000000c7f51 : nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121231 : nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000086df7 : nop dword ptr cs:[rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000048542 : nop word ptr [rax + rax] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013d7fa : nop word ptr [rax + rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000cd24a : nop word ptr [rax + rax] ; mov eax, dword ptr [rsp] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000117657 : nop word ptr [rax + rax] ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x0000000000146a52 : nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3a : nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 8 ; ret
0x0000000000086df6 : nop word ptr cs:[rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x000000000013ed51 : not eax ; add rsp, 8 ; shr eax, 0x1f ; ret
0x0000000000088d7c : or al, 0 ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000122f3a : or al, 0 ; add byte ptr [rax], al ; add rsp, 0x18 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x000000000011058a : or al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fdd51 : or al, 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x0000000000055a8b : or al, 0 ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000047ee0 : or al, 0 ; add rsp, 0x80 ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x0000000000085a30 : or al, 0x1e ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x000000000007d3a4 : or al, 0x48 ; mov edi, dword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000bfdf0 : or al, 0x66 ; mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013e4c3 : or al, 0x66 ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x00000000000fdf36 : or al, 0x85 ; sar byte ptr [rax + 0xd], cl ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd01c : or al, 0xe8 ; scasb al, byte ptr [rdi] ; popfq ; add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001311fd : or al, 0xf ; enter 0x389, -0x48 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139df6 : or al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x14] ; call qword ptr [r10]
0x000000000007154c : or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x000000000006c9fe : or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000000724a5 : or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, r8d ; pop rbx ; ret
0x000000000007011d : or al, byte ptr [rax] ; add rsp, 0x80 ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006edf2 : or al, byte ptr [rax] ; add rsp, 0x80 ; pop rbx ; mov rax, rdx ; pop rbp ; pop r12 ; ret
0x000000000006c456 : or al, byte ptr [rax] ; add rsp, 0x80 ; ret
0x00000000001988d5 : or al, byte ptr [rdx] ; add ah, dh ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000003b2cf : or al, ch ; add qword ptr [r8], rax ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x000000000012fe8b : or al, ch ; call rsp
0x000000000003b31f : or al, ch ; imul eax, dword ptr [rcx], 0 ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x18 ; ret
0x00000000000ffc08 : or al, ch ; loop 0xffc02 ; idiv bh ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000053726 : or al, ch ; push rsp ; ret 0xfffc
0x00000000001039cf : or al, ch ; sbb eax, dword ptr [rcx] ; add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000003b27f : or al, ch ; sti ; add byte ptr [rax], al ; add dl, dh ; movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000013e4e7 : or bh, bh ; push rax ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e140 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e1b0 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e210 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e280 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e0 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e350 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a0 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e410 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013ac4e : or bl, al ; mov rax, qword ptr [rip + 0x286241] ; add rsp, 8 ; ret
0x000000000013ac1e : or bl, al ; mov rax, qword ptr [rip + 0x2862d9] ; add rsp, 8 ; ret
0x000000000013abec : or bl, al ; nop ; mov rax, qword ptr [rip + 0x2863e9] ; add rsp, 8 ; ret
0x000000000013dd82 : or byte ptr [r9 + r9*4 + 0x44], r9b ; and al, 8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x00000000000f6f4a : or byte ptr [r9 - 0x2dceffa3], r9b ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000005c0d0 : or byte ptr [rax - 0x73], cl ; push rax ; or byte ptr [rcx - 0x77], cl ; push rsp ; and al, 8 ; jmp 0x5c0a9
0x000000000004a1b4 : or byte ptr [rax - 0x73], cl ; push rsi ; add dword ptr [rcx - 0x77], ecx ; push rsp ; ret 0x4808
0x000000000010bd21 : or byte ptr [rax - 0x75], cl ; add al, 0x24 ; add rsp, 0x38 ; ret
0x000000000010bd82 : or byte ptr [rax - 0x75], cl ; add al, 0x24 ; add rsp, 0x40 ; ret
0x0000000000100ffe : or byte ptr [rax - 0x77], cl ; adc eax, 0x2c30ea ; add rsp, 8 ; ret
0x000000000006e519 : or byte ptr [rax - 0x77], cl ; fucompi st(0) ; xchg eax, esi ; adc al, 0xfb ; dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x000000000012ae88 : or byte ptr [rax - 0x7b], cl ; push qword ptr [rbp - 0x16] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001acaa6 : or byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000000ffbeb : or byte ptr [rax], al ; add byte ptr [rax], 0 ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000100d40 : or byte ptr [rax], al ; add byte ptr [rax], 0 ; mov eax, 1 ; add rsp, 8 ; ret
0x00000000000e0b24 : or byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000fdd4a : or byte ptr [rax], al ; add byte ptr [rax], al ; add dh, al ; or al, 0 ; add rsp, 0x30 ; mov eax, ebx ; pop rbx ; ret
0x00000000001185e4 : or byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x0000000000139d02 : or byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, rax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [r10]
0x00000000000334eb : or byte ptr [rax], al ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000080be8 : or byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013972a : or byte ptr [rax], al ; setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x000000000013d453 : or byte ptr [rbp - 0x3f6af040], al ; add rsp, 0x18 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000000203e2 : or byte ptr [rbx + 0x4814247c], cl ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000557c9 : or byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; ret
0x00000000000f709f : or byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000070a7b : or byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; ret
0x000000000006f353 : or byte ptr [rcx + 0x415d5bf0], cl ; pop rsp ; pop r13 ; ret
0x000000000013a728 : or byte ptr [rcx + 0x56], al ; push r13 ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x000000000013dd83 : or byte ptr [rcx + rcx*4 + 0x44], cl ; and al, 8 ; lea rsi, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000008417c : or byte ptr [rcx + rcx*4 - 9], cl ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x00000000000f6f4b : or byte ptr [rcx - 0x2dceffa3], cl ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000360c7 : or byte ptr [rcx - 0x3fcef7ad], cl ; add rsp, 0x140 ; pop rbx ; ret
0x0000000000124b0e : or byte ptr [rcx - 0x3fcefbbd], cl ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000010c6c2 : or byte ptr [rcx - 0x75], cl ; lds r8d, ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000005c0d4 : or byte ptr [rcx - 0x77], cl ; push rsp ; and al, 8 ; jmp 0x5c0a5
0x000000000002bba1 : or byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000002268a : or byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x00000000000e901b : or byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000007d660 : or byte ptr [rdi], cl ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000019caad : or byte ptr [rdx + 0xb], cl ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000006f02f : or byte ptr [rsi + rbx + 0x48], dh ; lea esi, dword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000000c082a : or byte ptr [rsp + 0x78], 2 ; jmp 0xc05b3
0x0000000000193804 : or byte ptr [rsp + rdi*8 - 1], 0x80 ; cld ; inc dword ptr [rax + 0x10fffc50] ; cld ; call rax
0x0000000000002fa0 : or ch, byte ptr [rsi] ; ficomp dword ptr [rbx + 0xb886fae] ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000194921 : or ch, dl ; call rsp
0x00000000000bfdec : or cl, byte ptr [rbx + 0x660c2444] ; mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000019caab : or cl, byte ptr [rsi] ; or byte ptr [rdx + 0xb], cl ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000001a58a1 : or dh, al ; call rsp
0x00000000000d8091 : or dh, byte ptr [rsp + rbx*2 + 0x48] ; add esp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007c879 : or dh, byte ptr [rsp + rdi*2 + 0x40] ; movzx eax, ch ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000036c9c : or dl, bh ; je 0x36cbd ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x0000000000036dfe : or dl, bh ; je 0x36e1d ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x00000000000ffbea : or dword ptr [rax], 0x8000 ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000100d3f : or dword ptr [rax], 0x8000 ; mov eax, 1 ; add rsp, 8 ; ret
0x000000000006caf3 : or dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x00000000000f7015 : or dword ptr [rax], eax ; add byte ptr [rax], al ; jne 0xf7036 ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000076e0d : or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x000000000007723d : or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x0000000000077996 : or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x0000000000086cc8 : or dword ptr [rax], eax ; add rsp, 0x80 ; mov rax, rbx ; pop rbx ; ret
0x0000000000077ee8 : or dword ptr [rax], eax ; add rsp, 0x80 ; pop rbx ; ret
0x0000000000077151 : or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x0000000000056763 : or dword ptr [rax], ebx ; add al, byte ptr [rax] ; add rsp, 0xd8 ; ret
0x000000000006eff3 : or dword ptr [rbx], 0x20 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000075ea1 : or dword ptr [rbx], 0x20 ; mov eax, 0xffffffff ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000012aa21 : or dword ptr [rip + 0x29b03c], 2 ; add rsp, 8 ; ret
0x000000000010794c : or eax, 0 ; add byte ptr [rax], al ; add rsp, 8 ; mov eax, 9 ; pop rbx ; pop rbp ; ret
0x00000000001463f2 : or eax, 0x1f247c80 ; add byte ptr [rbp + 0x16], dh ; add rsp, 0x38 ; ret
0x00000000000cf005 : or eax, 0x31069 ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x00000000000353e8 : or eax, 0x3ffe ; mov word ptr [rsp - 0x10], ax ; mov dword ptr [rdi], edx ; fld xword ptr [rsp - 0x18] ; ret
0x000000000010347e : or eax, 0x415d002c ; pop rsp ; ret
0x0000000000139427 : or eax, 0x48000001 ; mov eax, dword ptr [rbx] ; add rsp, 0xa8 ; pop rbx ; pop rbp ; ret
0x000000000012f24f : or eax, 0x4c0000e0 ; lea ecx, dword ptr [rsp + 0x18] ; call qword ptr [rax]
0x0000000000199399 : or eax, 0x5384fffb ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x00000000000c24e7 : or eax, 8 ; mov byte ptr [rsp + 0x79], al ; jmp 0xc2504
0x00000000001a9dab : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rsp + rax + 1], bl ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x00000000001af87c : or eax, dword ptr [rax] ; add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x000000000019f6a4 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rcx + 0x12700000], dl ; in eax, dx ; call qword ptr [rax]
0x00000000001a724c : or eax, dword ptr [rax] ; add byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x000000000010a4f3 : or eax, ebx ; add rsp, 0x90 ; pop rbx ; ret
0x000000000003b446 : or eax, ecx ; cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000035223 : or eax, edx ; mov dword ptr [rsp + 0x10], eax ; fld xword ptr [rsp + 8] ; ret
0x000000000010a4f1 : or eax, edx ; or eax, ebx ; add rsp, 0x90 ; pop rbx ; ret
0x00000000001192eb : or ebp, edx ; mov dword ptr [rbx], ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010e3dc : or ebx, dword ptr [rbx - 0x77] ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x000000000013ac44 : or ecx, dword ptr [rax + 5] ; test al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000006f044 : or ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; ret
0x00000000000354a2 : or edi, eax ; mov word ptr [rsp - 2], di ; fldcw word ptr [rsp - 2] ; ret
0x000000000019caaf : or edx, dword ptr [rax + rax] ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000004a607 : or edx, eax ; mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
0x000000000004a64c : or edx, eax ; mov qword ptr [rsp - 8], rdx ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000004a649 : or edx, ecx ; or rdx, rax ; mov qword ptr [rsp - 8], rdx ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000004a605 : or edx, esi ; or edx, eax ; mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
0x000000000006eff4 : or esp, dword ptr [rax] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000075ea2 : or esp, dword ptr [rax] ; mov eax, 0xffffffff ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000002fa7 : or esp, dword ptr [rdx] ; js 0x2f61 ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x000000000013e4e6 : or r15b, r15b ; push rax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000072637 : or r8b, byte ptr [r8] ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x00000000001af87b : or r8d, dword ptr [r8] ; add byte ptr [rax], al ; pop rsp ; add byte ptr [rax], al ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x00000000001a724b : or r8d, dword ptr [r8] ; add byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x000000000019f6a3 : or r8d, dword ptr [rax] ; add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rcx + 0x12700000], dl ; in eax, dx ; call qword ptr [rax]
0x00000000000cf004 : or rax, 0x31069 ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000019caae : or rdx, qword ptr [rax + r8] ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000004a64b : or rdx, rax ; mov qword ptr [rsp - 8], rdx ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x0000000000194529 : out -0x18, eax ; jmp rsp
0x00000000001af889 : out -0xb, eax ; jmp rsp
0x000000000002c424 : out 0x10, al ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000010c5e2 : out 0x40, al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003761b : out 0x48, al ; mov edi, dword ptr [rsp + 0x18] ; call r15
0x0000000000135013 : out 0x48, eax ; mov ecx, dword ptr [rsp + 0x28] ; call rcx
0x0000000000134df9 : out 0x48, eax ; mov ecx, dword ptr [rsp + 0x30] ; call rcx
0x0000000000187df4 : out 0xb6, al ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x0000000000198485 : out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x00000000001433c6 : out 8, al ; add byte ptr [rax], al ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x0000000000198565 : out dx, al ; add dword ptr [rax], eax ; add edi, ecx ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x000000000019856d : out dx, al ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; add edi, ecx ; jmp rsp
0x000000000019566a : out dx, al ; call rsp
0x0000000000195a2a : out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x000000000019592a : out dx, al ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x00000000001955b2 : out dx, al ; jmp rsp
0x000000000019584a : out dx, al ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x000000000019570a : out dx, al ; lcall ptr [rsp + rcx*8 + 0x3f840000] ; out dx, al ; jmp rsp
0x00000000000acd8d : out dx, al ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x0000000000195662 : out dx, al ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x00000000000e1645 : out dx, al ; mov qword ptr [rsp + 8], r9 ; call 0xdd948
0x00000000000acc57 : out dx, al ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x0000000000039270 : out dx, al ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000047edf : out dx, al ; or al, 0 ; add rsp, 0x80 ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x0000000000077ee7 : out dx, al ; or dword ptr [rax], eax ; add rsp, 0x80 ; pop rbx ; ret
0x000000000019572a : out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x000000000019589a : out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x000000000007430e : out dx, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000007436a : out dx, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195c6a : out dx, eax ; call rsp
0x0000000000126ca6 : out dx, eax ; dec dword ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000122e5c : out dx, eax ; dec dword ptr [rax - 0x77] ; add eax, 0x29f9db ; add rsp, 8 ; ret
0x0000000000195e3a : out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000195f7a : out dx, eax ; dec esp ; add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000195e72 : out dx, eax ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000195e12 : out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195d42 : out dx, eax ; inc dword ptr [rax + rdi*8 + 0x6a140000] ; out dx, eax ; jmp rsp
0x0000000000195ed2 : out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000195d2a : out dx, eax ; jmp rsp
0x0000000000195d82 : out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000012f199 : out dx, eax ; lea r9, qword ptr [rsp + 0x18] ; call qword ptr [rax]
0x000000000012f0bf : out dx, eax ; lea r9, qword ptr [rsp + 0x1c] ; call qword ptr [rax]
0x0000000000138471 : out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000c51a1 : out dx, eax ; mov rdx, r14 ; mov qword ptr [rsp + 0x10], r11 ; call 0x913bb
0x0000000000077dac : out dx, eax ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x0000000000195d22 : out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x00000000000d9b3f : outsb dx, byte ptr [rsi] ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000002fa5 : outsd dx, dword ptr [rsi] ; mov byte ptr [rbx], cl ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x000000000016c5a7 : outsd dx, dword ptr [rsi] ; movabs rsp, 0xf66d1ef0f66bcb2 ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000003549d : pcmpgtd mm4, qword ptr [rip - 0x38f60f40] ; mov word ptr [rsp - 2], di ; fldcw word ptr [rsp - 2] ; ret
0x0000000000081311 : pop r8 ; add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000130f0b : pop r8 ; mov esi, edx ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008b613 : pop r9 ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000019947d : pop rax ; add al, byte ptr [rax] ; and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x000000000013a395 : pop rax ; add dword ptr [rax], eax ; add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x000000000010153c : pop rax ; add dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000013cfef : pop rax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013e147 : pop rax ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000111809 : pop rax ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000081312 : pop rax ; add rsp, 0x78 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001967a9 : pop rax ; call rsp
0x0000000000198191 : pop rax ; clc ; call rsp
0x0000000000130f0c : pop rax ; mov esi, edx ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007154b : pop rax ; or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, edx ; pop rbx ; ret
0x000000000008426c : pop rax ; retf ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x000000000006b8b4 : pop rbp ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x0000000000187e24 : pop rbp ; fdivrp st(5) ; call rsp
0x000000000014ecff : pop rbp ; pop rsp ; add al, byte ptr [rax] ; mov ecx, dword ptr [rdx + rcx*4] ; mov eax, dword ptr [rdx + rax*4] ; sub eax, ecx ; ret
0x0000000000196b7d : pop rcx ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000196b85 : pop rcx ; add dword ptr [rax], eax ; nop ; hlt ; call rsp
0x000000000013d40e : pop rcx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000012f0d6 : pop rcx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000d65b1 : pop rcx ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000034e1b : pop rcx ; sar byte ptr [rax], 0 ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x000000000008b55c : pop rcx ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x00000000001af885 : pop rdi ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x000000000012f0d5 : pop rdx ; pop rcx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000d65b0 : pop rdx ; pop rcx ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000013a391 : pop rsi ; add rsp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000793b9 : pop rsi ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000196479 : pop rsi ; jmp rsp
0x0000000000196471 : pop rsi ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000198709 : pop rsi ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x000000000014a080 : pop rsp ; adc al, byte ptr [rax] ; add byte ptr [rax - 0x7d], cl ; ret 0xe910
0x00000000001a9db4 : pop rsp ; add al, 1 ; add byte ptr [rax + 0x36], ch ; call qword ptr [rcx]
0x0000000000149534 : pop rsp ; add al, byte ptr [rax] ; add byte ptr [rax - 0x7d], cl ; ret 0xeb10
0x0000000000085eb7 : pop rsp ; add al, byte ptr [rax] ; add byte ptr [rcx - 0xa], al ; ret 0xf01
0x000000000014ed00 : pop rsp ; add al, byte ptr [rax] ; mov ecx, dword ptr [rdx + rcx*4] ; mov eax, dword ptr [rdx + rax*4] ; sub eax, ecx ; ret
0x000000000014eccc : pop rsp ; add al, byte ptr [rax] ; mov edx, dword ptr [rcx + rdx*4] ; mov eax, dword ptr [rcx + rax*4] ; sub eax, edx ; ret
0x00000000001a3c60 : pop rsp ; add byte ptr [rax], al ; add byte ptr [rbx], cl ; add byte ptr [rax], al ; pop rax ; outsd dx, dword ptr [rsi] ; out dx, al ; jmp qword ptr [rdi]
0x00000000001af880 : pop rsp ; add byte ptr [rax], al ; add byte ptr [rdi + rbx*2], ch ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x00000000001a1b88 : pop rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rax*4], dh ; add byte ptr [rax], al ; nop ; xchg eax, esp ; in eax, dx ; call qword ptr [rcx]
0x000000000003b3da : pop rsp ; add eax, 0x1576e0 ; movsd qword ptr [rbx], xmm0 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000014ad80 : pop rsp ; add eax, 0x83480000 ; ret 0xe910
0x00000000000d8093 : pop rsp ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c51a7 : pop rsp ; and al, 0x10 ; call 0x913b5
0x0000000000083f45 : pop rsp ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x00000000000842bb : pop rsp ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000783d0 : pop rsp ; and al, 0x30 ; mov qword ptr [rbp + 0x18], rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000bbce5 : pop rsp ; and al, 0xf0 ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
0x0000000000080a69 : pop rsp ; and al, 8 ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000193e55 : pop rsp ; cld ; call qword ptr [rax + 0x10fffc5d]
0x0000000000193e95 : pop rsp ; cld ; call qword ptr [rax]
0x0000000000121a08 : pop rsp ; cmp al, 0x2a ; add byte ptr [rax - 0x7d], cl ; ret
0x0000000000073474 : pop rsp ; jmp rax
0x0000000000088e55 : pop rsp ; jmp rcx
0x000000000012de7e : pop rsp ; lea rsi, qword ptr [rdi + 0x48] ; mov rdi, rax ; mov rcx, qword ptr [rcx + 0x18] ; jmp rcx
0x00000000000ff8e9 : pop rsp ; mov dword ptr [rip + 0x2c46d4], eax ; lea rax, qword ptr [rip + 0x2c46a1] ; ret
0x00000000000ff719 : pop rsp ; mov dword ptr [rip + 0x2c48a4], eax ; lea rax, qword ptr [rip + 0x2c4871] ; ret
0x0000000000070bab : pop rsp ; mov rax, qword ptr [rbp + 0x48] ; add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x0000000000147f10 : pop rsp ; or byte ptr [rax], al ; add byte ptr [rax - 0x7d], cl ; ret 0xeb10
0x0000000000070ec9 : pop rsp ; pop r13 ; jmp rax
0x0000000000042525 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; fmul st(0) ; ret
0x000000000004249d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; fmulp st(1) ; ret
0x0000000000105539 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; jmp rax
0x0000000000020a02 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000001fd74 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000001fcb9 : pop rsp ; pop r13 ; pop r14 ; ret
0x000000000006e276 : pop rsp ; pop r13 ; pop rbp ; ret
0x000000000001fb99 : pop rsp ; pop r13 ; ret
0x00000000000b6805 : pop rsp ; pop r14 ; ret
0x0000000000039b47 : pop rsp ; pop rbp ; ret
0x000000000007cee4 : pop rsp ; push -0x7bf0ffcc ; ret 0
0x0000000000003848 : pop rsp ; ret
0x00000000001955bc : pop rsp ; ret 0
0x000000000000319d : pop rsp ; ret 0x52c0
0x0000000000197e6c : pop rsp ; ret 1
0x00000000001a64b4 : pop rsp ; retf ; add byte ptr [rax], al ; sub byte ptr [rdi - 0x10], dh ; call qword ptr [rdx]
0x00000000001869c0 : pop rsp ; scasb al, byte ptr [rdi] ; inc dword ptr [rdx] ; sahf ; jmp rdx
0x00000000001a92b4 : pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9253 ; call rbx
0x00000000000fb184 : pop rsp ; sub al, 0 ; mov dword ptr fs:[rax], 0x16 ; mov eax, 0xffffffff ; ret
0x0000000000034175 : pop rsp ; xchg eax, ecx ; add al, 0x75 ; out 0x41, al ; mov eax, dword ptr [rcx + rdx*4 + 8] ; add rax, qword ptr [rdi + 0x20] ; ret
0x0000000000100c64 : pop rsp ; xor al, 0x2c ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx + 0x5d] ; pop r12 ; ret
0x000000000019cab4 : pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000000cd0bb : popfq ; add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd01f : popfq ; add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000194069 : popfq ; cld ; call rsp
0x0000000000194065 : popfq ; cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x00000000001963b1 : popfq ; int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x00000000001963b9 : popfq ; int1 ; jmp rsp
0x00000000000ad19a : push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000213e0 : push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000f7044 : push 0x4538908 ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000195d49 : push 0xef ; jmp rsp
0x0000000000198261 : push 0xf8 ; jmp rsp
0x0000000000198731 : push 0xf9 ; jmp rsp
0x0000000000198729 : push 0xf9 ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x00000000000ad107 : push 1 ; push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad195 : push 1 ; xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad109 : push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000019814b : push qword ptr [rax + rdx*8 + 0x54240001] ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000187e4b : push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e47 : push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000195a23 : push qword ptr [rax] ; add ah, dh ; pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x0000000000121a67 : push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000145875 : push qword ptr [rbp + 5] ; mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000194063 : push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x000000000019572b : push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x0000000000195e0b : push qword ptr [rbp + rdi*8 - 0x6e4c0000] ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x000000000019589b : push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x000000000003b018 : push qword ptr [rbp - 0x13] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012ae8b : push qword ptr [rbp - 0x16] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007e4f0 : push qword ptr [rbp - 0x44] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000195f73 : push qword ptr [rbx + rax - 0x2b9bffff] ; out dx, eax ; dec esp ; add eax, dword ptr [rcx] ; add byte ptr [rsp + rdx*8 - 0x11], dh ; jmp rsp
0x0000000000074309 : push qword ptr [rbx + rax - 0x7d] ; and ebp, edi ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000074365 : push qword ptr [rbx + rax - 0x7d] ; and ebp, edi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000006f042 : push qword ptr [rbx + rcx + 0x48] ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000199703 : push qword ptr [rbx + rdx - 0x61cbffff] ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000199393 : push qword ptr [rbx + rdx*2] ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000199203 : push qword ptr [rcx + rcx*2 - 0x288bfffe] ; cli ; jmp rsp
0x000000000019800b : push qword ptr [rcx + rcx*8 + 0x3b840001] ; clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x0000000000196713 : push qword ptr [rcx + rdi + 1] ; add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000019872b : push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x00000000000fc50c : push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000013ddb7 : push qword ptr [rcx] ; rol byte ptr [rcx - 1], 0xd0 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000135009 : push qword ptr [rcx] ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000013dd6b : push qword ptr [rcx] ; sar bh, 0xd1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000036f38 : push qword ptr [rdi + 0x15] ; add rsp, 0x88 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f8d1c : push qword ptr [rdi + 0x41] ; add rsp, 0x60 ; pop rbx ; ret
0x0000000000196473 : push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x00000000000fce02 : push qword ptr [rdi + 0x73] ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000febf6 : push qword ptr [rdi + 0x77] ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012b11e : push qword ptr [rdi + 0xf] ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000019531b : push qword ptr [rdi + rbp*4 - 0x4afc0000] ; in eax, dx ; jmp rsp
0x0000000000195313 : push qword ptr [rdi + rbp*4] ; add byte ptr [rsp + rsi*4 - 0x504b0013], al ; add byte ptr [rax], al ; add al, 0xb5 ; in eax, dx ; jmp rsp
0x000000000019554b : push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x0000000000195e6b : push qword ptr [rdi + rdi*8 - 0x4d0c0000] ; out dx, eax ; dec esp ; inc dword ptr [rax] ; add byte ptr [rbx + rsi*4], dh ; out dx, eax ; jmp rsp
0x0000000000195d23 : push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x000000000019847b : push qword ptr [rdi - 0x311bffff] ; clc ; dec esp ; out 1, eax ; add byte ptr [rdi + rcx*8], dh ; clc ; jmp rsp
0x0000000000117544 : push qword ptr [rdi - 0x33] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000196263 : push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x000000000019697b : push qword ptr [rdx + rcx*2 - 0x602bffff] ; dec esp ; add qword ptr [rax], rax ; add al, 0xa0 ; jmp rsp
0x0000000000098336 : push qword ptr [rdx + rdx*8 + 0x49] ; mov esi, dword ptr [rsp] ; test rsi, rsi ; jne 0x98359 ; jmp 0x98313
0x000000000019863b : push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x000000000019644b : push qword ptr [rsi + 0x22e40001] ; dec esp ; add dword ptr es:[rax], eax ; push rsp ; and esi, edx ; jmp rsp
0x000000000019856b : push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x0000000000198563 : push qword ptr [rsi + rbp*8 + 1] ; add byte ptr [rbx + rax - 7], ah ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x000000000012f633 : push qword ptr [rsp + 0xc8] ; lea r9, qword ptr [rsp + 0x30] ; call qword ptr [rax]
0x00000000000c92e2 : push qword ptr [rsp + rax + 0x4d] ; mov dword ptr [rbp], esi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000010a237 : push qword ptr [rsp + rax - 0x75] ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000196a03 : push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000194ecb : push qword ptr [rsp + rdx*4] ; add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x00000000000907b5 : push qword ptr [rsp + rsi + 0xf] ; mov dh, 0x75 ; add byte ptr [rax - 0x39], cl ; ret 0xffff
0x0000000000198683 : push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000012e897 : push r12 ; push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0d
0x000000000013a72b : push r13 ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x000000000013a729 : push r14 ; push r13 ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x000000000019932d : push rax ; add al, byte ptr [rax] ; je 0x199331 ; cli ; call rsp
0x00000000000371dc : push rax ; add byte ptr [rax], r8b ; add rsp, 8 ; ret
0x000000000007d65b : push rax ; add dword ptr [rax - 0x77], ecx ; push rbx ; or byte ptr [rdi], cl ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000196a8d : push rax ; add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x000000000013e4e9 : push rax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000768d2 : push rax ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000025cd6 : push rax ; mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000135010 : push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000002583a : push rax ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x000000000013d452 : push rax ; or byte ptr [rbp - 0x3f6af040], al ; add rsp, 0x18 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000005c0d3 : push rax ; or byte ptr [rcx - 0x77], cl ; push rsp ; and al, 8 ; jmp 0x5c0a6
0x00000000000235e3 : push rax ; push rsp ; ret
0x000000000008b52b : push rax ; stc ; add rsp, 0x10 ; pop rbx ; mov eax, 1 ; pop rbp ; pop r12 ; ret
0x000000000013e142 : push rax ; test eax, eax ; jne 0x13e1ae ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e212 : push rax ; test eax, eax ; jne 0x13e27e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e2 : push rax ; test eax, eax ; jne 0x13e34e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a2 : push rax ; test eax, eax ; jne 0x13e40e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001993fd : push rbp ; add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000187274 : push rbp ; add esp, esi ; jmp rsp
0x0000000000130ac4 : push rbp ; add rsp, 0x2270 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000011074b : push rbp ; cmp byte ptr [rax - 0x3c41f0e8], cl ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012e899 : push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0b
0x0000000000025345 : push rbp ; mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000028188 : push rbp ; mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000013a72c : push rbp ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x0000000000074305 : push rbp ; xor byte ptr [rbx + 0x374fff8], al ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000007e4ec : push rbp ; xor byte ptr [rbx - 0x438a0008], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000117660 : push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x000000000019939d : push rbx ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000199395 : push rbx ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x00000000000f849a : push rbx ; add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007d65f : push rbx ; or byte ptr [rdi], cl ; mov dh, 0 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007a34d : push rbx ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000012e89d : push rbx ; sub rsp, 0x60 ; call 0x13ab07
0x00000000000299d4 : push rbx ; xor byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000130dce : push rcx ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013da0e : push rcx ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000000ffa1b : push rcx ; dec dword ptr [rax - 0x77] ; add eax, 0x2c2d5b ; add rsp, 8 ; ret
0x000000000019448d : push rdi ; add byte ptr [rax], al ; push rsp ; ret
0x0000000000196b4d : push rdi ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b55 : push rdi ; add dword ptr [rax], eax ; js 0x196b55 ; call rsp
0x0000000000198189 : push rdi ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000195851 : push rdi ; out dx, al ; call rsp
0x0000000000195849 : push rdi ; out dx, al ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x000000000012de7d : push rdi ; pop rsp ; lea rsi, qword ptr [rdi + 0x48] ; mov rdi, rax ; mov rcx, qword ptr [rcx + 0x18] ; jmp rcx
0x00000000000ff53d : push rdi ; sub al, 0 ; add rsp, 8 ; ret
0x00000000001064a6 : push rdi ; sub dh, al ; add byte ptr [rdx], cl ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x00000000000757b9 : push rdi ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x00000000000f84e5 : push rdx ; add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000196b09 : push rdx ; hlt ; call rsp
0x00000000000c9846 : push rdx ; mov rdx, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000071aa0 : push rdx ; or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x00000000000235dd : push rdx ; sbb ecx, dword ptr [rcx + 0x50895048] ; push rsp ; ret
0x00000000000bbbf4 : push rdx ; xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000735da : push rsi ; add al, 0x48 ; mov dword ptr [rax], edx ; mov eax, dword ptr [rsi] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004a1b7 : push rsi ; add dword ptr [rcx - 0x77], ecx ; push rsp ; ret 0x4808
0x000000000013c2c2 : push rsi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000087156 : push rsi ; movabs byte ptr [0x90fffffe8ce90000], al ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x000000000013a72a : push rsi ; push r13 ; mov rcx, qword ptr [rsp + 0x18] ; lea r9, qword ptr [rsp + 0x3a] ; call qword ptr [rax]
0x000000000008b894 : push rsi ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x00000000001993c5 : push rsp ; add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x000000000012684b : push rsp ; add al, byte ptr [rdx] ; cmp esi, edx ; ja 0x126840 ; mov eax, 0xffffffff ; ret
0x00000000001b7ca8 : push rsp ; add byte ptr [rax], al ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x000000000019f6a8 : push rsp ; add byte ptr [rax], al ; add byte ptr [rdx + rcx + 0x12700000], dl ; in eax, dx ; call qword ptr [rax]
0x00000000001a25c8 : push rsp ; add byte ptr [rax], al ; add byte ptr [rsp + rcx*4], dh ; add al, dl ; ret 0xffed
0x0000000000196afd : push rsp ; add dword ptr [rax], eax ; adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000196b05 : push rsp ; add dword ptr [rax], eax ; push rdx ; hlt ; call rsp
0x00000000001b9aac : push rsp ; add dword ptr [rdx], eax ; add byte ptr [rax - 0x3d], ah ; clc ; jmp rcx
0x00000000000e16ae : push rsp ; and al, 0x10 ; mov ecx, eax ; mov rsi, r13 ; call 0xdd94a
0x0000000000110a01 : push rsp ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x000000000010bd1a : push rsp ; and al, 0x10 ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
0x000000000010bd7b : push rsp ; and al, 0x10 ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
0x00000000001108fd : push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d5 : push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000842c5 : push rsp ; and al, 0x18 ; call rdx
0x0000000000083f40 : push rsp ; and al, 0x18 ; mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x0000000000145d12 : push rsp ; and al, 0x18 ; mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x0000000000083f4a : push rsp ; and al, 0x20 ; call qword ptr [rax]
0x00000000000336fe : push rsp ; and al, 0x20 ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9b9
0x0000000000036152 : push rsp ; and al, 0x28 ; and edx, 1 ; mov dword ptr [rbx + 8], edx ; add rsp, 0x40 ; pop rbx ; ret
0x00000000000c9849 : push rsp ; and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024fb0 : push rsp ; and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000014636a : push rsp ; and al, 0x38 ; add rax, qword ptr [rdx + 8] ; add rsp, 0x48 ; ret
0x00000000000ff2f4 : push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000238b6 : push rsp ; and al, 0x38 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db2 : push rsp ; and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ae : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd1 : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3b : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087162 : push rsp ; and al, 0x68 ; call rax
0x000000000008847a : push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000352cb : push rsp ; and al, 0xe8 ; fld xword ptr [rsp - 0x18] ; fld st(0) ; fstp xword ptr [rdi] ; fsubp st(1) ; ret
0x000000000004a650 : push rsp ; and al, 0xf8 ; movsd xmm0, qword ptr [rsp - 8] ; ret
0x000000000004a60a : push rsp ; and al, 0xfc ; movss xmm0, dword ptr [rsp - 4] ; ret
0x0000000000053724 : push rsp ; and al, 8 ; call 0x1f985
0x000000000005c0d7 : push rsp ; and al, 8 ; jmp 0x5c0a2
0x00000000000360c5 : push rsp ; and al, 8 ; mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x00000000001304e8 : push rsp ; and al, 8 ; mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130508 ; mov rdi, rbp ; call rdx
0x00000000000391f2 : push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f9 : push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000083bf2 : push rsp ; and eax, 0x950f4100 ; ret
0x0000000000198600 : push rsp ; and ecx, edi ; call rsp
0x0000000000196458 : push rsp ; and esi, edx ; jmp rsp
0x00000000001379c2 : push rsp ; bswap eax ; mov eax, eax ; mov qword ptr [rdx], rax ; mov eax, 1 ; ret
0x0000000000198151 : push rsp ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x0000000000198159 : push rsp ; clc ; jmp rsp
0x0000000000193e41 : push rsp ; cld ; call qword ptr [rax]
0x0000000000198d40 : push rsp ; cli ; jmp rsp
0x00000000001a8eac : push rsp ; cmc ; add byte ptr [rax], al ; add byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000000f56a8 : push rsp ; cmc ; dec dword ptr [rax - 0x77] ; ret
0x00000000001ad5ac : push rsp ; cmp al, 1 ; add byte ptr [rax + 0x58], al ; cmc ; jmp qword ptr [rcx]
0x0000000000195924 : push rsp ; fld dword ptr [rax] ; add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000195e34 : push rsp ; inc byte ptr [rax] ; add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x00000000001a7259 : push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000195208 : push rsp ; jg 0x1951fb ; call rsp
0x0000000000183559 : push rsp ; jle 0x183502 ; mov edi, 0x99b51319 ; in eax, -1 ; lahf ; mov dh, 0xc7 ; ret 0xe71f
0x000000000019e2c9 : push rsp ; jmp 0x19e2cd
0x00000000001a8e99 : push rsp ; jmp qword ptr [rcx]
0x00000000000ce946 : push rsp ; jne 0xce8d3 ; mov eax, 0x7d00 ; ret
0x000000000019710c : push rsp ; jnp 0x19711f ; add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197127 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000193b54 : push rsp ; jns 0x193b56 ; jmp rsp
0x00000000001b7cac : push rsp ; jrcxz 0x1b7cb7 ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x000000000019898b : push rsp ; lar eax, word ptr [rax] ; test bl, al ; stc ; dec dword ptr [rax + rdx] ; add al, byte ptr [rax] ; xchg eax, esp ; ret
0x00000000000a0c7b : push rsp ; lea rax, qword ptr [rdi + rax + 0x10] ; ret
0x0000000000196a50 : push rsp ; loope 0x196a49 ; call rsp
0x0000000000197f7c : push rsp ; mov byte ptr [rcx], 0 ; je 0x197fbb ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000196310 : push rsp ; mov dh, cl ; call rsp
0x0000000000186ab4 : push rsp ; mov eax, 0x9be2fff3 ; jmp rdx
0x00000000001378e7 : push rsp ; mov eax, 1 ; ret
0x0000000000197c40 : push rsp ; mov edi, esi ; jmp rsp
0x00000000000243dc : push rsp ; mov r9, qword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x0000000000199790 : push rsp ; movabs eax, dword ptr [0xa164000116ccfffd] ; std ; jmp rsp
0x00000000001990d8 : push rsp ; movsd dword ptr [rdi], dword ptr [rsi] ; cli ; jmp rsp
0x000000000007192e : push rsp ; or al, byte ptr [rax] ; add rsp, 0x80 ; mov eax, esi ; pop rbx ; ret
0x0000000000034afa : push rsp ; or eax, 0x15db70 ; orpd xmm0, xmm1 ; ret
0x0000000000195728 : push rsp ; out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x0000000000196478 : push rsp ; pop rsi ; jmp rsp
0x000000000012e898 : push rsp ; push rbp ; mov r13, rsi ; push rbx ; sub rsp, 0x60 ; call 0x13ab0c
0x00000000000ceb43 : push rsp ; push rbx ; je 0xceb1c ; mov eax, 1 ; ret
0x00000000000ceb42 : push rsp ; push rbx ; je 0xceb1d ; mov eax, 1 ; ret
0x000000000019505b : push rsp ; pushfq ; add byte ptr [rax], al ; hlt ; ret
0x00000000000235e4 : push rsp ; ret
0x000000000004a1bb : push rsp ; ret 0x4808
0x000000000010bdb4 : push rsp ; ret 0x8940
0x0000000000196148 : push rsp ; ret 0xfff0
0x0000000000053728 : push rsp ; ret 0xfffc
0x0000000000131ad5 : push rsp ; ret 5
0x0000000000198bf8 : push rsp ; sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001a47ac : push rsp ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; nop ; shr dh, 1 ; call qword ptr [rax]
0x0000000000153ad8 : push rsp ; sti ; add eax, dword ptr [rax] ; movsxd rdx, dword ptr [r11 + rdx*4] ; lea rdx, qword ptr [r11 + rdx] ; jmp rdx
0x0000000000193269 : push rsp ; sti ; call qword ptr [rax - 0x2f0004b8]
0x0000000000194b20 : push rsp ; sub dl, ch ; jmp rsp
0x0000000000184b1f : push rsp ; sub ebp, 0xed836bff ; ljmp ptr [rbx - 0x7d] ; in eax, dx ; ljmp ptr [rbx - 0x7d] ; in eax, dx ; jmp rbx
0x00000000001a41ac : push rsp ; test al, 0 ; add al, ah ; xchg eax, ebx ; out dx, al ; jmp qword ptr [rdx]
0x00000000001acaac : push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x0000000000198634 : pushfq ; add dword ptr [rax], eax ; xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x0000000000198bfc : pushfq ; and dword ptr [rdx], eax ; add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x0000000000198389 : pushfq ; clc ; call rsp
0x0000000000195d84 : pushfq ; cli ; add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d81 ; call rsp
0x0000000000198f94 : pushfq ; cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000197fe4 : pushfq ; enter 1, -0x4c ; xor edi, eax ; jmp rsp
0x0000000000193c6c : pushfq ; insb byte ptr [rdi], dx ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000020f42 : pushfq ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000195a29 : pushfq ; out dx, al ; dec dword ptr [rax - 0x5fdc0000] ; out dx, al ; jmp rsp
0x000000000019584c : pushfq ; rol dword ptr [rax], cl ; add ah, ah ; push rdi ; out dx, al ; call rsp
0x0000000000197e34 : pushfq ; rol dword ptr [rcx], 0 ; and bh, al ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000198edc : pushfq ; xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x000000000013ebee : pxor mm0, mm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x000000000013ebed : pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x000000000008b893 : rcl dword ptr [rsi + 0x33], 0 ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x00000000000ca1a0 : rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000712f1 : rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; ret
0x0000000000047eeb : rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x000000000012be13 : rcr byte ptr [rbx + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000002bba3 : rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076941 : rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000002268c : rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x00000000000bb986 : rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r14 ; ret
0x000000000003a4ee : rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000013d45f : rcr byte ptr [rbx + 0x5d], 0xc3 ; nop dword ptr [rax + rax] ; mov rax, qword ptr [rdi + 8] ; mov rsi, rsp ; call qword ptr [rax]
0x00000000001307a9 : rcr byte ptr [rbx + 0x5d], 0xff ; loope 0x130824 ; nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ca279 : rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; pop r13 ; pop r14 ; ret
0x000000000010e418 : rcr byte ptr [rbx - 0x77], cl ; rcr byte ptr [rbp + 0x41], 1 ; pop rsp ; ret
0x00000000001940ec : rcr byte ptr [rsp + rdi*8 - 0x36d9f01], 0xff ; and byte ptr [rdx - 0x665f0004], bl ; cld ; call qword ptr [rax]
0x00000000000ff1a3 : rcr dword ptr [rsp + rbp], 1 ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x0000000000144b49 : rep movsq qword ptr [rdi], qword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000019804d : retf 1 ; and al, 0x40 ; clc ; call rsp
0x000000000019807d : retf ; add dword ptr [rax], eax ; hlt ; clc ; jmp rsp
0x00000000001963e9 : retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x000000000008426d : retf ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x0000000000139726 : rol byte ptr [rax + 0x8247c], cl ; setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x0000000000109d32 : rol byte ptr [rax], 1 ; add byte ptr [rax - 0x75], cl ; and al, 8 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000045f0b : rol byte ptr [rbp - 0x3d6af040], cl ; neg edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000006f03f : rol byte ptr [rbx + 0xb74fff8], 1 ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x000000000013ddb9 : rol byte ptr [rcx - 1], 0xd0 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003b34c : rol byte ptr [rcx], 0 ; add byte ptr [rax - 0x73], cl ; add eax, 0x38b0ff ; add rsp, 8 ; ret
0x0000000000096720 : rol byte ptr [rcx], 0x48 ; mov dword ptr [rbx], eax ; add rsp, 8 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000198155 : rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x000000000019814d : rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2], ah ; clc ; dec esp ; rol byte ptr [rcx], 1 ; add byte ptr [rsp + rdx*2 - 8], ah ; jmp rsp
0x000000000010c2fd : rol byte ptr [rip + 0x48c0b70f], 0x8b ; push rsp ; ret 0x8940
0x000000000011f8f7 : rol dh, 2 ; add byte ptr [rbp + 0x41], bl ; pop rsp ; pop r13 ; ret
0x0000000000131c7e : rol dword ptr [rax], 0 ; test eax, eax ; jne 0x131c9f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000019584d : rol dword ptr [rax], cl ; add ah, ah ; push rdi ; out dx, al ; call rsp
0x0000000000195845 : rol dword ptr [rax], cl ; add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000197e35 : rol dword ptr [rcx], 0 ; and bh, al ; dec esp ; rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x0000000000197e3d : rol dword ptr [rcx], 0 ; movsb byte ptr [rdi], byte ptr [rsi] ; and bh, al ; jmp rsp
0x000000000019818d : rol dword ptr [rcx], 1 ; add byte ptr [rax + rbx*2], al ; clc ; call rsp
0x0000000000198185 : rol dword ptr [rcx], 1 ; add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000195844 : rol dword ptr fs:[rax], cl ; add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000198184 : rol dword ptr fs:[rcx], 1 ; add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x00000000000ceb3f : ror byte ptr [rax + 0x3d], cl ; push rsp ; push rbx ; je 0xceb20 ; mov eax, 1 ; ret
0x0000000000039d35 : ror byte ptr [rax - 0x73], 0x65 ; fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000ba59f : ror byte ptr [rax - 0x73], 1 ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000007a720 : ror byte ptr [rax - 0x73], 5 ; fdivr dword ptr [rsp + rsi] ; add byte ptr [rax + 0xf], cl ; ret 0x8948
0x0000000000138469 : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134df1 : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500b : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000013ed24 : ror byte ptr [rax - 0x77], 3 ; add rsp, 0x10 ; mov eax, edx ; pop rbx ; ret
0x0000000000130d49 : ror byte ptr [rax - 0x7d], 0xc4 ; adc byte ptr [rbx - 0x3d], bl ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x00000000000f849e : ror byte ptr [rax - 0x7d], 0xec ; sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000008d648 : ror byte ptr [rax - 1], 0xc0 ; add rsp, 0x100 ; sub rax, rdx ; ret
0x00000000000cf000 : ror byte ptr [rax - 9], 0xd8 ; or rax, 0x31069 ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x00000000000acd8a : ror byte ptr [rcx + rcx*4 - 0x12], 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000bb41a : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e2 : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c2 : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000768cb : ror byte ptr [rcx + rcx*4 - 0xf], 0x48 ; lea esi, dword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012ccbf : ror byte ptr [rcx + rcx*4 - 2], cl ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x00000000000ad319 : ror byte ptr [rcx + rcx*4 - 7], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000f16c1 : ror byte ptr [rcx - 0x77], 0x30 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013962b : ror byte ptr [rdi], cl ; xchg eax, ebp ; sal bh, 0xd8 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000909e5 : ror dword ptr [r8 - 0x77], 1 ; adc eax, 0x332f1a ; add rsp, 0x100 ; ret
0x000000000007d376 : ror dword ptr [rax + 0x39], 1 ; enter 0x1476, 0x48 ; mov eax, dword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000909e6 : ror dword ptr [rax - 0x77], 1 ; adc eax, 0x332f1a ; add rsp, 0x100 ; ret
0x00000000000e1642 : ror dword ptr [rcx + rcx*4 - 0x12], 0x4c ; mov dword ptr [rsp + 8], ecx ; call 0xdd94b
0x0000000000020741 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb60 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 8 ; jmp rax
0x0000000000047bbd : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000199709 : sahf ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000194061 : sahf ; cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x000000000019422c : sahf ; xchg eax, edx ; cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x000000000013962e : sal bh, 0xd8 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139c79 : sal bh, 0xd8 ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000010d761 : sal bh, 0xd8 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000144b48 : sal bl, 0x48 ; movsd dword ptr [rdi], dword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001462b5 : sal byte ptr [rax + rbx - 0x80], 0x7c ; and al, 0xf ; add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000013dc2c : sal byte ptr [rbp + 0x73], cl ; add rsp, 0x20 ; mov eax, 1 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001463f0 : sal byte ptr [rbp + rcx - 0x80], 0x7c ; and al, 0x1f ; add byte ptr [rbp + 0x16], dh ; add rsp, 0x38 ; ret
0x000000000012d7c9 : sal byte ptr [rbp - 0x14], 0x48 ; mov eax, ebp ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000dfc58 : sal byte ptr [rbp - 0x2b], 0x89 ; sub al, 0x89 ; xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000db19d : sal byte ptr [rbp - 0x40], cl ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013ac12 : sal byte ptr [rbx + rcx + 0x48], 1 ; add eax, 0xa0 ; add rsp, 8 ; ret
0x000000000013ac42 : sal byte ptr [rbx + rcx + 0x48], 1 ; add eax, 0xa8 ; add rsp, 8 ; ret
0x000000000013abe2 : sal byte ptr [rbx + rcx + 0x48], 1 ; sub eax, -0x80 ; add rsp, 8 ; ret
0x00000000000ad10d : sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000112916 : sal byte ptr [rdi + rsi + 0x44], 0x29 ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000007da45 : sal byte ptr [rsi + 0x10], 0x48 ; mov eax, dword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x0000000000070ba9 : sal byte ptr [rsi + 0x5c], 0x48 ; mov eax, dword ptr [rbp + 0x48] ; add rsp, 0x18 ; mov rdi, rbx ; pop rbx ; pop rbp ; jmp rax
0x000000000010076d : sal byte ptr [rsp + rax + 0x48], 0x89 ; js 0x10078a ; mov qword ptr [rdi], rax ; mov qword ptr [rdi + 8], rsi ; ret
0x0000000000100799 : sal byte ptr [rsp + rax + 0x48], cl ; mov dword ptr [rdx + 8], eax ; test rax, rax ; je 0x1007b8 ; mov qword ptr [rax], rdx ; ret
0x00000000000f811e : sal byte ptr [rsp + rax - 0x75], 1 ; and al, 0xc ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000107731 : sal byte ptr [rsp + rcx + 0x48], cl ; cmp edi, edx ; jne 0x107734 ; mov rax, qword ptr [rax + 8] ; ret
0x000000000008d831 : sal byte ptr [rsp + rcx + 0x5b], 0x5d ; pop r12 ; ret
0x000000000010c71e : sal byte ptr [rsp + rcx - 0x77], cl ; shl dword ptr [rbx], 0x4e ; adc byte ptr [rax - 0x73], cl ; or al, 0x8e ; add eax, dword ptr [rcx + rdx] ; ret
0x00000000001255bb : sal byte ptr [rsp + rcx - 0xa], cl ; ret 0xc602
0x00000000000d8b73 : sal byte ptr [rsp + rdi + 0x40], 0xf6 ; mov dword ptr [rdi + rcx], 0xe084 ; add byte ptr [rax - 0x7d], cl ; ret 0x4c04
0x000000000019398c : sal byte ptr [rsp + rdi*8], 1 ; jmp qword ptr [rax]
0x000000000010a7d2 : sal byte ptr [rsp + rdx + 0x48], 0x89 ; ret
0x000000000002da19 : sal byte ptr [rsp + rdx*8 + 0x23], cl ; ja 0x2da3c ; lea rax, qword ptr [rdi + rsi*4] ; mov eax, dword ptr [rax + rdx] ; ret
0x000000000010645a : sal dh, 0xff ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x0000000000085a2b : sal dword ptr [rdx - 0x26], cl ; mov byte ptr [rsi + rbx], r9b ; add rsp, 8 ; mov rax, rsi ; pop rbx ; pop rbp ; ret
0x00000000000a06c9 : sal dword ptr [rsp + rsi*8 + 0x39], 1 ; int1 ; je 0xa06c8 ; ret
0x000000000012fd51 : salc ; add byte ptr [rax], al ; test eax, eax ; jne 0x12fd77 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000019825d : salc ; add dword ptr [rax], eax ; in al, 0x6a ; clc ; jmp rsp
0x0000000000172381 : salc ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ba2e9 : salc ; add rsp, 8 ; sub ebx, eax ; mov eax, ebx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ba279 : salc ; sub ebx, eax ; mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000130f0e : salc ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013ad1e : sar ah, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013dd6d : sar bh, 0xd1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001307f1 : sar bh, 0xe1 ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001358c0 : sar bh, 0xff ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x00000000000fe9c2 : sar byte ptr [rax + 0x100], 0x48 ; cmovns eax, dword ptr [rsp] ; add rsp, 0x18 ; ret
0x00000000000cd23b : sar byte ptr [rax + 0x12], 0x64 ; mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000143d72 : sar byte ptr [rax + 0x2b], 0x48 ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x000000000014391b : sar byte ptr [rax + 0x32], 0x48 ; mov eax, dword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000079f07 : sar byte ptr [rax + 0x36], 0x48 ; mov dword ptr [rbx + 0x90], eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000fdf38 : sar byte ptr [rax + 0xd], cl ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fdd96 : sar byte ptr [rax + 0xf], 0x8b ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000127ccf : sar byte ptr [rax - 1], 0xf ; and al, 0xc ; add rsp, 0x18 ; ret
0x0000000000034e1c : sar byte ptr [rax], 0 ; mov dword ptr fs:[rax], 0x22 ; add rsp, 0x28 ; ret
0x0000000000193bb4 : sar byte ptr [rsp + rdi*8 - 1], 0x50 ; jl 0x193bbe ; jmp rax
0x00000000000fffeb : sar dword ptr [rsp + rbx*2], 0xf ; xchg eax, esp ; ret 0xd108
0x0000000000036209 : sar eax, 0x1f ; add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cba69 : sar eax, 0x1f ; lea rsp, qword ptr [rbp - 0x10] ; pop rbx ; pop r12 ; pop rbp ; ret
0x0000000000127aaa : sar edx, 4 ; add rdx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x00000000000bbc6e : sar edx, 7 ; sub rdx, rsi ; add rdx, rcx ; mov rax, rdx ; add rsp, 0x18 ; ret
0x0000000000127aa9 : sar rdx, 4 ; add rdx, 1 ; syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x000000000013ad1d : sar spl, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007921a : sbb al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001a7250 : sbb al, 0 ; add byte ptr [rax], al ; cld ; fadd dword ptr [rax] ; add al, ch ; push rsp ; int1 ; jmp qword ptr [rax]
0x0000000000037612 : sbb al, 0x15 ; add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x00000000000f175e : sbb al, 0x24 ; add qword ptr [r8], 1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000019448c : sbb al, 0x57 ; add byte ptr [rax], al ; push rsp ; ret
0x0000000000196b7c : sbb al, 0x59 ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x000000000012f0d4 : sbb al, 0x5a ; pop rcx ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000018a4a4 : sbb al, 0xde ; cli ; jmp rsp
0x000000000019867c : sbb al, 0xf4 ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000198c01 : sbb al, 0xfa ; call rsp
0x0000000000196265 : sbb al, byte ptr [rcx] ; add ah, dl ; jns 0x196262 ; jmp rsp
0x0000000000118497 : sbb al, ch ; and eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x00000000000566d1 : sbb al, ch ; cdq ; scasb al, byte ptr [rdi] ; add dword ptr [rax], eax ; add rsp, 0xd8 ; ret
0x00000000000567f1 : sbb al, ch ; fstp dword ptr [rax] ; add al, byte ptr [rax] ; add rsp, 0xd8 ; ret
0x00000000001185e2 : sbb al, ch ; or byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x000000000006caf1 : sbb al, ch ; or dword ptr [rax], eax ; add byte ptr [rax], al ; add rsp, 0xd8 ; ret
0x0000000000056761 : sbb al, ch ; or dword ptr [rax], ebx ; add al, byte ptr [rax] ; add rsp, 0xd8 ; ret
0x000000000007d39f : sbb byte ptr [r11 + 0x480c2474], cl ; mov edi, dword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x0000000000079653 : sbb byte ptr [r15 + 0x11], r14b ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x00000000001462b7 : sbb byte ptr [rax + 0xf247c], al ; jne 0x1462f6 ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000014703b : sbb byte ptr [rax + 1], bh ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000083f42 : sbb byte ptr [rax + rcx*4 + 0x5c], al ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x000000000007de67 : sbb byte ptr [rax - 0x75], cl ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x0000000000050a99 : sbb byte ptr [rax - 0x77], cl ; add al, 0xd1 ; add rsp, 8 ; mov eax, ebp ; pop rbx ; pop rbp ; ret
0x000000000002e735 : sbb byte ptr [rax - 0x77], cl ; enter 0x5d5b, 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001462d4 : sbb byte ptr [rax], al ; mov rax, qword ptr [rsp + 0x38] ; jne 0x1462c5 ; add rsp, 0x48 ; ret
0x00000000000bb417 : sbb byte ptr [rbp + 0x31], al ; ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x000000000007d3a0 : sbb byte ptr [rbx + 0x480c2474], cl ; mov edi, dword ptr [rsp] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x00000000000f84a2 : sbb byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000035d77 : sbb byte ptr [rbx + 0x802484], cl ; add byte ptr [rax], al ; add rsp, 0x108 ; ret
0x00000000000c8cc2 : sbb byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ea076 : sbb byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000132e0c : sbb byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; ret
0x00000000000843b6 : sbb byte ptr [rcx + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000196215 : sbb byte ptr [rcx], al ; add byte ptr [rdi - 0xf], al ; jmp rsp
0x00000000000f1394 : sbb byte ptr [rcx], al ; mov rax, qword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13dc
0x0000000000037526 : sbb byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076a07 : sbb byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; ret
0x0000000000079654 : sbb byte ptr [rdi + 0x11], dh ; add rsp, 8 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000014324c : sbb byte ptr [rdx - 5], 0xff ; add rsp, 8 ; sar eax, 0x1f ; ret
0x00000000001adaa0 : sbb byte ptr [rsi + 0x200e4403], al ; add dword ptr [rsp + rbp*2], 0xa ; ret
0x0000000000145d14 : sbb byte ptr [rsi + 0x40], bh ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000c3960 : sbb byte ptr [rsp + rcx], dh ; add byte ptr [rdi], cl ; mov dh, 0xfa ; movsxd rax, dword ptr [r8 + rdi*4] ; add rax, r8 ; jmp rax
0x000000000004a00a : sbb byte ptr [rsp + rdx + 0x31], dh ; ror byte ptr [rcx + 3], cl ; add cl, byte ptr [rdi] ; xchg eax, edx ; ret 0x8949
0x0000000000196214 : sbb byte ptr fs:[rcx], al ; add byte ptr [rdi - 0xf], al ; jmp rsp
0x00000000000ff3e5 : sbb ch, byte ptr [rax + rax] ; mov dword ptr fs:[rax], 0 ; mov rax, qword ptr [rsp - 0x50] ; ret
0x00000000000909ea : sbb ch, byte ptr [rdi] ; xor eax, dword ptr [rax] ; add rsp, 0x100 ; ret
0x000000000014831d : sbb cl, byte ptr [rdi] ; xchg byte ptr [rsp + rax], cl ; add byte ptr [rax - 0x7d], cl ; ret 0xeb10
0x000000000019443d : sbb dword ptr [rcx], eax ; add byte ptr [rbp + rdi*4 - 0x18], dh ; call rsp
0x0000000000198aed : sbb dword ptr [rdx], eax ; add ah, ah ; in al, dx ; stc ; jmp rsp
0x0000000000198ae5 : sbb dword ptr [rdx], eax ; add byte ptr [rdx + rbp*8 + 0x197cfff9], al ; add al, byte ptr [rax] ; in al, -0x14 ; stc ; jmp rsp
0x00000000001725be : sbb eax, 0x24b1dd ; sub rsp, 8 ; call 0x7e8ab
0x000000000019630d : sbb eax, 0x8a540001 ; int1 ; call rsp
0x00000000001039d1 : sbb eax, dword ptr [rcx] ; add byte ptr [rax], al ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000116fc1 : sbb eax, eax ; add rsp, 0x10 ; pop rbx ; and eax, 0xc ; pop rbp ; pop r12 ; ret
0x00000000000235de : sbb ecx, dword ptr [rcx + 0x50895048] ; push rsp ; ret
0x000000000004a1af : sbb ecx, dword ptr [rcx - 0x75] ; je 0x4a183 ; or byte ptr [rax - 0x73], cl ; push rsi ; add dword ptr [rcx - 0x77], ecx ; push rsp ; ret 0x4808
0x0000000000198bf9 : sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000000566d4 : scasb al, byte ptr [rdi] ; add dword ptr [rax], eax ; add rsp, 0xd8 ; ret
0x0000000000002fa4 : scasb al, byte ptr [rdi] ; outsd dx, dword ptr [rsi] ; mov byte ptr [rbx], cl ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x00000000000cd01e : scasb al, byte ptr [rdi] ; popfq ; add al, 0 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000002faa : scasb al, byte ptr [rdi] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x000000000019531d : scasd eax, dword ptr [rdi] ; add byte ptr [rax], al ; add al, 0xb5 ; in eax, dx ; jmp rsp
0x00000000001329c6 : scasd eax, dword ptr [rdi] ; add byte ptr [rax], al ; test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x0000000000079dac : scasd eax, dword ptr [rdi] ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001983d9 : scasd eax, dword ptr [rdi] ; clc ; jmp rsp
0x000000000006c2b2 : sete al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000013ec58 : sete al ; add rsp, 0x18 ; movzx eax, al ; ret
0x00000000000fa05e : sete al ; add rsp, 0x48 ; movzx eax, al ; ret
0x000000000013d1b6 : sete al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000000456c2 : sete al ; add rsp, 8 ; movzx eax, al ; ret
0x000000000012d6e8 : sete al ; add rsp, 8 ; ret
0x000000000013d407 : sete al ; cmp edx, 1 ; je 0x13d476 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d4c7 : sete al ; cmp edx, 1 ; je 0x13d536 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d587 : sete al ; cmp edx, 1 ; je 0x13d5f6 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d647 : sete al ; cmp edx, 1 ; je 0x13d6b6 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000130daa : sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000130d44 : sete al ; movzx eax, al ; add rsp, 0x10 ; pop rbx ; ret
0x000000000013e128 : sete al ; movzx eax, al ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000008a83e : sete bl ; neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000000799d2 : setne al ; add rsp, 0x10 ; movzx eax, al ; neg eax ; pop rbx ; ret
0x000000000010907c : setne al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000013d456 : setne al ; add rsp, 0x18 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000013626d : setne al ; add rsp, 0x30 ; pop rbx ; movzx eax, al ; pop rbp ; pop r12 ; ret
0x00000000001358ef : setne al ; add rsp, 8 ; movzx eax, al ; add eax, 1 ; ret
0x0000000000109052 : setne al ; add rsp, 8 ; movzx eax, al ; neg eax ; ret
0x0000000000131c63 : setne al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x0000000000100d83 : setne al ; add rsp, 8 ; movzx eax, al ; ret
0x000000000013d907 : setne al ; mov dword ptr [rbx], eax ; add rsp, 0x10 ; mov eax, 1 ; pop rbx ; ret
0x00000000001308c9 : setne al ; movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013962c : setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139c77 : setne al ; neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000010d75f : setne al ; neg eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000020d94 : setne bh ; add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x0000000000020d93 : setne dil ; add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x000000000013972c : setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x0000000000045f0e : setne dl ; neg edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000196165 : sgdt ptr [rax] ; push rsp ; ret
0x0000000000196145 : sgdt ptr [rax] ; push rsp ; ret 0xfff0
0x000000000012f1ca : shl byte ptr [rsi - 0x77], 0x43 ; add cl, byte ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000193748 : shl byte ptr [rsp + rdi*8], 1 ; call rax
0x000000000013abc3 : shl dword ptr [rbx + 0x28], 0 ; add rsp, 8 ; ret
0x0000000000132ce2 : shr bl, 0xab ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ad199 : shr byte ptr [rdx], 0x48 ; lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000fa1a3 : shr dword ptr [rsp + rbp], 1 ; neg eax ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x000000000004a697 : shr eax, 0x20 ; mov dword ptr [rsp - 0x14], eax ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000107234 : shr eax, 1 ; cmp rdx, 1 ; jne 0x10723e ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000001072a4 : shr eax, 1 ; cmp rdx, 1 ; jne 0x1072ae ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x000000000004a696 : shr rax, 0x20 ; mov dword ptr [rsp - 0x14], eax ; fld xword ptr [rsp - 0x18] ; ret
0x0000000000107233 : shr rax, 1 ; cmp rdx, 1 ; jne 0x10723f ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000001072a3 : shr rax, 1 ; cmp rdx, 1 ; jne 0x1072af ; add rsp, 0x78 ; pop rbx ; pop rbp ; ret
0x00000000000ff2f1 : sldt word ptr [rbx] ; push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x0000000000198725 : stc ; add dword ptr [rax], eax ; push 0xf9 ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x000000000008b52c : stc ; add rsp, 0x10 ; pop rbx ; mov eax, 1 ; pop rbp ; pop r12 ; ret
0x0000000000198602 : stc ; call rsp
0x0000000000199331 : stc ; cli ; call rsp
0x000000000019870a : stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x00000000001986aa : stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000198572 : stc ; jmp rsp
0x00000000001988da : stc ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019894a : stc ; lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x00000000001226d2 : stc ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000ad31c : stc ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000008b55b : stc ; pop rcx ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000019872a : stc ; push qword ptr [rcx + rdi*8 + 0x6ac40001] ; stc ; jmp rsp
0x000000000019863a : stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x000000000019856a : stc ; push qword ptr [rsi + rbp*8 + 0x3a40001] ; stc ; jmp rsp
0x0000000000198682 : stc ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000019898a : stc ; push rsp ; lar eax, word ptr [rax] ; test bl, al ; stc ; dec dword ptr [rax + rdx] ; add al, byte ptr [rax] ; xchg eax, esp ; ret
0x0000000000122e62 : stc ; sub dword ptr [rax], eax ; add rsp, 8 ; ret
0x0000000000195e15 : std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195e0d : std ; add byte ptr [rax], al ; mov ah, 0x91 ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x000000000019979a : std ; jmp rsp
0x000000000019980a : std ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x000000000007c878 : std ; or dh, byte ptr [rsp + rdi*2 + 0x40] ; movzx eax, ch ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007714f : std ; sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000003b281 : sti ; add byte ptr [rax], al ; add dl, dh ; movups xmm0, xmmword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000001993a2 : sti ; call rsp
0x000000000010bb90 : sti ; dec dword ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000006e520 : sti ; dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x000000000019939a : sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x00000000001995b2 : sti ; jmp rsp
0x00000000001995aa : sti ; lcall ptr [rsi + rax + 2] ; add byte ptr [rbp + rsi - 5], dh ; jmp rsp
0x0000000000199482 : sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x00000000000d8090 : sti ; or dh, byte ptr [rsp + rbx*2 + 0x48] ; add esp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007723c : sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov eax, edx ; ret
0x0000000000077150 : sti ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000003b017 : sti ; push qword ptr [rbp - 0x13] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006efe0 : sti ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000001268dc : stosb byte ptr [rdi], al ; idiv bh ; add rsp, 8 ; lea eax, dword ptr [rbx + rbp] ; pop rbx ; pop rbp ; ret
0x0000000000185dfd : stosb byte ptr [rdi], al ; int1 ; call rsp
0x0000000000185e01 : stosb byte ptr [rdi], al ; int1 ; jmp rsp
0x0000000000196a01 : stosb byte ptr [rdi], al ; push qword ptr [rsp + rcx*2 - 0x54fbffff] ; jmp rsp
0x0000000000196a09 : stosd dword ptr [rdi], eax ; jmp rsp
0x0000000000132ce4 : stosd dword ptr [rdi], eax ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fc509 : stosd dword ptr [rdi], eax ; xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000ff9fa : sub al, 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000100d7d : sub al, 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x00000000001034d3 : sub al, 0 ; add rsp, 0x18 ; ret
0x0000000000100f8f : sub al, 0 ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ff53f : sub al, 0 ; add rsp, 8 ; ret
0x00000000000ff538 : sub al, 0 ; lea rax, qword ptr [rip + 0x2c4a57] ; add rsp, 8 ; ret
0x00000000000ff3e6 : sub al, 0 ; mov dword ptr fs:[rax], 0 ; mov rax, qword ptr [rsp - 0x50] ; ret
0x00000000000f17a5 : sub al, 0x24 ; add qword ptr [r8], 1 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011b0f2 : sub al, 0x24 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000014343d : sub al, 0x28 ; add byte ptr [rdx], bh ; cmovne rax, rdx ; add rsp, 8 ; ret
0x00000000001af884 : sub al, 0x5f ; add dword ptr [rax], eax ; cmp bh, ah ; cmc ; jmp rsp
0x0000000000193c68 : sub al, 0x6d ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x00000000000dfc5d : sub al, 0x89 ; xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000195661 : sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000199805 : sub al, 1 ; add byte ptr [rcx + rcx*8 - 3], dh ; ljmp ptr [rcx + rbx*2] ; add byte ptr [rdx + rcx*8 - 3], dl ; jmp rsp
0x00000000001173bf : sub al, byte ptr [rax] ; add rsp, 0x1000 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011b200 : sub al, byte ptr [rax] ; mov eax, 0xca ; add rsp, 0x28 ; ret
0x0000000000102f52 : sub al, byte ptr [rbx] ; add byte ptr [rax], al ; lea rax, qword ptr [rip + 0x2c1273] ; add rsp, 8 ; ret
0x0000000000198d5d : sub al, byte ptr [rdx] ; add byte ptr [rsp + rdx*2 - 6], ah ; jmp rsp
0x0000000000197f89 : sub bh, al ; call rsp
0x0000000000197f81 : sub bh, al ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x000000000011b1fb : sub bh, bh ; and eax, 0x2a9f46 ; mov eax, 0xca ; add rsp, 0x28 ; ret
0x000000000012122f : sub bl, al ; nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000024d66 : sub byte ptr [rax - 0x75], cl ; je 0x24d9b ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818d : sub byte ptr [rax - 0x75], cl ; je 0x281c1 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002912d : sub byte ptr [rax - 0x75], cl ; je 0x29161 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000336fb : sub byte ptr [rax - 0x77], cl ; push rsp ; and al, 0x20 ; mov dword ptr [rsp + 0x38], eax ; call 0x1f9bc
0x0000000000140967 : sub byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000013abc5 : sub byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000013abae : sub byte ptr [rax], al ; cmp rax, rdx ; je 0x13abcb ; add rsp, 8 ; ret
0x000000000013abde : sub byte ptr [rax], al ; cmp rax, rdx ; je 0x13abff ; sub rax, -0x80 ; add rsp, 8 ; ret
0x00000000001441ec : sub byte ptr [rax], al ; mov eax, 1 ; add rsp, 8 ; ret
0x000000000014343e : sub byte ptr [rax], al ; mov edx, 0 ; cmovne rax, rdx ; add rsp, 8 ; ret
0x000000000002235c : sub byte ptr [rcx + 0x415d5bd0], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000e9bff : sub byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000842bd : sub byte ptr [rcx + rcx*4 + 0x44], cl ; and al, 0x20 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x000000000003b254 : sub byte ptr [rcx], al ; add byte ptr [rax], al ; movsd xmm0, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x00000000000cf963 : sub byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001108f5 : sub byte ptr [rdi + 0x2000001], bh ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001064a7 : sub dh, al ; add byte ptr [rdx], cl ; add rsp, 0xd8 ; pop rbx ; pop rbp ; ret
0x0000000000194b19 : sub dl, ch ; dec esp ; jle 0x194b29 ; add byte ptr [rax + rbp - 0x16], dl ; jmp rsp
0x0000000000194b21 : sub dl, ch ; jmp rsp
0x000000000012f92b : sub dword ptr [rax], eax ; add byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000122e63 : sub dword ptr [rax], eax ; add rsp, 8 ; ret
0x000000000012387d : sub dword ptr [rax], eax ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000108c3c : sub dword ptr [rbx], 0x138b4800 ; mov qword ptr [rax], rdx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000198d3d : sub dword ptr [rdx], eax ; add byte ptr [rdi + rcx*2 - 6], dl ; jmp rsp
0x0000000000198d35 : sub dword ptr [rdx], eax ; add byte ptr [rsi + rcx*2 + 0x29bcfffa], ah ; add al, byte ptr [rax] ; push rsp ; cli ; jmp rsp
0x000000000013ad6e : sub dword ptr [rsi - 0x77], esp ; jno 0x13ad86 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f1391 : sub dword ptr [rsp + 0x18], 1 ; mov rax, qword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13df
0x000000000013ebe6 : sub dword ptr [rsp + 0x80], eax ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000000644dd : sub dword ptr [rsp + rdi*8], -1 ; dec dword ptr [rax - 0x7d] ; ret
0x000000000013abe6 : sub eax, -0x80 ; add rsp, 8 ; ret
0x000000000013a966 : sub eax, 0x3be0000 ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; lea r9, qword ptr [rsp + 0x2a] ; call qword ptr [rax]
0x000000000010aed8 : sub eax, dword ptr [rax] ; add al, byte ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010acf4 : sub eax, dword ptr [rax] ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000102ebc : sub eax, dword ptr [rax] ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010a193 : sub eax, dword ptr [rax] ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000108c3d : sub eax, dword ptr [rax] ; mov rdx, qword ptr [rbx] ; mov qword ptr [rax], rdx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130f25 : sub eax, dword ptr [rbx + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; add eax, edx ; ret
0x0000000000130f0a : sub eax, dword ptr [rbx + 0x58] ; mov esi, edx ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000002e5ff : sub eax, dword ptr [rbx + 8] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010acf3 : sub eax, dword ptr gs:[rax] ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x000000000007da41 : sub eax, ecx ; cmp rax, r8 ; jbe 0x7da68 ; mov rax, qword ptr [rbx + 0x40] ; add rsp, 0x20 ; pop rbx ; jmp rax
0x0000000000197f59 : sub eax, edi ; call rsp
0x0000000000106d37 : sub eax, esi ; mov qword ptr [rbp], r14 ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d9c
0x0000000000075190 : sub eax, esi ; mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913bc
0x0000000000197f58 : sub eax, r15d ; call rsp
0x0000000000194b41 : sub ebp, edx ; call rsp
0x0000000000002fab : sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x00000000000ba27a : sub ebx, eax ; mov eax, ebx ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000143d74 : sub ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000bc9ee : sub ecx, eax ; mov qword ptr [rbx + 8], rcx ; add rsp, 0xd0 ; mov eax, edx ; pop rbx ; ret
0x000000000007d375 : sub ecx, edx ; cmp rax, rcx ; jbe 0x7d3a0 ; mov rax, qword ptr [rbx + 0x18] ; add rsp, 0x10 ; pop rbx ; jmp rax
0x000000000013d7ed : sub edi, dword ptr [rax + 1] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000bbc72 : sub edx, esi ; add rdx, rcx ; mov rax, rdx ; add rsp, 0x18 ; ret
0x00000000000757bc : sub edx, esi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000007a350 : sub edx, esi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x0000000000080bfc : sub esi, dword ptr [rax + rax] ; jae 0x80bb9 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000130f0f : sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bca58 : sub esi, ecx ; mov qword ptr [rbx], rsi ; add rsp, 0xd0 ; pop rbx ; ret
0x0000000000172803 : sub qword ptr [rip - 0x7cb800], rsp ; add dword ptr [rdi + 3], esi ; ret
0x00000000000f1390 : sub qword ptr [rsp + 0x18], 1 ; mov rax, qword ptr [rsp + 0x18] ; mov rdx, rax ; jmp 0xf13e0
0x000000000007518f : sub r8, rsi ; mov rdx, r8 ; mov qword ptr [rsp + 0x10], r8 ; call 0x913bd
0x000000000013abe5 : sub rax, -0x80 ; add rsp, 8 ; ret
0x0000000000130f24 : sub rax, qword ptr [rbx + 0x18] ; add rsp, 8 ; pop rbx ; pop rbp ; add eax, edx ; ret
0x0000000000130f09 : sub rax, qword ptr [rbx + 0x58] ; mov esi, edx ; sub esi, eax ; mov eax, esi ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000106d36 : sub rax, r14 ; mov qword ptr [rbp], r14 ; mov qword ptr [rsp + 0x18], rax ; mov rdx, rax ; jmp 0x106d9d
0x00000000000bbc71 : sub rdx, rsi ; add rdx, rcx ; mov rax, rdx ; add rsp, 0x18 ; ret
0x00000000000757bb : sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000007a34f : sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x00000000000bca57 : sub rsi, rcx ; mov qword ptr [rbx], rsi ; add rsp, 0xd0 ; pop rbx ; ret
0x000000000012b13c : sub rsp, -0x80 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f849f : sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012e89e : sub rsp, 0x60 ; call 0x13ab06
0x00000000001725c3 : sub rsp, 8 ; call 0x7e8a6
0x0000000000173380 : sub rsp, 8 ; cmp rbx, rbp ; jae 0x1733ab ; nop dword ptr [rax] ; call qword ptr [rbx]
0x000000000006efe1 : sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000127ab1 : syscall ; add rsp, 0x48 ; pop rbx ; pop rbp ; ret
0x000000000011753d : syscall ; cmp rax, -0x1000 ; ja 0x117524 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f8d15 : syscall ; cmp rax, -0x1000 ; ja 0xf8d6f ; add rsp, 0x60 ; pop rbx ; ret
0x000000000002bf19 : syscall ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000124333 : syscall ; mov eax, dword ptr [rsp + 0x10] ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003577d : syscall ; mov eax, r8d ; add rsp, 0x90 ; ret
0x00000000000c86ee : syscall ; xor edx, edx ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000013ac47 : test al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000bc19b : test al, 0 ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000001988d9 : test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000076241 : test al, al ; je 0x76271 ; add rsp, 8 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; ret
0x0000000000195d44 : test al, bh ; add byte ptr [rax], al ; adc al, 0x6a ; out dx, eax ; jmp rsp
0x000000000019870c : test al, bh ; add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x000000000019947c : test byte ptr [rax + 2], bl ; add byte ptr [rdi + rbx], ah ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000199324 : test byte ptr [rax + 2], dl ; add ah, dl ; clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x00000000000fa058 : test byte ptr [rax + rax], bh ; add byte ptr [rbp - 0x3f6bf040], al ; add rsp, 0x48 ; movzx eax, al ; ret
0x000000000008d80a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000075eda : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rdx] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013d82a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rdi + 8] ; lea rsi, qword ptr [rsp + 8] ; call qword ptr [rax]
0x0000000000086dfa : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x000000000011765a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x0000000000198420 : test byte ptr [rbp - 0x1b6b0008], dh ; add dword ptr [rax], eax ; mov ah, 0xb6 ; clc ; jmp rsp
0x000000000007e11e : test byte ptr [rbx], 0x80 ; jne 0x7e13b ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000001963ec : test byte ptr [rbx], ah ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000198010 : test byte ptr [rbx], bh ; clc ; dec esp ; leave ; add dword ptr [rax], eax ; cmp al, 0xf8 ; jmp rsp
0x0000000000196b84 : test byte ptr [rcx + 1], bl ; add byte ptr [rax + rdx*4 - 0xc], al ; call rsp
0x0000000000196b54 : test byte ptr [rdi + 1], dl ; add byte ptr [rax + rdi*2 - 0xc], ah ; call rsp
0x0000000000195848 : test byte ptr [rdi - 0x12], dl ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x0000000000195544 : test byte ptr [rdi - 0x9c0000], bh ; in eax, dx ; push qword ptr [rdi + rdi*4 - 0x1c0000] ; in eax, dx ; jmp rsp
0x000000000019646c : test byte ptr [rdi], ah ; add dword ptr [rax], eax ; add al, 0x5e ; push qword ptr [rdi + 0x5e540001] ; jmp rsp
0x0000000000195710 : test byte ptr [rdi], bh ; out dx, al ; jmp rsp
0x0000000000198bbc : test byte ptr [rdi], bl ; add al, byte ptr [rax] ; mov ah, 0x14 ; cli ; call rsp
0x0000000000198ed4 : test byte ptr [rdx + rax], dh ; add ah, al ; jbe 0x198ee4 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000196838 : test byte ptr [rdx - 0xd], bh ; call rsp
0x00000000001988d4 : test byte ptr [rdx], cl ; add al, byte ptr [rax] ; hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019688c : test byte ptr [rsi + 1], al ; add byte ptr [rsp + rcx*4 - 0xd], ah ; ljmp ptr [rsi + rax*2 - 0x72fbffff] ; jmp rsp
0x0000000000198090 : test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000198944 : test byte ptr [rsi], cl ; add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000104cf7 : test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001986ac : test ch, dh ; add dword ptr [rax], eax ; je 0x1986fe ; stc ; call rsp
0x000000000019818c : test cl, dl ; add dword ptr [rax], eax ; add al, 0x58 ; clc ; call rsp
0x0000000000195d7c : test dl, bh ; add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000196589 : test dl, dh ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196520 ; jmp rsp
0x0000000000196591 : test dl, dh ; jmp rsp
0x0000000000196588 : test dl, r14b ; dec esp ; add dword ptr cs:[rax], eax ; je 0x196521 ; jmp rsp
0x0000000000195d1d : test dword ptr [rax], 0xef643400 ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000195d25 : test dword ptr [rax], 0xef652400 ; jmp rsp
0x00000000001255b5 : test dword ptr [rbp - 0x7afffffe], ecx ; sal byte ptr [rsp + rcx - 0xa], cl ; ret 0xc602
0x00000000000f7397 : test dword ptr [rcx], ecx ; add byte ptr [rax], al ; add rsp, 0x18 ; ret
0x0000000000088796 : test dword ptr [rdx + 1], edi ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000088d12 : test dword ptr [rsi + 1], ebx ; add byte ptr [rax], al ; add rsp, 0x10 ; mov rax, rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000005f662 : test dword ptr [rsp - 0x76be0001], ebx ; ret 0x8b48
0x00000000000bc7ef : test eax, eax ; cmove rax, rdx ; add rsp, 0x28 ; ret
0x000000000011946a : test eax, eax ; je 0x119480 ; add rsp, 8 ; ret
0x000000000012d735 : test eax, eax ; je 0x12d72c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012df71 : test eax, eax ; je 0x12df81 ; mov rdi, rsp ; call rax
0x000000000012dfa9 : test eax, eax ; je 0x12dfd0 ; add rsp, 0x30 ; lea rax, qword ptr [rip + 0x297d88] ; pop rbx ; ret
0x000000000012e05c : test eax, eax ; je 0x12e06c ; mov rdi, rsp ; call rax
0x0000000000132ad7 : test eax, eax ; je 0x132aff ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132b97 : test eax, eax ; je 0x132bbf ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000132c87 : test eax, eax ; je 0x132caf ; mov eax, 1 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001463ef : test eax, eax ; je 0x14640f ; cmp byte ptr [rsp + 0x1f], 0 ; jne 0x14641f ; add rsp, 0x38 ; ret
0x0000000000146a42 : test eax, eax ; je 0x146a6f ; mov rax, qword ptr [rax] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x00000000000793b6 : test eax, eax ; je 0x79428 ; add rsp, 0x30 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ac37b : test eax, eax ; je 0xac375 ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ce352 : test eax, eax ; jg 0xce358 ; lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000012e0d1 : test eax, eax ; jne 0x12e0ec ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2c1 : test eax, eax ; jne 0x12f2dc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f37e : test eax, eax ; jne 0x12f350 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f42a : test eax, eax ; jne 0x12f44c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd54 : test eax, eax ; jne 0x12fd74 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd91 : test eax, eax ; jne 0x12fdac ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe41 : test eax, eax ; jne 0x12fe5c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe91 : test eax, eax ; jne 0x12feac ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff11 : test eax, eax ; jne 0x12ff2c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130dcb : test eax, eax ; jne 0x130e2e ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131c81 : test eax, eax ; jne 0x131c9c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a86 : test eax, eax ; jne 0x132aa4 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b21 : test eax, eax ; jne 0x132b3c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bbc : test eax, eax ; jne 0x132bdc ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c3b : test eax, eax ; jne 0x132c5c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013dd90 : test eax, eax ; jne 0x13de10 ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013e144 : test eax, eax ; jne 0x13e1ac ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e143 : test eax, eax ; jne 0x13e1ad ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e214 : test eax, eax ; jne 0x13e27c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e213 : test eax, eax ; jne 0x13e27d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e4 : test eax, eax ; jne 0x13e34c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e3 : test eax, eax ; jne 0x13e34d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a4 : test eax, eax ; jne 0x13e40c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a3 : test eax, eax ; jne 0x13e40d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001733d9 : test eax, eax ; jne 0x1733fe ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002e5f8 : test eax, eax ; jne 0x2e612 ; mov eax, dword ptr [rbp + 8] ; sub eax, dword ptr [rbx + 8] ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000076a00 : test eax, eax ; jne 0x769e7 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008fb3f : test eax, eax ; jne 0x8fb58 ; add rsp, 8 ; ret
0x000000000013a62d : test eax, eax ; js 0x13a64c ; add rsp, 0x18 ; mov eax, ebx ; pop rbx ; pop rbp ; ret
0x0000000000143891 : test eax, eax ; js 0x1438aa ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000014391a : test eax, eax ; js 0x14395d ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; ret
0x0000000000143d71 : test eax, eax ; js 0x143dae ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000143dd1 : test eax, eax ; js 0x143e0e ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cd23a : test eax, eax ; js 0xcd25f ; mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fdd95 : test eax, eax ; js 0xfddb4 ; mov eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x00000000000fe9c1 : test eax, eax ; mov eax, 0x100 ; cmovns rax, qword ptr [rsp] ; add rsp, 0x18 ; ret
0x0000000000127cce : test eax, eax ; mov eax, 0xffffffff ; cmovne eax, dword ptr [rsp + 0xc] ; add rsp, 0x18 ; ret
0x0000000000144191 : test eax, eax ; mov r8, qword ptr [rsp + 8] ; jns 0x1440b2 ; jmp 0x144170
0x000000000006c2b0 : test eax, eax ; sete al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x00000000000fa05c : test eax, eax ; sete al ; add rsp, 0x48 ; movzx eax, al ; ret
0x00000000000456c0 : test eax, eax ; sete al ; add rsp, 8 ; movzx eax, al ; ret
0x000000000012d6e6 : test eax, eax ; sete al ; add rsp, 8 ; ret
0x000000000008a83c : test eax, eax ; sete bl ; neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000000799d0 : test eax, eax ; setne al ; add rsp, 0x10 ; movzx eax, al ; neg eax ; pop rbx ; ret
0x000000000013d454 : test eax, eax ; setne al ; add rsp, 0x18 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x000000000013626b : test eax, eax ; setne al ; add rsp, 0x30 ; pop rbx ; movzx eax, al ; pop rbp ; pop r12 ; ret
0x00000000001358ed : test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; add eax, 1 ; ret
0x0000000000131c61 : test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; pop rbx ; pop rbp ; ret
0x00000000001329c9 : test eax, eax ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x00000000001308c7 : test eax, eax ; setne al ; movzx eax, al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000020d91 : test eax, eax ; setne dil ; add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x0000000000045f0c : test eax, eax ; setne dl ; neg edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000199fd9 : test eax, ebp ; call rsp
0x0000000000044f9c : test ebp, ebp ; je 0x44fb2 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004501c : test ebp, ebp ; je 0x45032 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000450ca : test ebp, ebp ; je 0x450e0 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000006bbe1 : test ebp, ebp ; je 0x6bc0d ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000b650d : test ebp, ebp ; je 0xb6523 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b65bb : test ebp, ebp ; je 0xb65d1 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b665d : test ebp, ebp ; je 0xb6673 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000013da0b : test ebp, ebp ; jne 0x13da6f ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x0000000000172243 : test ebp, ebp ; jne 0x172236 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000017237e : test ebp, ebp ; jne 0x172362 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007cc96 : test ebp, ebp ; jne 0x7cd6f ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000007cf47 : test ebp, ebp ; jne 0x7cfff ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000f0c59 : test ebp, ebp ; jne 0xf0c4b ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000139c75 : test ebp, ebp ; setne al ; neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000008a856 : test ebx, ebx ; je 0x8a875 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000001196b6 : test ebx, ebx ; jne 0x1196d5 ; add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000013d203 : test ebx, ebx ; jne 0x13d237 ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x000000000003a89a : test ebx, ebx ; jne 0x3a86a ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000cbb8d : test ebx, ebx ; mov eax, 0 ; cmovle eax, ebx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000d7ccd : test ecx, ecx ; je 0xd7ce0 ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000007d793 : test ecx, ecx ; mov qword ptr [rbx + 0x38], rsi ; cmovne eax, edx ; mov dword ptr [rbx], eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000012ae8a : test edi, edi ; jne 0x12ae82 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000db19c : test edx, edx ; jne 0xdb16c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fdf37 : test edx, edx ; js 0xfdf54 ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013962a : test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000f7341 : test esi, 0x16b8ff80 ; add byte ptr [rax], al ; add byte ptr [rsp + rax - 0xd], dh ; ret
0x000000000013da0a : test r13d, r13d ; jne 0x13da70 ; add rsp, 8 ; mov eax, 1 ; pop rbx ; pop rbp ; ret
0x00000000000bc7ee : test rax, rax ; cmove rax, rdx ; add rsp, 0x28 ; ret
0x0000000000119469 : test rax, rax ; je 0x119481 ; add rsp, 8 ; ret
0x000000000012d734 : test rax, rax ; je 0x12d72d ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012df70 : test rax, rax ; je 0x12df82 ; mov rdi, rsp ; call rax
0x000000000012e05b : test rax, rax ; je 0x12e06d ; mov rdi, rsp ; call rax
0x0000000000146a41 : test rax, rax ; je 0x146a70 ; mov rax, qword ptr [rax] ; add rax, qword ptr [rdx + 8] ; add rsp, 0x38 ; ret
0x00000000000ac37a : test rax, rax ; je 0xac376 ; mov rax, rbx ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000144190 : test rax, rax ; mov r8, qword ptr [rsp + 8] ; jns 0x1440b3 ; jmp 0x144171
0x000000000006c2af : test rax, rax ; sete al ; add rsp, 0x18 ; movzx eax, al ; neg eax ; ret
0x000000000012d6e5 : test rax, rax ; sete al ; add rsp, 8 ; ret
0x0000000000044f9b : test rbp, rbp ; je 0x44fb3 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000004501b : test rbp, rbp ; je 0x45033 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000450c9 : test rbp, rbp ; je 0x450e1 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000006bbe0 : test rbp, rbp ; je 0x6bc0e ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000b650c : test rbp, rbp ; je 0xb6524 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b65ba : test rbp, rbp ; je 0xb65d2 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000000b665c : test rbp, rbp ; je 0xb6674 ; mov qword ptr [rbp], rbx ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000172242 : test rbp, rbp ; jne 0x172237 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000017237d : test rbp, rbp ; jne 0x172363 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f0c58 : test rbp, rbp ; jne 0xf0c4c ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001196b5 : test rbx, rbx ; jne 0x1196d6 ; add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x00000000001196b4 : test rbx, rbx ; jne 0x1196d7 ; add rsp, 0x18 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x000000000003a899 : test rbx, rbx ; jne 0x3a86b ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000d7ccc : test rcx, rcx ; je 0xd7ce1 ; mov qword ptr [rcx], rax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000012ae89 : test rdi, rdi ; jne 0x12ae83 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000db19b : test rdx, rdx ; jne 0xdb16d ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000146b57 : vpsubq xmm15, xmm13, xmm7 ; add rsp, 0x18 ; ret
0x0000000000198381 : wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000002fa3 : wait ; scasb al, byte ptr [rdi] ; outsd dx, dword ptr [rsi] ; mov byte ptr [rbx], cl ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x0000000000080be6 : xchg byte ptr [rax], ah ; or byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000086cc6 : xchg byte ptr [rax], al ; or dword ptr [rax], eax ; add rsp, 0x80 ; mov rax, rbx ; pop rbx ; ret
0x000000000019734d : xchg byte ptr [rcx], al ; add byte ptr [rdx + rbp*4 - 0xa], al ; jmp rsp
0x000000000014831f : xchg byte ptr [rsp + rax], cl ; add byte ptr [rax - 0x7d], cl ; ret 0xeb10
0x0000000000148ae3 : xchg byte ptr [rsp + rcx - 0x7cb80000], ch ; ret 0xeb10
0x00000000001a5cb9 : xchg byte ptr [rsp + rcx*4], al ; add ecx, dword ptr [rbp + 0x4c0002] ; add byte ptr [rax], al ; insb byte ptr [rdi], dx ; ret
0x0000000000194ca5 : xchg dword ptr [rax], eax ; add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x0000000000197395 : xchg dword ptr [rcx], eax ; add byte ptr [rsi + rbp*4 - 0xa], al ; jmp rsp
0x00000000001728c5 : xchg dword ptr [rdx + rdi*8 - 1], eax ; add rsp, 0x80 ; add rsp, 8 ; ret
0x00000000001811cb : xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp ; ret
0x0000000000194ee5 : xchg eax, ebp ; add byte ptr [rax], al ; cmp ebp, ebx ; call rsp
0x0000000000130e1a : xchg eax, ebp ; nop dword ptr [rax + rax] ; mov rax, qword ptr [rbx + 8] ; mov rsi, rsp ; mov rdi, rbx ; call qword ptr [rax]
0x000000000013962d : xchg eax, ebp ; sal bh, 0xd8 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139c78 : xchg eax, ebp ; sal bh, 0xd8 ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x000000000010d760 : xchg eax, ebp ; sal bh, 0xd8 ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000194229 : xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000194225 : xchg eax, ebx ; cld ; ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000195e11 : xchg eax, ecx ; out dx, eax ; dec esp ; std ; add byte ptr [rax], al ; in al, -0x6f ; out dx, eax ; jmp rsp
0x0000000000195e19 : xchg eax, ecx ; out dx, eax ; jmp rsp
0x000000000014eccb : xchg eax, ecx ; pop rsp ; add al, byte ptr [rax] ; mov edx, dword ptr [rcx + rdx*4] ; mov eax, dword ptr [rcx + rax*4] ; sub eax, edx ; ret
0x00000000000c04a5 : xchg eax, edi ; xor byte ptr ss:[rax], al ; jne 0xc04c5 ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000194231 : xchg eax, edx ; cld ; call rsp
0x000000000019422d : xchg eax, edx ; cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x000000000011819f : xchg eax, edx ; idiv edi ; add rsp, 8 ; add rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ffa1a : xchg eax, edx ; push rcx ; dec dword ptr [rax - 0x77] ; add eax, 0x2c2d5b ; add rsp, 8 ; ret
0x000000000006e51e : xchg eax, esi ; adc al, 0xfb ; dec dword ptr [rcx + 0x415d5be8] ; pop rsp ; ret
0x00000000001ac384 : xchg eax, esi ; add byte ptr [rax], al ; add byte ptr [rax], al ; add al, byte ptr [rcx + 0x283100e] ; push rsp ; ret
0x0000000000002f9f : xchg eax, esi ; or ch, byte ptr [rsi] ; ficomp dword ptr [rbx + 0xb886fae] ; and bh, byte ptr [rax - 0x52] ; sub ebx, dword ptr [rsp + rax*2] ; nop ; ret 0x5bdb
0x00000000001990d4 : xchg eax, esp ; add al, byte ptr [rax] ; push rsp ; movsd dword ptr [rdi], dword ptr [rsi] ; cli ; jmp rsp
0x00000000001991ac : xchg eax, esp ; add r8b, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x0000000000197e90 : xchg eax, esp ; and al, 0xf8 ; call rsp
0x0000000000194ad8 : xchg eax, esp ; and dl, ch ; jmp rsp
0x0000000000195110 : xchg eax, esp ; and ebp, esp ; jmp rsp
0x0000000000196720 : xchg eax, esp ; call rsp
0x000000000019466c : xchg eax, esp ; imul eax, dword ptr [rax], 0xe9938400 ; jmp rsp
0x0000000000194de0 : xchg eax, esp ; jl 0x194dd0 ; jmp rsp
0x0000000000195d88 : xchg eax, esp ; jno 0x195d7d ; call rsp
0x0000000000196260 : xchg eax, esp ; jns 0x19625f ; push qword ptr [rdx + rbx + 0x79d40001] ; int1 ; jmp rsp
0x0000000000187dfc : xchg eax, esp ; mov bh, 0xf5 ; call rsp
0x00000000001991b0 : xchg eax, esp ; mov cl, 0xfa ; call rsp
0x00000000001954ac : xchg eax, esp ; mov ebx, 0xe9a40000 ; in eax, dx ; call rsp
0x000000000019551c : xchg eax, esp ; mov esi, 0xfcf40000 ; in eax, dx ; jmp rsp
0x0000000000195e41 : xchg eax, esp ; out dx, eax ; call rsp
0x0000000000195e39 : xchg eax, esp ; out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000198388 : xchg eax, esp ; pushfq ; clc ; call rsp
0x000000000019807c : xchg eax, esp ; retf ; add dword ptr [rax], eax ; hlt ; clc ; jmp rsp
0x00000000001963e8 : xchg eax, esp ; retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x00000000000fffea : xchg eax, esp ; sar dword ptr [rsp + rbx*2], 0xf ; xchg eax, esp ; ret 0xd108
0x0000000000117fee : xchg rax, rsp ; idiv edi ; ret
0x00000000000ba841 : xlatb ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000009846e : xlatb ; add rsp, 8 ; mov rbp, rdx ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000199209 : xlatb ; cli ; jmp rsp
0x0000000000083f3d : xlatb ; mov qword ptr [rsp + 0x18], rdx ; mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r10 ; call qword ptr [rax]
0x000000000008040d : xor al, 0 ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000080bfd : xor al, 0 ; jae 0x80bb8 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000198c00 : xor al, 0x1c ; cli ; call rsp
0x0000000000198638 : xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x0000000000199394 : xor al, 0x53 ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000195d20 : xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000196ca8 : xor al, 0x68 ; cmc ; call rsp
0x00000000001963b0 : xor al, 0x9d ; int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000199708 : xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x00000000001990a0 : xor al, 0xa3 ; cli ; call rsp
0x0000000000195e78 : xor al, 0xb3 ; out dx, eax ; jmp rsp
0x0000000000195ed0 : xor al, 0xc5 ; out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000195ed8 : xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000198488 : xor al, 0xcf ; clc ; jmp rsp
0x0000000000194ed1 : xor al, 0xeb ; call rsp
0x00000000000fc50a : xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000198681 : xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a1 : xor al, 0xfb ; call rsp
0x0000000000196665 : xor al, 1 ; add byte ptr [rbx + rsi*8 - 0xe], ah ; call rsp
0x0000000000198ed5 : xor al, 2 ; add ah, al ; jbe 0x198ee3 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000198edd : xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x00000000001441ea : xor bl, byte ptr [rdi] ; sub byte ptr [rax], al ; mov eax, 1 ; add rsp, 8 ; ret
0x0000000000122096 : xor byte ptr [r8 + 1], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000dfc5f : xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000ff2ee : xor byte ptr [rax + 0x42], al ; sldt word ptr [rbx] ; push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x00000000000e4c4f : xor byte ptr [rax + 0x63], cl ; add al, 0x82 ; mov rbp, rsi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x0000000000122097 : xor byte ptr [rax + 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000101046 : xor byte ptr [rax + rax], ch ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000101003 : xor byte ptr [rax + rax], ch ; add rsp, 8 ; ret
0x00000000000842b8 : xor byte ptr [rax + rcx*4 + 0x5c], al ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000299d5 : xor byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000023f7b : xor byte ptr [rax - 0x75], cl ; je 0x23fb0 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024fb2 : xor byte ptr [rax - 0x75], cl ; je 0x24fe7 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1e : xor byte ptr [rax - 0x75], cl ; je 0x26c53 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000013846e : xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000020749 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb68 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x0000000000047bc5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x00000000000bd25b : xor byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000bd49a : xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbd1 : xor byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000798c1 : xor byte ptr [rax], al ; je 0x798d2 ; add rsp, 0x38 ; ret
0x00000000000c04a7 : xor byte ptr [rax], al ; jne 0xc04c3 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000c04bd : xor byte ptr [rax], al ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000bbbf5 : xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x0000000000074306 : xor byte ptr [rbx + 0x374fff8], al ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000007e4ed : xor byte ptr [rbx - 0x438a0008], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001304fc : xor byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x0000000000079809 : xor byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000dfc60 : xor byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000001942e0 : xor byte ptr [rsp + rdi*8 - 0x36c5f01], dl ; call qword ptr [rax]
0x0000000000193894 : xor byte ptr [rsp + rdi*8 - 1], al ; adc byte ptr [rsi - 4], al ; push rax ; cld ; call rax
0x00000000000c04a6 : xor byte ptr ss:[rax], al ; jne 0xc04c4 ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000126c6d : xor cl, byte ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000014391d : xor cl, byte ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; ret
0x0000000000194b81 : xor dl, ch ; jmp rsp
0x0000000000100f8e : xor dword ptr [rax + rax], ebp ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000198e55 : xor dword ptr [rdx], eax ; add ah, al ; insd dword ptr [rdi], dx ; cli ; call rsp
0x00000000001995a9 : xor eax, 0x65cfffb ; add al, byte ptr [rax] ; je 0x1995f1 ; sti ; jmp rsp
0x0000000000020746 : xor eax, dword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb65 : xor eax, dword ptr [0x30] ; add rsp, 8 ; jmp rax
0x0000000000047bc2 : xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x00000000000909ec : xor eax, dword ptr [rax] ; add rsp, 0x100 ; ret
0x000000000008a9e4 : xor eax, dword ptr [rax] ; add rsp, 0x18 ; ret
0x000000000008fb28 : xor eax, dword ptr [rax] ; add rsp, 8 ; ret
0x000000000008fb21 : xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x000000000008426e : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x000000000008b55d : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000084176 : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rcx ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x000000000008fb3d : xor eax, dword ptr [rax] ; test eax, eax ; jne 0x8fb5a ; add rsp, 8 ; ret
0x000000000008a854 : xor eax, dword ptr [rax] ; test ebx, ebx ; je 0x8a877 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000196635 : xor eax, dword ptr [rcx] ; add byte ptr [rdx + rdi*4 - 0xe], al ; jmp rsp
0x0000000000086719 : xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x00000000000bcd00 : xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000074e1e : xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c7f58 : xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139f3c : xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000360cb : xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x0000000000097be0 : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cca4c : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000124b12 : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000feae8 : xor eax, eax ; add rsp, 0x190 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f9c20 : xor eax, eax ; add rsp, 0x198 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013daa9 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013dbf0 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bfdf5 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000003b846 : xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000879fb : xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000121238 : xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000029cf9 : xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001399a7 : xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x0000000000146a58 : xor eax, eax ; add rsp, 0x38 ; ret
0x000000000007059b : xor eax, eax ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001462bf : xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000090410 : xor eax, eax ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000d72d0 : xor eax, eax ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fe32c : xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000008018b : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003b0c0 : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a30c : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbfe : xor eax, eax ; add rsp, 8 ; ret
0x00000000000d808d : xor eax, eax ; cmp ebx, 0xa ; je 0xd80fe ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000039d34 : xor eax, eax ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000013d247 : xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000000f16c0 : xor eax, eax ; mov qword ptr [r8], rsi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008a9dd : xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x0000000000117661 : xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000000bb419 : xor eax, eax ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000ad318 : xor eax, eax ; mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012e715 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x0000000000138468 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134df0 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500a : xor eax, eax ; mov rsi, qword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x00000000000acd89 : xor eax, eax ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad198 : xor eax, eax ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000144b47 : xor eax, eax ; rep movsq qword ptr [rdi], qword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000f849d : xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000139c73 : xor eax, eax ; test ebp, ebp ; setne al ; neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000139628 : xor eax, eax ; test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ad10c : xor eax, eax ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000006bbf0 : xor ebp, ebp ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000194ec9 : xor ebx, ebp ; push qword ptr [rsp + rdx*4] ; add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x000000000008a85a : xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x000000000006bb78 : xor ebx, ebx ; add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000103345 : xor ebx, ebx ; mov dword ptr [rdx], eax ; add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000143407 : xor ebx, ebx ; mov dword ptr fs:[rdx], eax ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x000000000008a83a : xor ebx, ebx ; test eax, eax ; sete bl ; neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000000ba402 : xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ad10e : xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000197fe9 : xor edi, eax ; jmp rsp
0x0000000000197fe1 : xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x0000000000195c69 : xor edi, ebp ; call rsp
0x0000000000020d8f : xor edi, edi ; test eax, eax ; setne dil ; add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x00000000000c86f0 : xor edx, edx ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000000f6f4f : xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c04c1 : xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000ad110 : xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000012ccbe : xor edx, edx ; mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x000000000008040c : xor esi, dword ptr [rax + rax] ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000001109fd : xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000000bb418 : xor r8d, r8d ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000acd88 : xor r8d, r8d ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad197 : xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad10b : xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000020745 : xor rax, qword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb64 : xor rax, qword ptr [0x30] ; add rsp, 8 ; jmp rax
0x0000000000047bc1 : xor rax, qword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000020744 : xor rax, qword ptr fs:[0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb63 : xor rax, qword ptr fs:[0x30] ; add rsp, 8 ; jmp rax
0x0000000000047bc0 : xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
