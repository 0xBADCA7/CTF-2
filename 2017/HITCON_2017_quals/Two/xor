0x00000000000cd23d : adc ah, byte ptr [rcx + rcx*4 + 0x2b] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a6468 : adc al, 0 ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb58 : adc al, 0 ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000000c9002 : adc al, 0 ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a5478 : adc al, 0 ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a6438 : adc al, 0 ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f38 : adc al, 0 ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001aab38 : adc al, 0 ; add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001acb40 : adc al, 0 ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c8 : adc al, 0 ; add byte ptr [rax], al ; je 0x1a64a4 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab808 : adc al, 0 ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f8 : adc al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x000000000019cab0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000001acaa8 : adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a6498 : adc al, 0 ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe88 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae688 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae988 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec88 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4588 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a4988 : adc al, 0 ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001ac9a0 : adc al, 0 ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x000000000003a240 : adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x000000000013e683 : adc al, 0x48 ; sub eax, esi ; mov rdx, rax ; mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6b1 ; ret
0x000000000007457e : adc al, 0x8a ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x00000000000dff23 : adc al, 0x92 ; lea rdi, qword ptr [rax + rsi*4] ; shl rdx, 2 ; xor esi, esi ; call 0x91820
0x0000000000048498 : adc al, 0xc0 ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000004849c : adc al, 0xc6 ; xor eax, eax ; pop rbx ; ret
0x0000000000036294 : adc al, 0xc7 ; xor eax, eax ; ret
0x00000000001a646c : adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a716c : adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000000aa119 : adc al, 0xf3 ; movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000a5b28 : adc al, byte ptr [rcx] ; movlpd qword ptr [rdx], xmm0 ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x0000000000025ee4 : adc al, ch ; push rsi ; xor eax, 0x89410000 ; ret
0x00000000000aa096 : adc bl, dh ; movq qword ptr [rdi], mm0 ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa0f6 : adc bl, dh ; movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa177 : adc bl, dh ; movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa0b7 : adc bl, dh ; movq qword ptr [rdi], mm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa278 : adc bl, dh ; movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa095 : adc bl, r14b ; movq qword ptr [rdi], mm0 ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa0f5 : adc bl, r14b ; movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa176 : adc bl, r14b ; movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa0b6 : adc bl, r14b ; movq qword ptr [rdi], mm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x0000000000079102 : adc byte ptr [r10 + 0x2a], r14b ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000794d2 : adc byte ptr [r10 - 0x18], r14b ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x000000000003b549 : adc byte ptr [rax + 0xb], bh ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b548 : adc byte ptr [rax + 0xb], r15b ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x00000000000206ff : adc byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000fe48b : adc byte ptr [rax - 0x75], cl ; add eax, 0x2c2a35 ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x0000000000074577 : adc byte ptr [rax - 0x77], cl ; jo 0x745cb ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x00000000000a074f : adc byte ptr [rax - 0x7d], cl ; mov dword ptr [rcx], 0x840fbe0f ; leave ; jne 0xa0756 ; xor eax, eax ; ret
0x00000000000fd98b : adc byte ptr [rax], al ; add bl, al ; nop ; xor eax, eax ; ret
0x000000000008b4a1 : adc byte ptr [rax], al ; mov rdx, rax ; xor edi, edi ; xor eax, eax ; call 0x6e181
0x00000000001a0dee : adc byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; fsub qword ptr [rcx] ; add byte ptr [rax], al ; call 0x2719fb74
0x0000000000130dca : adc byte ptr [rbp + 0x485175c0], al ; add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000170d0f : adc byte ptr [rbx + 0x463bfc47], cl ; cld ; jne 0x170d2b ; xor eax, eax ; ret
0x00000000001acaa3 : adc byte ptr [rbx + 0xe], ah ; or byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000000ba40b : adc byte ptr [rbx - 0x3d], bl ; nop ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000001b5c90 : adc byte ptr [rcx + 0xe], al ; or byte ptr [rax + 0xb], cl ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret
0x00000000001b5be7 : adc byte ptr [rcx + 0xe], al ; or byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; pushfq ; ret 1
0x00000000001b5bb3 : adc byte ptr [rcx + 0xe], al ; or byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret 1
0x00000000001a7163 : adc byte ptr [rcx + 0xe], cl ; or byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000001176ca : adc byte ptr [rcx + rbx + 0x48], dh ; add esp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000004540b : adc byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000079103 : adc byte ptr [rdx + 0x2a], dh ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000ad106 : adc byte ptr [rdx + 1], ch ; push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad194 : adc byte ptr [rdx + 1], ch ; xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000794d3 : adc byte ptr [rdx - 0x18], dh ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x000000000016c2bb : adc byte ptr [rdx], cl ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016ed03 : adc byte ptr [rsi - 0x70], ah ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x0000000000116665 : adc cl, byte ptr [rax - 0x7d] ; ror byte ptr [rax + 0x48], 0x39 ; sal byte ptr [rdx - 0xf], 1 ; xor eax, eax ; ret
0x00000000000868cd : adc cl, byte ptr [rax - 0x7d] ; ror byte ptr [rax], 0x48 ; cmp edx, eax ; ja 0x868d5 ; xor eax, eax ; ret
0x00000000000a5b90 : adc cl, byte ptr [rcx + 8] ; movlpd qword ptr [rdx + 8], xmm1 ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000aadad : adc cl, byte ptr [rdi] ; mov dh, 0xca ; xor edx, edx ; pop rbx ; and eax, 0x7ff80000 ; div ecx ; mov eax, eax ; ret
0x00000000000f71b6 : adc dword ptr [rax + 0x39], ecx ; fmul dword ptr [rdi] ; lahf ; rcr byte ptr [rbx - 0x3d], 0x90 ; xor eax, eax ; pop rbx ; ret
0x000000000003a23c : adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x0000000000020743 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb62 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x00000000000645a3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003561d : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; jmp rax
0x0000000000122ed6 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e4 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704bf : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3bf : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e879 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed39 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707a9 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd1f : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf8f : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76ac : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bbf : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86e : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000000645cc : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c934 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c318 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059694 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f0 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db14 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f5 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x11753f ; call rax
0x000000000004dae3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x000000000012b799 : adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000085763 : adc dword ptr [rdi - 0x389bffcd], esi ; add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000143aa5 : adc eax, 0x27cb36 ; test eax, eax ; jne 0x143ac4 ; xor eax, eax ; pop rbx ; ret
0x00000000000c04ba : adc eax, 0x300989 ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000abcda : adc eax, 0x3b30478b ; xor byte ptr [rbp + 0x3d], r14b ; ret
0x000000000004dd72 : adc eax, dword ptr [rax] ; movsxd rax, dword ptr [rax + rdx*4] ; add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x00000000000a5b2c : adc eax, dword ptr [rdx] ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000db19a : adc ecx, dword ptr [rax - 0x7b] ; sal byte ptr [rbp - 0x40], cl ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000098c04 : adc ecx, dword ptr [rax - 0x7d] ; rol dword ptr [rcx], 0x48 ; sub esi, 1 ; jne 0x98c10 ; xor edi, edi ; mov rax, rdi ; ret
0x00000000000a5b95 : adc ecx, dword ptr [rdx + 8] ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x000000000003639c : adc edi, dword ptr [rax + 1] ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000004862e : adc esi, dword ptr [rax + rcx + 0x48] ; mov eax, dword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000048493 : adc esi, dword ptr [rax + rcx + 0x49] ; mov edx, dword ptr [rax + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x00000000001169d3 : adc esp, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001a8f3b : add ah, ah ; cmc ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001a643b : add ah, ah ; retf 0 ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x0000000000194b7f : add ah, ah ; xor dl, ch ; jmp rsp
0x00000000001aca33 : add ah, bl ; xor byte ptr [rcx], al ; add byte ptr [rax + 0x22], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001acb43 : add ah, ch ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001b072b : add ah, dl ; insd dword ptr [rdi], dx ; add dword ptr [rax], eax ; xor byte ptr [rdx - 0xa], ah ; jmp qword ptr [rsi]
0x00000000001050fa : add al, 0 ; add byte ptr [rax], al ; je 0x10574f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105081 : add al, 0 ; add byte ptr [rax], al ; je 0x10576f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549d : add al, 0 ; add byte ptr [rax], al ; je 0x10578f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105424 : add al, 0 ; add byte ptr [rax], al ; je 0x1057af ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105378 : add al, 0 ; add byte ptr [rax], al ; je 0x1057cf ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052ff : add al, 0 ; add byte ptr [rax], al ; je 0x1057ef ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010521f : add al, 0 ; add byte ptr [rax], al ; je 0x10580f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a6 : add al, 0 ; add byte ptr [rax], al ; je 0x10582f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f70 : add al, 0 ; add byte ptr [rax], al ; je 0x10584f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef7 : add al, 0 ; add byte ptr [rax], al ; je 0x10586f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b54 : add al, 0 ; add byte ptr [rax], al ; je 0x10588f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4b : add al, 0 ; add byte ptr [rax], al ; je 0x1058af ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd2 : add al, 0 ; add byte ptr [rax], al ; je 0x1058cf ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcd : add al, 0 ; add byte ptr [rax], al ; je 0x1058ef ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf2 : add al, 0 ; add byte ptr [rax], al ; je 0x10590f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c79 : add al, 0 ; add byte ptr [rax], al ; je 0x10592f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000003a4e9 : add al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008bb22 : add al, 0 ; add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000016bd5b : add al, 0 ; add byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x00000000000dbdf7 : add al, 0 ; cmp eax, 6 ; je 0xdbe2f ; cmp eax, 3 ; je 0xdbe1f ; xor eax, eax ; pop rbx ; ret
0x000000000011673e : add al, 0 ; test rdx, rdx ; cmove rdx, rax ; xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x00000000000aadac : add al, 0x12 ; movzx ecx, dl ; xor edx, edx ; pop rbx ; and eax, 0x7ff80000 ; div ecx ; mov eax, eax ; ret
0x0000000000048492 : add al, 0x13 ; je 0x484ad ; mov rdx, qword ptr [r8 + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x00000000000a1354 : add al, 0x17 ; movzx ecx, byte ptr [rsi + rdx] ; test al, al ; jne 0xa134e ; xor eax, eax ; sub eax, ecx ; ret
0x00000000000f1023 : add al, 0x24 ; je 0xf1005 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000020747 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb66 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x00000000000645a7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000035621 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; jmp rax
0x0000000000122eda : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e8 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87d : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3d : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ad : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd23 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf93 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76b0 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bc3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a872 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000000645d0 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c938 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31c : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059698 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f4 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db18 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f9 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x11753b ; call rax
0x00000000000c7c27 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xc7c57 ; mov rsi, rdi ; xor edi, edi ; call rax
0x000000000004dae7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x00000000001acb5c : add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x0000000000022462 : add al, 0x3a ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000f7048 : add al, 0x48 ; add esp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000106964 : add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000008dbd4 : add al, 0x48 ; xor eax, eax ; ret
0x000000000016ec33 : add al, 0x73 ; xor eax, 0x7701fa80 ; cmp dh, byte ptr [rdx + 2] ; mov byte ptr [rdi], cl ; vzeroupper ; ret
0x00000000001507ce : add al, 0x73 ; xor eax, dword ptr [rax + 0x3b7701fa] ; jb 0x1507ec ; movzx ecx, byte ptr [rsi] ; mov byte ptr [rdi], cl ; ret
0x00000000000fcbe2 : add al, 0x77 ; or esp, dword ptr [rsi - 0x77] ; push rsi ; xor ax, ax ; ret
0x000000000003ae6c : add al, 0x82 ; mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x00000000000e25e4 : add al, 0x85 ; leave ; jle 0xe2669 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2608
0x00000000000e25e3 : add al, 0x85 ; leave ; jle 0xe266a ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2609
0x000000000004dd76 : add al, 0x90 ; add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x000000000003d178 : add al, 0x92 ; mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c9
0x00000000000403c3 : add al, 0x92 ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40412
0x0000000000104cf8 : add al, 0xc ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000000d820d : add al, 0xc0 ; xor eax, eax ; bt r8, rcx ; jb 0xd8198 ; ret
0x00000000000362b7 : add al, 0xd7 ; xor eax, eax ; ret
0x0000000000048633 : add al, 0xf0 ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000048637 : add al, 0xf1 ; xor eax, eax ; pop rbx ; ret
0x0000000000116b58 : add al, 0xfb ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000006c40d : add al, 1 ; add byte ptr [rax], al ; add bl, al ; nop dword ptr [rax + rax] ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x000000000006c41a : add al, 1 ; xor eax, eax ; ret
0x000000000016c9c7 : add al, 3 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000d6078 : add al, 7 ; mov r9, rdi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a3
0x0000000000078c9b : add al, 8 ; add byte ptr [rax], al ; jne 0x78cc5 ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x000000000019909d : add al, byte ptr [r8] ; xor al, 0xa3 ; cli ; call rsp
0x0000000000104318 : add al, byte ptr [rax] ; add byte ptr [rax - 0x75], cl ; xor ecx, dword ptr [rax - 0x75] ; jl 0x104356 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000104d8e : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x1055cf ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503d : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x1055ef ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b10 : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x10560f ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bb : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x10562f ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000003a308 : add al, byte ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010774a : add al, byte ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016d8de : add al, byte ptr [rax] ; add byte ptr [rbx + 0x4f3bfc4e], cl ; cld ; jne 0x16db27 ; xor eax, eax ; ret
0x00000000000e25df : add al, byte ptr [rax] ; add byte ptr [rbx - 0x367afbb3], cl ; jle 0xe266e ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260d
0x000000000019959e : add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x0000000000198bfe : add al, byte ptr [rax] ; xor al, 0x1c ; cli ; call rsp
0x000000000019909e : add al, byte ptr [rax] ; xor al, 0xa3 ; cli ; call rsp
0x00000000000d8f79 : add al, byte ptr [rbp - 0x77] ; xor byte ptr [rcx + 0x63], cl ; add r9b, r13b ; ret
0x00000000000e0bb7 : add al, byte ptr [rsi - 0x73] ; xor al, 0x2b ; call 0x913bb
0x0000000000130951 : add al, ch ; sub eax, esi ; out dx, al ; dec dword ptr [rax - 0x7b] ; ror byte ptr [rax - 0x77], 0xc3 ; jne 0x130903 ; xor eax, eax ; pop rbx ; ret
0x0000000000086717 : add al, ch ; xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000008a92c : add bh, al ; add eax, 0x338eb1 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000006f07f : add bh, bh ; loopne 0x6f0f4 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x000000000014623e : add bh, bh ; nop ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx + 0x10], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x0000000000146469 : add bh, bh ; nop ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x00000000001801e0 : add bh, byte ptr [rbx + rbp*8] ; inc esi ; xor eax, 0x3b57ffeb ; jmp 0x1801f6
0x00000000000d691d : add bl, al ; nop ; mov byte ptr [rdi + 8], 2 ; xor eax, eax ; ret
0x00000000000fd98d : add bl, al ; nop ; xor eax, eax ; ret
0x000000000006c411 : add bl, al ; nop dword ptr [rax + rax] ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x000000000007f146 : add bl, al ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x000000000014614a : add bl, al ; nop dword ptr [rax] ; xor eax, eax ; ret
0x000000000011b1b4 : add bl, al ; nop word ptr cs:[rax + rax] ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x000000000012dea4 : add bl, al ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000001379ce : add bl, al ; xor eax, eax ; ret
0x00000000000aa07f : add bl, dh ; movq mm0, qword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000ceb05 : add byte ptr [r8], r8b ; je 0xceb21 ; cmp rax, 0x7275 ; jne 0xceafa ; xor eax, eax ; ret
0x00000000000ceb04 : add byte ptr [r8], r8b ; je 0xceb22 ; cmp rax, 0x7275 ; jne 0xceafb ; xor eax, eax ; ret
0x000000000004dd73 : add byte ptr [rax + 0x63], cl ; add al, 0x90 ; add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x0000000000036287 : add byte ptr [rax + 0x63], cl ; ror dword ptr [rax - 0x2d], -0x1e ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x00000000000f732e : add byte ptr [rax + 0x6607b70f], dl ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000014637f : add byte ptr [rax + 0xf247c], al ; jne 0x14639e ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000001b35f7 : add byte ptr [rax + rax], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x000000000003a4e8 : add byte ptr [rax + rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008bb21 : add byte ptr [rax + rax], al ; add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000dbdf6 : add byte ptr [rax + rax], al ; cmp eax, 6 ; je 0xdbe30 ; cmp eax, 3 ; je 0xdbe20 ; xor eax, eax ; pop rbx ; ret
0x00000000001a7167 : add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x0000000000079219 : add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001aa987 : add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x00000000000795d9 : add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000110589 : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000089e0e : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008bb27 : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085769 : add byte ptr [rax + rax], cl ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000001a6467 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb57 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000000c9001 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001a5477 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a6437 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f37 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001aab37 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001acb3f : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; je 0x1a64a5 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab807 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acaa7 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000001a6497 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe87 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae687 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae987 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec87 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4587 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a4987 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001ac99f : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001a716b : add byte ptr [rax + rbx*8], dl ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000000ceb07 : add byte ptr [rax + rcx + 0x48], dh ; cmp eax, 0x7275 ; jne 0xceaf8 ; xor eax, eax ; ret
0x000000000002d86b : add byte ptr [rax + rcx*2 - 0x77], ah ; xor dword ptr [rax + 0x39], ecx ; ror byte ptr [rax - 0x39], 1 ; ret 0xffff
0x00000000000363a1 : add byte ptr [rax - 0x2d], cl ; loopne 0x363f7 ; or dword ptr [rdi], eax ; xor eax, eax ; ret
0x0000000000020405 : add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000c7cfd : add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x000000000002f5ef : add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov rdi, r13 ; call rax
0x000000000012b795 : add byte ptr [rax - 0x3f], cl ; iretd ; adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000000b73df : add byte ptr [rax - 0x73], cl ; xor al, 0x83 ; sub r10, rax ; jmp 0xb7409
0x00000000000453ed : add byte ptr [rax - 0x73], cl ; xor eax, 0x1cb ; call rax
0x00000000000704c8 : add byte ptr [rax - 0x73], cl ; xor eax, 0x30 ; call rax
0x00000000000c59f0 : add byte ptr [rax - 0x73], cl ; xor eax, 0xc1570 ; mov edx, ecx ; movsxd rax, dword ptr [rsi + rdx*4] ; add rax, rsi ; jmp rax
0x00000000000aac5f : add byte ptr [rax - 0x73], cl ; xor eax, 0xdb859 ; movsxd rax, dword ptr [rsi + rdi*4] ; add rax, rsi ; jmp rax
0x000000000007ed42 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffdcd6 ; call rax
0x000000000007e882 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe196 ; call rax
0x000000000007e3c8 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe650 ; call rax
0x000000000007cf98 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffa80 ; call rax
0x000000000007cd28 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffcf0 ; call rax
0x00000000000707b2 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffd46 ; call rax
0x0000000000146a9f : add byte ptr [rax - 0x75], cl ; add eax, 0x27a3d1 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000bbc0f : add byte ptr [rax - 0x75], cl ; add eax, 0x305261 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x000000000008575f : add byte ptr [rax - 0x75], cl ; add eax, 0x33b711 ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x000000000013999e : add byte ptr [rax - 0x75], cl ; and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000013564f : add byte ptr [rax - 0x75], cl ; jg 0x1356a5 ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013b80f : add byte ptr [rax - 0x75], cl ; jg 0x13b865 ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013bf2f : add byte ptr [rax - 0x75], cl ; jg 0x13bf8d ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x00000000001046a7 : add byte ptr [rax - 0x75], cl ; xor byte ptr [rax - 0x75], cl ; jge 0x10467e ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000645d5 : add byte ptr [rax - 0x75], cl ; xor eax, 0x35c993 ; call rax
0x000000000005c93d : add byte ptr [rax - 0x75], cl ; xor eax, 0x36462b ; call rax
0x000000000005c321 : add byte ptr [rax - 0x75], cl ; xor eax, 0x364c47 ; call rax
0x000000000005969d : add byte ptr [rax - 0x75], cl ; xor eax, 0x3678cb ; call rax
0x00000000000509f9 : add byte ptr [rax - 0x75], cl ; xor eax, 0x37056f ; call rax
0x000000000004db1d : add byte ptr [rax - 0x75], cl ; xor eax, 0x37344b ; call rax
0x000000000010431a : add byte ptr [rax - 0x75], cl ; xor ecx, dword ptr [rax - 0x75] ; jl 0x104354 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x000000000003a8ae : add byte ptr [rax - 0x7760577], dl ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003b545 : add byte ptr [rax - 0x77], cl ; adc byte ptr [rax + 0xb], r15b ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x0000000000108ebf : add byte ptr [rax - 0x77], cl ; clc ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x000000000003a8bf : add byte ptr [rax - 0x77], cl ; cli ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x00000000000801a6 : add byte ptr [rax - 0x77], cl ; cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x0000000000086cd0 : add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx - 0x3d] ; xor eax, eax ; pop rbx ; ret
0x00000000000dfca7 : add byte ptr [rax - 0x77], cl ; fucompi st(0) ; sal byte ptr [rdx - 1], 0xff ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000060ed0 : add byte ptr [rax - 0x77], cl ; jp 0x60eed ; mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0fe
0x0000000000035616 : add byte ptr [rax - 0x77], cl ; out 0x48, al ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000104acd : add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000006eeaf : add byte ptr [rax - 0x77], cl ; xchg eax, ecx ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; ret
0x000000000014719d : add byte ptr [rax - 0x77], cl ; xlatb ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000008681a : add byte ptr [rax - 0x77], cl ; xor byte ptr [rax - 0x75], cl ; add eax, 0x33a6bb ; mov qword ptr [rax], rdi ; ret
0x0000000000134b8c : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x134ba4 ; ret
0x000000000013791c : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x137934 ; ret
0x0000000000137934 : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x13794c ; ret
0x00000000001381ac : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x1381c4 ; ret
0x00000000001381c4 : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x1381dc ; ret
0x00000000001381f4 : add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x13820c ; ret
0x0000000000086918 : add byte ptr [rax - 0x77], cl ; xor eax, 0x33ceb8 ; xor eax, eax ; ret
0x000000000011b1bf : add byte ptr [rax - 0x77], cl ; xor eax, eax ; ret
0x00000000000ba3ff : add byte ptr [rax - 0x77], cl ; xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000100892 : add byte ptr [rax - 0x78], al ; xor eax, 0x2c3836 ; mov rax, rdi ; mov byte ptr [r9 - 1], 0 ; ret
0x000000000008dbcf : add byte ptr [rax - 0x7b], cl ; div byte ptr [rbp + 4] ; xor rax, rax ; ret
0x00000000000ff6ae : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp - 0x2c], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff87f : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp - 0x2d], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000f8100 : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000003c636 : add byte ptr [rax - 0x7d], cl ; sti ; xor dword ptr [rbp - 0x5f], 0xc6f7db31 ; add byte ptr [rax], al ; add byte ptr [rax], 0xf ; xchg eax, ebp ; ret
0x0000000000195ecf : add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000086714 : add byte ptr [rax], 0 ; add al, ch ; xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000002f587 : add byte ptr [rax], 0 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000086ccd : add byte ptr [rax], 0 ; add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx - 0x3d] ; xor eax, eax ; pop rbx ; ret
0x000000000013d87b : add byte ptr [rax], 0 ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fccbb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001177fb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; cmp eax, 0xff ; jne 0x117804 ; xor eax, eax ; leave ; ret
0x00000000000f7f1b : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x000000000003aefb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov rax, r8 ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000c7f53 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121233 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x00000000001300ab : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000aae8b : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000078cdb : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
0x00000000000ca273 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000097fab : add byte ptr [rax], 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x00000000001a6466 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb56 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001a5476 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a6436 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f36 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001aab36 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001acb3e : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; je 0x1a64a6 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab806 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f6 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a6496 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe86 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae686 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae986 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec86 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4586 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a4986 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001ac99e : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001a646a : add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a716a : add byte ptr [rax], al ; adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000001a8f39 : add byte ptr [rax], al ; add ah, ah ; cmc ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001a6439 : add byte ptr [rax], al ; add ah, ah ; retf 0 ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001aca31 : add byte ptr [rax], al ; add ah, bl ; xor byte ptr [rcx], al ; add byte ptr [rax + 0x22], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001acb41 : add byte ptr [rax], al ; add ah, ch ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001b0729 : add byte ptr [rax], al ; add ah, dl ; insd dword ptr [rdi], dx ; add dword ptr [rax], eax ; xor byte ptr [rdx - 0xa], ah ; jmp qword ptr [rsi]
0x00000000001acb5a : add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x0000000000086715 : add byte ptr [rax], al ; add al, ch ; xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x000000000008a92a : add byte ptr [rax], al ; add bh, al ; add eax, 0x338eb1 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000006f07d : add byte ptr [rax], al ; add bh, bh ; loopne 0x6f0f6 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000d691b : add byte ptr [rax], al ; add bl, al ; nop ; mov byte ptr [rdi + 8], 2 ; xor eax, eax ; ret
0x00000000001382bb : add byte ptr [rax], al ; add bl, al ; nop ; xor eax, eax ; ret
0x000000000006c40f : add byte ptr [rax], al ; add bl, al ; nop dword ptr [rax + rax] ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x0000000000134cbf : add byte ptr [rax], al ; add bl, al ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000146148 : add byte ptr [rax], al ; add bl, al ; nop dword ptr [rax] ; xor eax, eax ; ret
0x000000000012dea2 : add byte ptr [rax], al ; add bl, al ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000001379cc : add byte ptr [rax], al ; add bl, al ; xor eax, eax ; ret
0x00000000000aa07d : add byte ptr [rax], al ; add bl, dh ; movq mm0, qword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000f732c : add byte ptr [rax], al ; add byte ptr [rax + 0x6607b70f], dl ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000014637d : add byte ptr [rax], al ; add byte ptr [rax + 0xf247c], al ; jne 0x1463a0 ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000001b35f5 : add byte ptr [rax], al ; add byte ptr [rax + rax], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001aa985 : add byte ptr [rax], al ; add byte ptr [rax + rax], bl ; add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x00000000001a6465 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb55 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001a5475 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a6435 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f35 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001acb3d : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; je 0x1a64a7 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab805 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a6495 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe85 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae685 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae985 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec85 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4585 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a4985 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001ac99d : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001a7169 : add byte ptr [rax], al ; add byte ptr [rax + rbx*8], dl ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x000000000003639f : add byte ptr [rax], al ; add byte ptr [rax - 0x2d], cl ; loopne 0x363f9 ; or dword ptr [rdi], eax ; xor eax, eax ; ret
0x000000000002db60 : add byte ptr [rax], al ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000b73dd : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor al, 0x83 ; sub r10, rax ; jmp 0xb740b
0x00000000000453eb : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0x1cb ; call rax
0x00000000000704c6 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0x30 ; call rax
0x000000000007ed40 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffdcd6 ; call rax
0x000000000007e880 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe196 ; call rax
0x000000000007e3c6 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe650 ; call rax
0x000000000007cf96 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffa80 ; call rax
0x000000000007cd26 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffcf0 ; call rax
0x00000000000707b0 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffd46 ; call rax
0x00000000001046a5 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor byte ptr [rax - 0x75], cl ; jge 0x104680 ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000645d3 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x35c993 ; call rax
0x000000000005c93b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x36462b ; call rax
0x000000000005c31f : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x364c47 ; call rax
0x000000000005969b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x3678cb ; call rax
0x00000000000509f7 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x37056f ; call rax
0x000000000004db1b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x37344b ; call rax
0x000000000003a8ac : add byte ptr [rax], al ; add byte ptr [rax - 0x7760577], dl ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x0000000000086cce : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx - 0x3d] ; xor eax, eax ; pop rbx ; ret
0x00000000000dfca5 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fucompi st(0) ; sal byte ptr [rdx - 1], 0xff ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000006eead : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xchg eax, ecx ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; ret
0x0000000000134b8a : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x134ba6 ; ret
0x000000000013791a : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x137936 ; ret
0x0000000000137932 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x13794e ; ret
0x00000000001381aa : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x1381c6 ; ret
0x00000000001381c2 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x1381de ; ret
0x00000000001381f2 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor cl, byte ptr [rax - 0x77] ; jp 0x13820e ; ret
0x000000000011b1bd : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor eax, eax ; ret
0x00000000000ba3fd : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000f80fe : add byte ptr [rax], al ; add byte ptr [rax - 0x7b], cl ; sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001a6464 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb54 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001a6434 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f34 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001acb3c : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; je 0x1a64a8 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab804 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f4 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a6494 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe84 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae684 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae984 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec84 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4584 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a4984 : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001ac99c : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000000f732a : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + 0x6607b70f], dl ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000001b35f3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001a6463 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb53 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001a6433 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f33 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001acb3b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; je 0x1a64a9 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab803 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a6493 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe83 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae683 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae983 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec83 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x00000000001a4983 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x000000000003a8aa : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x7760577], dl ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000011b1bb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; xor eax, eax ; ret
0x00000000001a6462 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; adc al, 0xcb ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001acb52 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; add al, 0x32 ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001a6432 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f32 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001acb3a : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x00000000001a64c2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; je 0x1a64aa ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001ab802 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000001a64f2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a6492 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001abe82 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae682 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae982 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001a4982 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x00000000001b35f2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; and al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x000000000019ed0a : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; cld ; add byte ptr [rax], al ; add byte ptr [rax], ch ; fsub st(4), st(0) ; jmp qword ptr [rcx]
0x00000000001a70fa : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; lodsb al, byte ptr [rsi] ; xlatb ; add byte ptr [rax], al ; cmp byte ptr [rdx - 0xf], cl ; jmp rcx
0x00000000001a11c2 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; mov ah, 0x25 ; add byte ptr [rax], al ; add byte ptr [rbp - 0x13], dh ; jmp qword ptr [rcx]
0x00000000001a173a : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; sub al, 0x2b ; add byte ptr [rax], al ; call 0x281a04e0
0x00000000000f735b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rbx + 0x6890447], cl ; xor eax, eax ; ret
0x00000000000a0fad : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d87c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fe33c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fccbc : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d80c : add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001b35f4 : add byte ptr [rax], al ; add byte ptr [rax], al ; and al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x000000000014637c : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x1463a1 ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000013605c : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp dword ptr [rsi + 0x10], 0xc ; je 0x13607c ; xor eax, eax ; ret
0x00000000001177fc : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp eax, 0xff ; jne 0x117803 ; xor eax, eax ; leave ; ret
0x00000000000e98cc : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp qword ptr [rip + 0x2da588], 0 ; je 0xe9920 ; xor eax, eax ; ret
0x00000000000a9efc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov dl, byte ptr [rsi] ; mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000f736c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x00000000000f735c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000014713c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f5ea] ; test eax, eax ; jne 0x147160 ; xor eax, eax ; ret
0x000000000014710c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f61a] ; test eax, eax ; jne 0x147130 ; xor eax, eax ; ret
0x00000000001470dc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f64a] ; test eax, eax ; jne 0x147100 ; xor eax, eax ; ret
0x00000000001470ac : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f67a] ; test eax, eax ; jne 0x1470d0 ; xor eax, eax ; ret
0x000000000014707c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f6aa] ; test eax, eax ; jne 0x1470a0 ; xor eax, eax ; ret
0x000000000014704c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f6da] ; test eax, eax ; jne 0x147070 ; xor eax, eax ; ret
0x0000000000116cec : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa3a] ; test eax, eax ; jne 0x116d10 ; xor eax, eax ; ret
0x0000000000116cbc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa6a] ; test eax, eax ; jne 0x116ce0 ; xor eax, eax ; ret
0x0000000000116c8c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa9a] ; test eax, eax ; jne 0x116cb0 ; xor eax, eax ; ret
0x0000000000116c5c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afaca] ; test eax, eax ; jne 0x116c80 ; xor eax, eax ; ret
0x0000000000116c2c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afafa] ; test eax, eax ; jne 0x116c50 ; xor eax, eax ; ret
0x0000000000116bfc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb2a] ; test eax, eax ; jne 0x116c20 ; xor eax, eax ; ret
0x0000000000116bcc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb5a] ; test eax, eax ; jne 0x116bf0 ; xor eax, eax ; ret
0x0000000000116b9c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb8a] ; test eax, eax ; jne 0x116bc0 ; xor eax, eax ; ret
0x0000000000116b0c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc1a] ; test eax, eax ; jne 0x116b30 ; xor eax, eax ; ret
0x0000000000116adc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc4a] ; test eax, eax ; jne 0x116b00 ; xor eax, eax ; ret
0x0000000000116aac : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc7a] ; test eax, eax ; jne 0x116ad0 ; xor eax, eax ; ret
0x0000000000116a7c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afcaa] ; test eax, eax ; jne 0x116aa0 ; xor eax, eax ; ret
0x0000000000116a4c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afcda] ; test eax, eax ; jne 0x116a70 ; xor eax, eax ; ret
0x0000000000116a1c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd0a] ; test eax, eax ; jne 0x116a40 ; xor eax, eax ; ret
0x00000000001169ec : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd3a] ; test eax, eax ; jne 0x116a10 ; xor eax, eax ; ret
0x00000000001169bc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd6a] ; test eax, eax ; jne 0x1169e0 ; xor eax, eax ; ret
0x000000000011698c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd9a] ; test eax, eax ; jne 0x1169b0 ; xor eax, eax ; ret
0x000000000011695c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afdca] ; test eax, eax ; jne 0x116980 ; xor eax, eax ; ret
0x000000000011692c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afdfa] ; test eax, eax ; jne 0x116950 ; xor eax, eax ; ret
0x00000000001168fc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe2a] ; test eax, eax ; jne 0x116920 ; xor eax, eax ; ret
0x00000000001168cc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe5a] ; test eax, eax ; jne 0x1168f0 ; xor eax, eax ; ret
0x000000000011689c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe8a] ; test eax, eax ; jne 0x1168c0 ; xor eax, eax ; ret
0x000000000011686c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afeba] ; test eax, eax ; jne 0x116890 ; xor eax, eax ; ret
0x000000000011683c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afeea] ; test eax, eax ; jne 0x116860 ; xor eax, eax ; ret
0x000000000011680c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff1a] ; test eax, eax ; jne 0x116830 ; xor eax, eax ; ret
0x00000000001167dc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff4a] ; test eax, eax ; jne 0x116800 ; xor eax, eax ; ret
0x00000000001167ac : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff7a] ; test eax, eax ; jne 0x1167d0 ; xor eax, eax ; ret
0x000000000011677c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2affaa] ; test eax, eax ; jne 0x1167a0 ; xor eax, eax ; ret
0x00000000000f7f1c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x00000000000a9f3c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov edx, dword ptr [rsi] ; mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x000000000011b1bc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000d0934 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov r12, qword ptr [r15 + 0x10] ; xor eax, eax ; jmp 0xd04f3
0x000000000003aefc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, r8 ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000aa07c : add byte ptr [rax], al ; add byte ptr [rax], al ; movdqu xmm0, xmmword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x000000000003a8ab : add byte ptr [rax], al ; add byte ptr [rax], al ; nop ; mov edx, edi ; mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x00000000000f732b : add byte ptr [rax], al ; add byte ptr [rax], al ; nop ; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x000000000011765c : add byte ptr [rax], al ; add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x000000000012feed : add byte ptr [rax], al ; add byte ptr [rax], al ; test eax, eax ; je 0x12ff0a ; xor eax, eax ; ret
0x00000000000a2dbc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor ah, ah ; mov byte ptr [rdx + 1], ah ; mov al, byte ptr [rcx] ; mov byte ptr [rdx], al ; mov rax, rdi ; ret
0x00000000000a2dfc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor ah, ah ; mov byte ptr [rdx + 4], ah ; mov eax, dword ptr [rcx] ; mov dword ptr [rdx], eax ; mov rax, rdi ; ret
0x000000000019ed0c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; cld ; add byte ptr [rax], al ; add byte ptr [rax], ch ; fsub st(4), st(0) ; jmp qword ptr [rcx]
0x00000000001a70c4 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b4 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a70fc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; lodsb al, byte ptr [rsi] ; xlatb ; add byte ptr [rax], al ; cmp byte ptr [rdx - 0xf], cl ; jmp rcx
0x00000000001a11c4 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; mov ah, 0x25 ; add byte ptr [rax], al ; add byte ptr [rbp - 0x13], dh ; jmp qword ptr [rcx]
0x00000000001b5bec : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; pushfq ; ret 1
0x00000000001a173c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; sub al, 0x2b ; add byte ptr [rax], al ; call 0x281a04de
0x00000000000a9eec : add byte ptr [rax], al ; add byte ptr [rax], al ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x0000000000034b4c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor dl, 0xf ; adc dword ptr [rdi], eax ; and rax, rdx ; movq xmm0, rax ; ret
0x00000000000c7f54 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121234 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x000000000003b0bc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002de9c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x00000000000e0b25 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001300ac : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003aa12 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; ret
0x000000000003b02c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000078ccc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
0x0000000000078cdc : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
0x000000000007c36c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; test rdx, rdx ; jne 0x7c38b ; ret
0x000000000006bc6c : add byte ptr [rax], al ; add byte ptr [rax], al ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x00000000000f77ed : add byte ptr [rax], al ; add byte ptr [rax], al ; xor edx, edx ; mov rsi, r13 ; mov edi, ebx ; call 0x35811
0x00000000000ca274 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000097fac : add byte ptr [rax], al ; add byte ptr [rax], al ; xor rax, rax ; ret
0x00000000000983ef : add byte ptr [rax], al ; add byte ptr [rbp - 0x77], cl ; sub al, 0x24 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000016da6a : add byte ptr [rax], al ; add byte ptr [rbx + 0x4f3bfc4e], cl ; cld ; jne 0x16db27 ; xor eax, eax ; ret
0x000000000002bc03 : add byte ptr [rax], al ; add byte ptr [rbx + 0x63], cl ; xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x00000000000f735d : add byte ptr [rax], al ; add byte ptr [rbx + 0x6890447], cl ; xor eax, eax ; ret
0x00000000000483ae : add byte ptr [rax], al ; add byte ptr [rbx + rcx*4 + 0x46], cl ; sub byte ptr [rbx + rcx*4 + 0x4e], cl ; xor byte ptr [rax - 0x75], cl ; jbe 0x4843e ; xor eax, eax ; ret
0x000000000004807e : add byte ptr [rax], al ; add byte ptr [rbx + rcx*4 + 0x47], cl ; sub byte ptr [rbx + rcx*4 + 0x4f], cl ; xor byte ptr [rax - 0x75], cl ; jg 0x48106 ; xor eax, eax ; ret
0x00000000001a6469 : add byte ptr [rax], al ; add byte ptr [rbx + rcx*8], dl ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a5479 : add byte ptr [rax], al ; add byte ptr [rbx + rdi*4], ah ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x0000000000146fd7 : add byte ptr [rax], al ; add byte ptr [rbx - 0x3d], bl ; nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000001177fd : add byte ptr [rax], al ; add byte ptr [rbx - 0xd8a0008], al ; xor eax, eax ; leave ; ret
0x000000000003aefd : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x40], cl ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000f7f3a : add byte ptr [rax], al ; add byte ptr [rdi], cl ; add eax, 0x66c3d8f7 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000105187 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051a7 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4c : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052bc : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104ed8 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ef8 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105425 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001050fb : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf3 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001acb59 : add byte ptr [rax], al ; add byte ptr [rdx + rsi], al ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x000000000013a592 : add byte ptr [rax], al ; add dh, al ; add byte ptr [rax], al ; jle 0x13a5b6 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000006c416 : add byte ptr [rax], al ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x000000000009872e : add byte ptr [rax], al ; add qword ptr [rbp], r12 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bcce : add byte ptr [rax], al ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x00000000000a0faf : add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013d7fe : add byte ptr [rax], al ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044e : add byte ptr [rax], al ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000136416 : add byte ptr [rax], al ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000079804 : add byte ptr [rax], al ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124366 : add byte ptr [rax], al ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c9004 : add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000022685 : add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d7b6 : add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001b35f6 : add byte ptr [rax], al ; and al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001a547a : add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000000d81ee : add byte ptr [rax], al ; cmp al, 1 ; jne 0xd81f5 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8196 ; ret
0x000000000014637e : add byte ptr [rax], al ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x14639f ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000013605e : add byte ptr [rax], al ; cmp dword ptr [rsi + 0x10], 0xc ; je 0x13607a ; xor eax, eax ; ret
0x00000000001177fe : add byte ptr [rax], al ; cmp eax, 0xff ; jne 0x117801 ; xor eax, eax ; leave ; ret
0x0000000000170648 : add byte ptr [rax], al ; cmp eax, ecx ; jne 0x170711 ; xor eax, eax ; ret
0x00000000000fcbde : add byte ptr [rax], al ; cmp edx, 4 ; ja 0xfcbfd ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x00000000000e98ce : add byte ptr [rax], al ; cmp qword ptr [rip + 0x2da588], 0 ; je 0xe991e ; xor eax, eax ; ret
0x00000000001a643a : add byte ptr [rax], al ; in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f3a : add byte ptr [rax], al ; in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001aab3a : add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001acb42 : add byte ptr [rax], al ; in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x0000000000139f38 : add byte ptr [rax], al ; jbe 0x139f61 ; xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000a0e4a : add byte ptr [rax], al ; jbe 0xa0e2c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010501a : add byte ptr [rax], al ; je 0x10556d ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aed : add byte ptr [rax], al ; je 0x10558d ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d90 : add byte ptr [rax], al ; je 0x1055cd ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503f : add byte ptr [rax], al ; je 0x1055ed ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b12 : add byte ptr [rax], al ; je 0x10560d ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bd : add byte ptr [rax], al ; je 0x10562d ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b36 : add byte ptr [rax], al ; je 0x10564d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed9 : add byte ptr [rax], al ; je 0x10566d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db4 : add byte ptr [rax], al ; je 0x10568d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c5b : add byte ptr [rax], al ; je 0x1056ad ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105406 : add byte ptr [rax], al ; je 0x1056cd ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052e1 : add byte ptr [rax], al ; je 0x1056ed ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105188 : add byte ptr [rax], al ; je 0x10570d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105063 : add byte ptr [rax], al ; je 0x10572d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050fc : add byte ptr [rax], al ; je 0x10574d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105083 : add byte ptr [rax], al ; je 0x10576d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549f : add byte ptr [rax], al ; je 0x10578d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105426 : add byte ptr [rax], al ; je 0x1057ad ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010537a : add byte ptr [rax], al ; je 0x1057cd ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105301 : add byte ptr [rax], al ; je 0x1057ed ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105221 : add byte ptr [rax], al ; je 0x10580d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a8 : add byte ptr [rax], al ; je 0x10582d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f72 : add byte ptr [rax], al ; je 0x10584d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef9 : add byte ptr [rax], al ; je 0x10586d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b56 : add byte ptr [rax], al ; je 0x10588d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4d : add byte ptr [rax], al ; je 0x1058ad ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd4 : add byte ptr [rax], al ; je 0x1058cd ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcf : add byte ptr [rax], al ; je 0x1058ed ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf4 : add byte ptr [rax], al ; je 0x10590d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c7b : add byte ptr [rax], al ; je 0x10592d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001a64ca : add byte ptr [rax], al ; je 0x1a64a2 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000000ceb06 : add byte ptr [rax], al ; je 0xceb20 ; cmp rax, 0x7275 ; jne 0xceaf9 ; xor eax, eax ; ret
0x00000000000e98d6 : add byte ptr [rax], al ; je 0xe9916 ; xor eax, eax ; ret
0x000000000013a596 : add byte ptr [rax], al ; jle 0x13a5b2 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000078c9d : add byte ptr [rax], al ; jne 0x78cc3 ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x00000000000ceb0e : add byte ptr [rax], al ; jne 0xceaf1 ; xor eax, eax ; ret
0x00000000001ab80a : add byte ptr [rax], al ; mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x000000000013a593 : add byte ptr [rax], al ; mov byte ptr [rax], 0 ; jle 0x13a5b5 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000a9efe : add byte ptr [rax], al ; mov dl, byte ptr [rsi] ; mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000f736e : add byte ptr [rax], al ; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x000000000008a92b : add byte ptr [rax], al ; mov dword ptr [rip + 0x338eb1], 1 ; xor eax, eax ; ret
0x00000000000f7e24 : add byte ptr [rax], al ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000008bb23 : add byte ptr [rax], al ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000a9f0e : add byte ptr [rax], al ; mov dx, word ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000f7e2e : add byte ptr [rax], al ; mov eax, dword ptr [rdi + 0x108] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f735e : add byte ptr [rax], al ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000012fee6 : add byte ptr [rax], al ; mov eax, dword ptr [rdi] ; mov dword ptr [rsi + 8], 0 ; test eax, eax ; je 0x12ff11 ; xor eax, eax ; ret
0x000000000014713e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f5ea] ; test eax, eax ; jne 0x14715e ; xor eax, eax ; ret
0x000000000014710e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f61a] ; test eax, eax ; jne 0x14712e ; xor eax, eax ; ret
0x00000000001470de : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f64a] ; test eax, eax ; jne 0x1470fe ; xor eax, eax ; ret
0x00000000001470ae : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f67a] ; test eax, eax ; jne 0x1470ce ; xor eax, eax ; ret
0x000000000014707e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f6aa] ; test eax, eax ; jne 0x14709e ; xor eax, eax ; ret
0x000000000014704e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x27f6da] ; test eax, eax ; jne 0x14706e ; xor eax, eax ; ret
0x0000000000116cee : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa3a] ; test eax, eax ; jne 0x116d0e ; xor eax, eax ; ret
0x0000000000116cbe : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa6a] ; test eax, eax ; jne 0x116cde ; xor eax, eax ; ret
0x0000000000116c8e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afa9a] ; test eax, eax ; jne 0x116cae ; xor eax, eax ; ret
0x0000000000116c5e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afaca] ; test eax, eax ; jne 0x116c7e ; xor eax, eax ; ret
0x0000000000116c2e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afafa] ; test eax, eax ; jne 0x116c4e ; xor eax, eax ; ret
0x0000000000116bfe : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb2a] ; test eax, eax ; jne 0x116c1e ; xor eax, eax ; ret
0x0000000000116bce : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb5a] ; test eax, eax ; jne 0x116bee ; xor eax, eax ; ret
0x0000000000116b9e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afb8a] ; test eax, eax ; jne 0x116bbe ; xor eax, eax ; ret
0x0000000000116b6e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afbba] ; test eax, eax ; jne 0x116b8e ; xor eax, eax ; ret
0x0000000000116b0e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc1a] ; test eax, eax ; jne 0x116b2e ; xor eax, eax ; ret
0x0000000000116ade : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc4a] ; test eax, eax ; jne 0x116afe ; xor eax, eax ; ret
0x0000000000116aae : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afc7a] ; test eax, eax ; jne 0x116ace ; xor eax, eax ; ret
0x0000000000116a7e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afcaa] ; test eax, eax ; jne 0x116a9e ; xor eax, eax ; ret
0x0000000000116a4e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afcda] ; test eax, eax ; jne 0x116a6e ; xor eax, eax ; ret
0x0000000000116a1e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd0a] ; test eax, eax ; jne 0x116a3e ; xor eax, eax ; ret
0x00000000001169ee : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd3a] ; test eax, eax ; jne 0x116a0e ; xor eax, eax ; ret
0x00000000001169be : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd6a] ; test eax, eax ; jne 0x1169de ; xor eax, eax ; ret
0x000000000011698e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afd9a] ; test eax, eax ; jne 0x1169ae ; xor eax, eax ; ret
0x000000000011695e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afdca] ; test eax, eax ; jne 0x11697e ; xor eax, eax ; ret
0x000000000011692e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afdfa] ; test eax, eax ; jne 0x11694e ; xor eax, eax ; ret
0x00000000001168fe : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe2a] ; test eax, eax ; jne 0x11691e ; xor eax, eax ; ret
0x00000000001168ce : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe5a] ; test eax, eax ; jne 0x1168ee ; xor eax, eax ; ret
0x000000000011689e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afe8a] ; test eax, eax ; jne 0x1168be ; xor eax, eax ; ret
0x000000000011686e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afeba] ; test eax, eax ; jne 0x11688e ; xor eax, eax ; ret
0x000000000011683e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2afeea] ; test eax, eax ; jne 0x11685e ; xor eax, eax ; ret
0x000000000011680e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff1a] ; test eax, eax ; jne 0x11682e ; xor eax, eax ; ret
0x00000000001167de : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff4a] ; test eax, eax ; jne 0x1167fe ; xor eax, eax ; ret
0x00000000001167ae : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2aff7a] ; test eax, eax ; jne 0x1167ce ; xor eax, eax ; ret
0x000000000011677e : add byte ptr [rax], al ; mov eax, dword ptr [rip + 0x2affaa] ; test eax, eax ; jne 0x11679e ; xor eax, eax ; ret
0x00000000000f7f1e : add byte ptr [rax], al ; mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x00000000000e25e0 : add byte ptr [rax], al ; mov ecx, dword ptr [rbp + 4] ; test ecx, ecx ; jle 0xe266d ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260c
0x00000000000abba6 : add byte ptr [rax], al ; mov ecx, dword ptr [rsi + 0xc] ; cmp dword ptr [rdi + 0xc], ecx ; jne 0xabd30 ; xor eax, eax ; ret
0x000000000016d8df : add byte ptr [rax], al ; mov ecx, dword ptr [rsi - 4] ; cmp ecx, dword ptr [rdi - 4] ; jne 0x16db26 ; xor eax, eax ; ret
0x00000000000a9f4e : add byte ptr [rax], al ; mov ecx, dword ptr [rsi] ; mov dl, byte ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000a9f7e : add byte ptr [rax], al ; mov ecx, dword ptr [rsi] ; mov edx, dword ptr [rsi + 3] ; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9f3e : add byte ptr [rax], al ; mov edx, dword ptr [rsi] ; mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x00000000000983f0 : add byte ptr [rax], al ; mov qword ptr [r12], r13 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007a682 : add byte ptr [rax], al ; mov qword ptr [rbx + 8], rax ; mov qword ptr [rbx + 0x10], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000060ecf : add byte ptr [rax], al ; mov qword ptr [rdx + 8], rdi ; mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0ff
0x0000000000077b7c : add byte ptr [rax], al ; mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x000000000003b544 : add byte ptr [rax], al ; mov qword ptr [rsi + 0x10], rax ; mov eax, 0xb ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b503 : add byte ptr [rax], al ; mov qword ptr [rsi + 0x10], rax ; xor eax, eax ; ret
0x00000000000f728c : add byte ptr [rax], al ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x000000000011b1be : add byte ptr [rax], al ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000d0936 : add byte ptr [rax], al ; mov r12, qword ptr [r15 + 0x10] ; xor eax, eax ; jmp 0xd04f1
0x000000000004807f : add byte ptr [rax], al ; mov r8, qword ptr [rdi + 0x28] ; mov r9, qword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000483af : add byte ptr [rax], al ; mov r8, qword ptr [rsi + 0x28] ; mov r9, qword ptr [rsi + 0x30] ; mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x000000000003aefe : add byte ptr [rax], al ; mov rax, r8 ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000108ebe : add byte ptr [rax], al ; mov rax, rdi ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x0000000000076ef6 : add byte ptr [rax], al ; mov rax, rdx ; sar rax, 2 ; mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000104acc : add byte ptr [rax], al ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000003b54d : add byte ptr [rax], al ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b594 : add byte ptr [rax], al ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x00000000000aa07e : add byte ptr [rax], al ; movdqu xmm0, xmmword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000001b35fa : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001a64fa : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x0000000000170588 : add byte ptr [rax], al ; movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170716 ; xor eax, eax ; ret
0x000000000003a8ad : add byte ptr [rax], al ; nop ; mov edx, edi ; mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x00000000000f732d : add byte ptr [rax], al ; nop ; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x000000000008d7b1 : add byte ptr [rax], al ; nop dword ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f7e1a : add byte ptr [rax], al ; nop dword ptr [rax] ; mov eax, dword ptr [rdi + 0x10c] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000001300a7 : add byte ptr [rax], al ; nop dword ptr [rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000170d34 : add byte ptr [rax], al ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000000a0c0d : add byte ptr [rax], al ; pcmpeqb xmm1, xmmword ptr [rdi + 0x20] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0ca1 ; xor eax, eax ; ret
0x00000000000e0a86 : add byte ptr [rax], al ; pop rbx ; mov dword ptr [r12 + 4], r14d ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000125a3e : add byte ptr [rax], al ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000019cab2 : add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000011765e : add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000001acaaa : add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x000000000013ebeb : add byte ptr [rax], al ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000001a649a : add byte ptr [rax], al ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x000000000002db61 : add byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001aa986 : add byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x00000000000363a0 : add byte ptr [rax], al ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000010c056 : add byte ptr [rax], al ; sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x0000000000047fed : add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x4800a ; xor eax, eax ; ret
0x000000000012feef : add byte ptr [rax], al ; test eax, eax ; je 0x12ff08 ; xor eax, eax ; ret
0x000000000012e0cf : add byte ptr [rax], al ; test eax, eax ; jne 0x12e0ee ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012e0ce : add byte ptr [rax], al ; test eax, eax ; jne 0x12e0ef ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2bf : add byte ptr [rax], al ; test eax, eax ; jne 0x12f2de ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f428 : add byte ptr [rax], al ; test eax, eax ; jne 0x12f44e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd52 : add byte ptr [rax], al ; test eax, eax ; jne 0x12fd76 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd8f : add byte ptr [rax], al ; test eax, eax ; jne 0x12fdae ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe3f : add byte ptr [rax], al ; test eax, eax ; jne 0x12fe5e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe8f : add byte ptr [rax], al ; test eax, eax ; jne 0x12feae ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff0f : add byte ptr [rax], al ; test eax, eax ; jne 0x12ff2e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000131c7f : add byte ptr [rax], al ; test eax, eax ; jne 0x131c9e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a84 : add byte ptr [rax], al ; test eax, eax ; jne 0x132aa6 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b1f : add byte ptr [rax], al ; test eax, eax ; jne 0x132b3e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bba : add byte ptr [rax], al ; test eax, eax ; jne 0x132bde ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c39 : add byte ptr [rax], al ; test eax, eax ; jne 0x132c5e ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000cd238 : add byte ptr [rax], al ; test eax, eax ; js 0xcd261 ; mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000c7c2b : add byte ptr [rax], al ; test rax, rax ; je 0xc7c53 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f80ff : add byte ptr [rax], al ; test rax, rax ; je 0xf815e ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000000ff6ad : add byte ptr [rax], al ; test rax, rax ; jne 0xff695 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff87e : add byte ptr [rax], al ; test rax, rax ; jne 0xff865 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000003a92e : add byte ptr [rax], al ; test rdi, rdi ; push rbx ; je 0x3a980 ; xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a950 ; pop rbx ; ret
0x00000000000a2dbe : add byte ptr [rax], al ; xor ah, ah ; mov byte ptr [rdx + 1], ah ; mov al, byte ptr [rcx] ; mov byte ptr [rdx], al ; mov rax, rdi ; ret
0x00000000000a2dfe : add byte ptr [rax], al ; xor ah, ah ; mov byte ptr [rdx + 4], ah ; mov eax, dword ptr [rcx] ; mov dword ptr [rdx], eax ; mov rax, rdi ; ret
0x000000000019ed0e : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; cld ; add byte ptr [rax], al ; add byte ptr [rax], ch ; fsub st(4), st(0) ; jmp qword ptr [rcx]
0x00000000001a70c6 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b2 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a70fe : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; lodsb al, byte ptr [rsi] ; xlatb ; add byte ptr [rax], al ; cmp byte ptr [rdx - 0xf], cl ; jmp rcx
0x00000000001a11c6 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; mov ah, 0x25 ; add byte ptr [rax], al ; add byte ptr [rbp - 0x13], dh ; jmp qword ptr [rcx]
0x00000000001b5bee : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; pushfq ; ret 1
0x00000000001b5c96 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret
0x00000000001a173e : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; sub al, 0x2b ; add byte ptr [rax], al ; call 0x281a04dc
0x00000000001a74e6 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x00000000001aa98a : add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x00000000001abe8a : add byte ptr [rax], al ; xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001ae68a : add byte ptr [rax], al ; xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000001ae98a : add byte ptr [rax], al ; xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x00000000001aec8a : add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x0000000000195d1e : add byte ptr [rax], al ; xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x00000000001a1b8a : add byte ptr [rax], al ; xor al, 0x82 ; add byte ptr [rax], al ; nop ; xchg eax, esp ; in eax, dx ; call qword ptr [rcx]
0x00000000001a458a : add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a498a : add byte ptr [rax], al ; xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x0000000000195e76 : add byte ptr [rax], al ; xor al, 0xb3 ; out dx, eax ; jmp rsp
0x00000000001a547e : add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a8f3e : add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001a71ee : add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; call qword ptr [rcx]
0x00000000001a716e : add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000000fda2a : add byte ptr [rax], al ; xor byte ptr [rcx], 0xc0 ; ret
0x00000000001ac9a2 : add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001a643e : add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a49ee : add byte ptr [rax], al ; xor ch, 0xee ; call qword ptr [rax]
0x00000000000a9eee : add byte ptr [rax], al ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x0000000000034b4e : add byte ptr [rax], al ; xor dl, 0xf ; adc dword ptr [rdi], eax ; and rax, rdx ; movq xmm0, rax ; ret
0x00000000000bccfe : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c7f56 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000cca4a : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f9c1e : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x198 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000879f9 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000121236 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000146a56 : add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x38 ; ret
0x000000000003b0be : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a30a : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbfc : add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; ret
0x000000000002de9e : add byte ptr [rax], al ; xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x00000000000d808b : add byte ptr [rax], al ; xor eax, eax ; cmp ebx, 0xa ; je 0xd8100 ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001039f7 : add byte ptr [rax], al ; xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a13 ; ret
0x00000000001307ee : add byte ptr [rax], al ; xor eax, eax ; jmp rcx
0x00000000001725a3 : add byte ptr [rax], al ; xor eax, eax ; lock cmpxchg qword ptr [rip + 0x2512b0], rdx ; je 0x1725c2 ; ret
0x000000000012592b : add byte ptr [rax], al ; xor eax, eax ; mov dword ptr [rdi + 0xc], edx ; mov qword ptr [rsi], rdi ; ret
0x000000000008ba04 : add byte ptr [rax], al ; xor eax, eax ; mov qword ptr [rbx + 8], rbp ; mov qword ptr [rbx], rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012e713 : add byte ptr [rax], al ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x0000000000138466 : add byte ptr [rax], al ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134dee : add byte ptr [rax], al ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000001307a6 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x0000000000089921 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000089e11 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013a397 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bb983 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x000000000003a4eb : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c900b : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003a153 : add byte ptr [rax], al ; xor eax, eax ; pop rbx ; ret
0x0000000000144b45 : add byte ptr [rax], al ; xor eax, eax ; rep movsq qword ptr [rdi], qword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000365b6 : add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000f849b : add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000078cce : add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
0x0000000000078cde : add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
0x000000000007c36e : add byte ptr [rax], al ; xor eax, eax ; test rdx, rdx ; jne 0x7c389 ; ret
0x000000000003b236 : add byte ptr [rax], al ; xor eax, ecx ; ret
0x0000000000103343 : add byte ptr [rax], al ; xor ebx, ebx ; mov dword ptr [rdx], eax ; add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000c8176 : add byte ptr [rax], al ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bc6e : add byte ptr [rax], al ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x0000000000071cae : add byte ptr [rax], al ; xor edx, edx ; mov rax, rdx ; ret
0x00000000000f77ef : add byte ptr [rax], al ; xor edx, edx ; mov rsi, r13 ; mov edi, ebx ; call 0x3580f
0x000000000008fac1 : add byte ptr [rax], al ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x00000000000ca276 : add byte ptr [rax], al ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000004daeb : add byte ptr [rax], al ; xor esi, esi ; call rax
0x0000000000119216 : add byte ptr [rax], al ; xor esi, esi ; mov rax, rsi ; ret
0x0000000000104af3 : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104b18 : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b3c : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104b5c : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001109fb : add byte ptr [rax], al ; xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x0000000000035523 : add byte ptr [rax], al ; xor esi, esi ; test eax, eax ; sete sil ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000029870 : add byte ptr [rax], al ; xor r9d, r9d ; call r15
0x0000000000090d8d : add byte ptr [rax], al ; xor rax, rax ; ret
0x00000000001a58e6 : add byte ptr [rax], al ; xor sil, al ; jmp rbx
0x000000000006bcd3 : add byte ptr [rax], dl ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; ret
0x000000000006c415 : add byte ptr [rax], r8b ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x000000000009872d : add byte ptr [rax], r8b ; add qword ptr [rbp], r12 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bccd : add byte ptr [rax], r8b ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013d7fd : add byte ptr [rax], r8b ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044d : add byte ptr [rax], r8b ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000136415 : add byte ptr [rax], r8b ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010c6d5 : add byte ptr [rax], r8b ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d7b5 : add byte ptr [rax], r8b ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000d81ed : add byte ptr [rax], r8b ; cmp al, 1 ; jne 0xd81f6 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8197 ; ret
0x00000000000fcbdd : add byte ptr [rax], r8b ; cmp edx, 4 ; ja 0xfcbfe ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x00000000000a9f0d : add byte ptr [rax], r8b ; mov dx, word ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000f7e2d : add byte ptr [rax], r8b ; mov eax, dword ptr [rdi + 0x108] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x0000000000116b6d : add byte ptr [rax], r8b ; mov eax, dword ptr [rip + 0x2afbba] ; test eax, eax ; jne 0x116b8f ; xor eax, eax ; ret
0x0000000000170d33 : add byte ptr [rax], r8b ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000010c055 : add byte ptr [rax], r8b ; sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x0000000000146a55 : add byte ptr [rax], r8b ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3d : add byte ptr [rax], r8b ; xor eax, eax ; add rsp, 8 ; ret
0x000000000003aa6d : add byte ptr [rax], r8b ; xor eax, eax ; pop rbx ; ret
0x00000000000365b5 : add byte ptr [rax], r8b ; xor eax, eax ; ret
0x00000000000c8175 : add byte ptr [rax], r8b ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000071cad : add byte ptr [rax], r8b ; xor edx, edx ; mov rax, rdx ; ret
0x0000000000119215 : add byte ptr [rax], r8b ; xor esi, esi ; mov rax, rsi ; ret
0x00000000000abd2d : add byte ptr [rax], r8b ; xor rax, rax ; ret
0x00000000000868cb : add byte ptr [rbp + 0x12], dh ; add rax, 8 ; cmp rdx, rax ; ja 0x868d7 ; xor eax, eax ; ret
0x00000000000d25d3 : add byte ptr [rbp + 0x12], dh ; or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x0000000000078c9e : add byte ptr [rbp + 0x14], dh ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x000000000003aa08 : add byte ptr [rbp + 0x15], dh ; test rdi, rdi ; je 0x3aa81 ; mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x00000000001462bc : add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000000fda1f : add byte ptr [rbp + 0x347789f6], al ; jne 0xfda16 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x00000000000fda1e : add byte ptr [rbp + 0x347789f6], al ; jne 0xfda17 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x000000000012f2c0 : add byte ptr [rbp + 0x480b75c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a85 : add byte ptr [rbp + 0x480e75c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd53 : add byte ptr [rbp + 0x481075c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132c3a : add byte ptr [rbp + 0x481175c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f429 : add byte ptr [rbp + 0x481275c0], al ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f37d : add byte ptr [rbp + 0x48be75c0], al ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000cd239 : add byte ptr [rbp + 0x641278c0], al ; mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000146384 : add byte ptr [rbp + 9], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000076b7e : add byte ptr [rbp + rcx*4 + 0x4d], cl ; enter -0x76b4, -0x17 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000012b615 : add byte ptr [rbp + rcx*4 + 0x67], cl ; xor byte ptr [rax - 0x7b], cl ; ror byte ptr [rax + 0xf], 0x44 ; ret 0x8b4c
0x00000000001166fc : add byte ptr [rbp - 0x10], dh ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000d8ec9 : add byte ptr [rbp - 0x24], dh ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ceb0f : add byte ptr [rbp - 0x27], dh ; xor eax, eax ; ret
0x00000000000983f1 : add byte ptr [rbp - 0x77], cl ; sub al, 0x24 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000dbdf8 : add byte ptr [rbx + 0x227406f8], al ; cmp eax, 3 ; je 0xdbe1e ; xor eax, eax ; pop rbx ; ret
0x00000000000a9f7f : add byte ptr [rbx + 0x3568b0e], cl ; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9f4f : add byte ptr [rbx + 0x4568a0e], cl ; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000e0a87 : add byte ptr [rbx + 0x45], bl ; mov dword ptr [rsp + 4], esi ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000016c2b0 : add byte ptr [rbx + 0x478bfc4e], cl ; cld ; cmp ecx, eax ; jne 0x16cce0 ; xor eax, eax ; ret
0x00000000001704db : add byte ptr [rbx + 0x4e8bfc47], cl ; cld ; cmp eax, ecx ; jne 0x170701 ; xor eax, eax ; ret
0x000000000016c512 : add byte ptr [rbx + 0x4e8bfc47], cl ; cld ; cmp ecx, eax ; jne 0x16cce0 ; xor eax, eax ; ret
0x000000000016d8e0 : add byte ptr [rbx + 0x4f3bfc4e], cl ; cld ; jne 0x16db25 ; xor eax, eax ; ret
0x000000000002bc05 : add byte ptr [rbx + 0x63], cl ; xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x00000000000f735f : add byte ptr [rbx + 0x6890447], cl ; xor eax, eax ; ret
0x000000000012fee7 : add byte ptr [rbx + 0x846c707], cl ; add byte ptr [rax], al ; add byte ptr [rax], al ; test eax, eax ; je 0x12ff10 ; xor eax, eax ; ret
0x00000000000fcbdf : add byte ptr [rbx + 0xb7704fa], al ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x0000000000098cc2 : add byte ptr [rbx + rbp + 0x48], dh ; add eax, 1 ; sub rsi, 1 ; jne 0x98ccf ; xor eax, eax ; ret
0x000000000008019f : add byte ptr [rbx + rcx*4 + 0x3d], cl ; and dword ptr [rsp + rsi], ecx ; add byte ptr [rax - 0x77], cl ; cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x00000000000483b0 : add byte ptr [rbx + rcx*4 + 0x46], cl ; sub byte ptr [rbx + rcx*4 + 0x4e], cl ; xor byte ptr [rax - 0x75], cl ; jbe 0x4843c ; xor eax, eax ; ret
0x0000000000048080 : add byte ptr [rbx + rcx*4 + 0x47], cl ; sub byte ptr [rbx + rcx*4 + 0x4f], cl ; xor byte ptr [rax - 0x75], cl ; jg 0x48104 ; xor eax, eax ; ret
0x00000000001a646b : add byte ptr [rbx + rcx*8], dl ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a547b : add byte ptr [rbx + rdi*4], ah ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x000000000013e79f : add byte ptr [rbx - 0x2ec6d7b1], cl ; jae 0x13e7ba ; xor eax, eax ; ret
0x000000000013e79e : add byte ptr [rbx - 0x2ec6d7b1], cl ; jae 0x13e7bb ; xor eax, eax ; ret
0x000000000013e7df : add byte ptr [rbx - 0x2ec6d7b1], cl ; jae 0x13e7fa ; xor eax, eax ; ret
0x000000000013e7de : add byte ptr [rbx - 0x2ec6d7b1], cl ; jae 0x13e7fb ; xor eax, eax ; ret
0x00000000000e25e1 : add byte ptr [rbx - 0x367afbb3], cl ; jle 0xe266c ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260b
0x0000000000146fd9 : add byte ptr [rbx - 0x3d], bl ; nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000000dfce7 : add byte ptr [rbx - 0x74b7d7ad], cl ; xor eax, dword ptr [rcx] ; ret 0x6348
0x00000000001177ff : add byte ptr [rbx - 0xd8a0008], al ; xor eax, eax ; leave ; ret
0x00000000000bbbf9 : add byte ptr [rbx], cl ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000bb980 : add byte ptr [rbx], cl ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x00000000000f7042 : add byte ptr [rcx + 0x53890868], cl ; add al, 0x48 ; add esp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000d81ef : add byte ptr [rcx + rax], bh ; jne 0xd81f4 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8195 ; ret
0x000000000008426f : add byte ptr [rcx + rcx*4 + 0x44], cl ; and al, 8 ; xor edi, edi ; call qword ptr [rax]
0x000000000002f2a6 : add byte ptr [rcx + rcx*4 - 0x11], cl ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000ca1c0 : add byte ptr [rcx + rcx*4 - 0x19], cl ; cmove rcx, rax ; xor eax, eax ; call 0x5648c
0x00000000000cd650 : add byte ptr [rcx + rcx*4 - 0x31], cl ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003aeff : add byte ptr [rcx + rcx*4 - 0x40], cl ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000fcb95 : add byte ptr [rcx - 0x74bb9b11], cl ; xor al, ch ; outsd dx, dword ptr [rsi] ; ret
0x00000000000f1020 : add byte ptr [rcx - 0x77], cl ; add al, 0x24 ; je 0xf1008 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013a3fd : add byte ptr [rcx - 0x77], cl ; fmul dword ptr [rcx + rcx*4 - 0x1f] ; mov rdi, rbp ; xor eax, eax ; call 0x5665e
0x00000000000f7e07 : add byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x000000000008fabf : add byte ptr [rcx], al ; add byte ptr [rax], al ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x000000000002aefd : add byte ptr [rcx], dh ; fisttp dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000103344 : add byte ptr [rcx], dh ; fisttp dword ptr [rcx + 0x5d0102] ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001307a7 : add byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0xff ; loope 0x130826 ; nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001307ef : add byte ptr [rcx], dh ; sar bh, 0xe1 ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003a5d8 : add byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xca ; adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x0000000000035524 : add byte ptr [rcx], dh ; test byte ptr [rbp - 0x6bf0bf40], 0xc6 ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000107746 : add byte ptr [rdi + rax*8], ah ; add al, byte ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000110586 : add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008bb24 : add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085766 : add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000795d6 : add byte ptr [rdi + rax*8], ah ; sbb al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f7f3c : add byte ptr [rdi], cl ; add eax, 0x66c3d8f7 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000105189 : add byte ptr [rdi], cl ; test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051a9 : add byte ptr [rdi], cl ; test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4e : add byte ptr [rdi], cl ; test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052be : add byte ptr [rdi], cl ; test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104eda : add byte ptr [rdi], cl ; test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104efa : add byte ptr [rdi], cl ; test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105427 : add byte ptr [rdi], cl ; test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001050fd : add byte ptr [rdi], cl ; test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf5 : add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ac7 : add byte ptr [rdi], cl ; test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000105016 : add byte ptr [rdx + 1], bh ; je 0x105571 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104ae9 : add byte ptr [rdx + 1], bh ; je 0x105591 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d8c : add byte ptr [rdx + 2], bh ; je 0x1055d1 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503b : add byte ptr [rdx + 2], bh ; je 0x1055f1 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b0e : add byte ptr [rdx + 2], bh ; je 0x105611 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052b9 : add byte ptr [rdx + 2], bh ; je 0x105631 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b32 : add byte ptr [rdx + 3], bh ; je 0x105651 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed5 : add byte ptr [rdx + 3], bh ; je 0x105671 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db0 : add byte ptr [rdx + 3], bh ; je 0x105691 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c57 : add byte ptr [rdx + 3], bh ; je 0x1056b1 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105402 : add byte ptr [rdx + 3], bh ; je 0x1056d1 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052dd : add byte ptr [rdx + 3], bh ; je 0x1056f1 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105184 : add byte ptr [rdx + 3], bh ; je 0x105711 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x000000000010505f : add byte ptr [rdx + 3], bh ; je 0x105731 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050f8 : add byte ptr [rdx + 4], bh ; je 0x105751 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010507f : add byte ptr [rdx + 4], bh ; je 0x105771 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549b : add byte ptr [rdx + 4], bh ; je 0x105791 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105422 : add byte ptr [rdx + 4], bh ; je 0x1057b1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105376 : add byte ptr [rdx + 4], bh ; je 0x1057d1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052fd : add byte ptr [rdx + 4], bh ; je 0x1057f1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010521d : add byte ptr [rdx + 4], bh ; je 0x105811 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a4 : add byte ptr [rdx + 4], bh ; je 0x105831 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f6e : add byte ptr [rdx + 4], bh ; je 0x105851 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef5 : add byte ptr [rdx + 4], bh ; je 0x105871 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b52 : add byte ptr [rdx + 4], bh ; je 0x105891 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e49 : add byte ptr [rdx + 4], bh ; je 0x1058b1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd0 : add byte ptr [rdx + 4], bh ; je 0x1058d1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcb : add byte ptr [rdx + 4], bh ; je 0x1058f1 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf0 : add byte ptr [rdx + 4], bh ; je 0x105911 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c77 : add byte ptr [rdx + 4], bh ; je 0x105931 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010fbfb : add byte ptr [rdx + rbx + 0x5b], dh ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001acb5b : add byte ptr [rdx + rsi], al ; add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000000aff39 : add byte ptr [rdx - 0x73], cl ; sbb al, 0x9d ; xor al, byte ptr [rax + rax] ; add cl, ch ; ret 0xfff3
0x0000000000139f39 : add byte ptr [rsi + 0x14], dh ; xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000a9ee5 : add byte ptr [rsi + 0x2e], ah ; nop dword ptr [rax + rax] ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x00000000000aa835 : add byte ptr [rsi + 0x2e], ah ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000a0cc5 : add byte ptr [rsi + 0x2e], ah ; nop dword ptr [rax + rax] ; xor rax, rax ; ret
0x00000000000aa834 : add byte ptr [rsi + 0x2e], spl ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000a0cc4 : add byte ptr [rsi + 0x2e], spl ; nop dword ptr [rax + rax] ; xor rax, rax ; ret
0x000000000013a597 : add byte ptr [rsi + 0xe], bh ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000016bc8d : add byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x00000000000a0e4b : add byte ptr [rsi - 0x32], dh ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010fbfa : add byte ptr gs:[rdx + rbx + 0x5b], dh ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c7cfa : add ch, byte ptr [rdi + rbp - 0x373eb800] ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; jmp rax
0x00000000001327e6 : add cl, byte ptr [rbp + 0x31] ; rol byte ptr [rcx - 0x7f], 1 ; loopne 0x13282e ; xor esi, dword ptr [rbx] ; xor ecx, dword ptr [rbp + 0x31] ; ret 0xc149
0x0000000000104b3a : add cl, byte ptr [rbx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000125ea4 : add cl, byte ptr [rcx + 0x39] ; clc ; jb 0x125ecf ; cmp eax, edx ; jne 0x125e8f ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000013a594 : add dh, al ; add byte ptr [rax], al ; jle 0x13a5b4 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000abd26 : add dh, bh ; fadd st(3) ; nop word ptr [rax + rax] ; xor rax, rax ; ret
0x000000000002d7fa : add dl, byte ptr [rcx + 0x39] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000484eb : add dword ptr [rax + 0x39], ecx ; sal byte ptr [rbp - 0x11], 1 ; xor eax, eax ; ret
0x0000000000048683 : add dword ptr [rax + 0x39], ecx ; salc ; jne 0x48680 ; xor eax, eax ; ret
0x0000000000122093 : add dword ptr [rax - 0x77], ecx ; xor byte ptr [r8 + 1], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000a5a0b : add dword ptr [rax - 0x7d], ecx ; fdivr st(7) ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x0000000000098cc8 : add dword ptr [rax - 0x7d], ecx ; out dx, al ; add dword ptr [rbp - 0xf], esi ; xor eax, eax ; ret
0x0000000000098c08 : add dword ptr [rax - 0x7d], ecx ; out dx, al ; add dword ptr [rbp - 0xf], esi ; xor edi, edi ; mov rax, rdi ; ret
0x00000000000aac5d : add dword ptr [rax], eax ; add byte ptr [rax - 0x73], cl ; xor eax, 0xdb859 ; movsxd rax, dword ptr [rsi + rdi*4] ; add rax, rsi ; jmp rax
0x0000000000105018 : add dword ptr [rax], eax ; add byte ptr [rax], al ; je 0x10556f ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aeb : add dword ptr [rax], eax ; add byte ptr [rax], al ; je 0x10558f ; xor esi, esi ; mov rdi, r12 ; call rbx
0x000000000003b592 : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x000000000002db5f : add dword ptr [rax], eax ; add byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003639e : add dword ptr [rax], eax ; add byte ptr [rax], al ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000001725a1 : add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; lock cmpxchg qword ptr [rip + 0x2512b0], rdx ; je 0x1725c4 ; ret
0x000000000008a933 : add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016d959 : add dword ptr [rax], eax ; add byte ptr [rbx + 0x4f3bfc4e], cl ; cld ; jne 0x16db27 ; xor eax, eax ; ret
0x00000000000d25d2 : add dword ptr [rax], eax ; jne 0xd25f7 ; or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x000000000019867e : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000198636 : add dword ptr [rax], eax ; xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x0000000000196ca6 : add dword ptr [rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x00000000001963ae : add dword ptr [rax], eax ; xor al, 0x9d ; int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000199706 : add dword ptr [rax], eax ; xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x0000000000195ece : add dword ptr [rax], eax ; xor al, 0xc5 ; out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000195ed6 : add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x0000000000198486 : add dword ptr [rax], eax ; xor al, 0xcf ; clc ; jmp rsp
0x00000000001abe8e : add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x00000000001b35fe : add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001aab3e : add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001b072e : add dword ptr [rax], eax ; xor byte ptr [rdx - 0xa], ah ; jmp qword ptr [rsi]
0x00000000001acb5e : add dword ptr [rax], eax ; xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001ab80e : add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x000000000011f8f1 : add dword ptr [rax], esp ; je 0x11f8df ; pop rbx ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ffa81 : add dword ptr [rbp + 0x2c], 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000ad10a : add dword ptr [rbp + 0x31], eax ; sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000d81f1 : add dword ptr [rbp - 0xc], esi ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8193 ; ret
0x0000000000098ccc : add dword ptr [rbp - 0xf], esi ; xor eax, eax ; ret
0x0000000000098c0c : add dword ptr [rbp - 0xf], esi ; xor edi, edi ; mov rax, rdi ; ret
0x0000000000103349 : add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000098731 : add dword ptr [rbp], esp ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000195ecd : add dword ptr [rcx], eax ; add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x00000000000328e1 : add dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000a0505 : add dword ptr [rdi], ecx ; mov dh, 0x11 ; test dl, dl ; jne 0xa0506 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0583 : add dword ptr [rdi], ecx ; mov dh, 0x11 ; test dl, dl ; jne 0xa0577 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0753 : add dword ptr [rdi], ecx ; mov esi, 0x75c9840f ; in eax, dx ; xor eax, eax ; ret
0x00000000000ad108 : add dword ptr [rdx + 1], ebp ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000006c418 : add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x00000000000ff6ab : add dword ptr [rip - 0x7ab80000], 0x5bd475c0 ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000001361a1 : add dword ptr [rsi + 0x27], edi ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001360af : add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000a5b29 : add dword ptr [rsi + 0xf], esp ; adc eax, dword ptr [rdx] ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x0000000000196ca5 : add dword ptr fs:[rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x0000000000146aa2 : add eax, 0x27a3d1 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000147141 : add eax, 0x27f5ea ; test eax, eax ; jne 0x14715b ; xor eax, eax ; ret
0x0000000000147111 : add eax, 0x27f61a ; test eax, eax ; jne 0x14712b ; xor eax, eax ; ret
0x00000000001470e1 : add eax, 0x27f64a ; test eax, eax ; jne 0x1470fb ; xor eax, eax ; ret
0x00000000001470b1 : add eax, 0x27f67a ; test eax, eax ; jne 0x1470cb ; xor eax, eax ; ret
0x0000000000147081 : add eax, 0x27f6aa ; test eax, eax ; jne 0x14709b ; xor eax, eax ; ret
0x0000000000147051 : add eax, 0x27f6da ; test eax, eax ; jne 0x14706b ; xor eax, eax ; ret
0x0000000000140911 : add eax, 0x28604a ; test eax, eax ; je 0x14092b ; xor eax, eax ; ret
0x0000000000116cf1 : add eax, 0x2afa3a ; test eax, eax ; jne 0x116d0b ; xor eax, eax ; ret
0x0000000000116cc1 : add eax, 0x2afa6a ; test eax, eax ; jne 0x116cdb ; xor eax, eax ; ret
0x0000000000116c91 : add eax, 0x2afa9a ; test eax, eax ; jne 0x116cab ; xor eax, eax ; ret
0x0000000000116c61 : add eax, 0x2afaca ; test eax, eax ; jne 0x116c7b ; xor eax, eax ; ret
0x0000000000116c31 : add eax, 0x2afafa ; test eax, eax ; jne 0x116c4b ; xor eax, eax ; ret
0x0000000000116c01 : add eax, 0x2afb2a ; test eax, eax ; jne 0x116c1b ; xor eax, eax ; ret
0x0000000000116bd1 : add eax, 0x2afb5a ; test eax, eax ; jne 0x116beb ; xor eax, eax ; ret
0x0000000000116ba1 : add eax, 0x2afb8a ; test eax, eax ; jne 0x116bbb ; xor eax, eax ; ret
0x0000000000116b71 : add eax, 0x2afbba ; test eax, eax ; jne 0x116b8b ; xor eax, eax ; ret
0x0000000000116b11 : add eax, 0x2afc1a ; test eax, eax ; jne 0x116b2b ; xor eax, eax ; ret
0x0000000000116ae1 : add eax, 0x2afc4a ; test eax, eax ; jne 0x116afb ; xor eax, eax ; ret
0x0000000000116ab1 : add eax, 0x2afc7a ; test eax, eax ; jne 0x116acb ; xor eax, eax ; ret
0x0000000000116a81 : add eax, 0x2afcaa ; test eax, eax ; jne 0x116a9b ; xor eax, eax ; ret
0x0000000000116a51 : add eax, 0x2afcda ; test eax, eax ; jne 0x116a6b ; xor eax, eax ; ret
0x0000000000116a21 : add eax, 0x2afd0a ; test eax, eax ; jne 0x116a3b ; xor eax, eax ; ret
0x00000000001169f1 : add eax, 0x2afd3a ; test eax, eax ; jne 0x116a0b ; xor eax, eax ; ret
0x00000000001169c1 : add eax, 0x2afd6a ; test eax, eax ; jne 0x1169db ; xor eax, eax ; ret
0x0000000000116991 : add eax, 0x2afd9a ; test eax, eax ; jne 0x1169ab ; xor eax, eax ; ret
0x0000000000116961 : add eax, 0x2afdca ; test eax, eax ; jne 0x11697b ; xor eax, eax ; ret
0x0000000000116931 : add eax, 0x2afdfa ; test eax, eax ; jne 0x11694b ; xor eax, eax ; ret
0x0000000000116901 : add eax, 0x2afe2a ; test eax, eax ; jne 0x11691b ; xor eax, eax ; ret
0x00000000001168d1 : add eax, 0x2afe5a ; test eax, eax ; jne 0x1168eb ; xor eax, eax ; ret
0x00000000001168a1 : add eax, 0x2afe8a ; test eax, eax ; jne 0x1168bb ; xor eax, eax ; ret
0x0000000000116871 : add eax, 0x2afeba ; test eax, eax ; jne 0x11688b ; xor eax, eax ; ret
0x0000000000116841 : add eax, 0x2afeea ; test eax, eax ; jne 0x11685b ; xor eax, eax ; ret
0x0000000000116811 : add eax, 0x2aff1a ; test eax, eax ; jne 0x11682b ; xor eax, eax ; ret
0x00000000001167e1 : add eax, 0x2aff4a ; test eax, eax ; jne 0x1167fb ; xor eax, eax ; ret
0x00000000001167b1 : add eax, 0x2aff7a ; test eax, eax ; jne 0x1167cb ; xor eax, eax ; ret
0x0000000000116781 : add eax, 0x2affaa ; test eax, eax ; jne 0x11679b ; xor eax, eax ; ret
0x0000000000107742 : add eax, 0x2b9731 ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x0000000000103aac : add eax, 0x2bd3c7 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000103a9b : add eax, 0x2bd3d8 ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000fe48e : add eax, 0x2c2a35 ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x00000000000fe466 : add eax, 0x2c2a5d ; mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4b0 ; ret
0x00000000000fcd42 : add eax, 0x2c4131 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000c8872 : add eax, 0x2f8601 ; xor edx, edx ; mov dword ptr fs:[rax], 2 ; mov rax, rdx ; ret
0x00000000000c8702 : add eax, 0x2f8771 ; xor edx, edx ; mov dword ptr fs:[rax], 2 ; mov rax, rdx ; ret
0x00000000000bbc12 : add eax, 0x305261 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x000000000008a92e : add eax, 0x338eb1 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000858d2 : add eax, 0x33b5a1 ; xor esi, esi ; mov dword ptr fs:[rax], 0xc ; mov rax, rsi ; ret
0x0000000000085762 : add eax, 0x33b711 ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000843e3 : add eax, 0x33c9e0 ; xor edi, edi ; call qword ptr [rax]
0x000000000008426b : add eax, 0x33cb58 ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x0000000000086914 : add eax, 0x33cec7 ; mov qword ptr [rip + 0x33ceb8], rsi ; xor eax, eax ; ret
0x00000000000801cc : add eax, 0x340cdf ; mov rax, qword ptr [rax] ; test rax, rax ; jne 0x80213 ; xor edi, edi ; call qword ptr [r15]
0x00000000001374c5 : add eax, 0x3d8d4800 ; xor eax, 0x748b0005 ; ret 0x4804
0x0000000000116667 : add eax, 0x48 ; cmp rax, rdx ; jb 0x11666a ; xor eax, eax ; ret
0x000000000003b501 : add eax, 0x48000000 ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x00000000000aa026 : add eax, 0x480f8948 ; mov dword ptr [rdi + 5], edx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000f7f3e : add eax, 0x66c3d8f7 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000ff6ac : add eax, 0x85480000 ; sal byte ptr [rbp - 0x2c], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000003a27f : add eax, 0xc8c14818 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000002c6c9 : add eax, 0xd8658d48 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000013a3fc : add eax, 0xd8894900 ; mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x5665f
0x0000000000035522 : add eax, 0xf6310000 ; test eax, eax ; sete sil ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x000000000016bc8b : add eax, 0xf660000 ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x00000000000484e9 : add eax, 1 ; cmp rax, rdx ; jne 0x484ea ; xor eax, eax ; ret
0x0000000000098cc6 : add eax, 1 ; sub rsi, 1 ; jne 0x98ccb ; xor eax, eax ; ret
0x00000000000868cf : add eax, 8 ; cmp rdx, rax ; ja 0x868d3 ; xor eax, eax ; ret
0x000000000014623c : add eax, dword ptr [rax] ; add bh, bh ; nop ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx + 0x10], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x00000000000ff87d : add eax, dword ptr [rax] ; add byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp - 0x2d], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000104b34 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10564f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed7 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10566f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db2 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10568f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c59 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056af ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105404 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056cf ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052df : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056ef ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105186 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10570f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105061 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10572f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x000000000016be81 : add eax, dword ptr [rax] ; add byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000007ef1a : add eax, dword ptr [rbp + 0x10] ; mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007eee9 : add eax, dword ptr [rbp + 0x18] ; mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000ac013 : add eax, ebx ; nop ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x000000000004dd79 : add eax, ecx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x000000000003b142 : add eax, esp ; mov dword ptr [rbp], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001168b3 : add ebp, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001166cc : add ebx, eax ; nop ; xor eax, eax ; ret
0x00000000000488d4 : add ebx, eax ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000000a0503 : add ecx, 1 ; movzx edx, byte ptr [rcx] ; test dl, dl ; jne 0xa0508 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0581 : add ecx, 1 ; movzx edx, byte ptr [rcx] ; test dl, dl ; jne 0xa0579 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x0000000000098c06 : add ecx, 1 ; sub rsi, 1 ; jne 0x98c0e ; xor edi, edi ; mov rax, rdi ; ret
0x00000000000a9f84 : add ecx, dword ptr [rcx + 0x357890f] ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x000000000012672c : add ecx, eax ; mov eax, ecx ; shr eax, 3 ; mov ecx, eax ; xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x000000000012e64f : add edi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307ea : add edi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000001307a2 : add edi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000000a0751 : add edi, 1 ; movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0754 ; xor eax, eax ; ret
0x00000000000a07a8 : add edi, 1 ; movsx r8d, byte ptr [rdi] ; test r8b, r8b ; jne 0xa079e ; xor eax, eax ; ret
0x00000000000ac795 : add edi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac79b ; xor eax, eax ; ret
0x0000000000048681 : add esi, 1 ; cmp rsi, rdx ; jne 0x48682 ; xor eax, eax ; ret
0x000000000013dd5e : add esi, dword ptr [rbp - 0x11] ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000007693d : add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000003b01c : add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba3f1 : add esp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000000be4e1 : add esp, 0x10 ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002a693 : add esp, 0x10 ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008fabd : add esp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x000000000006bcd1 : add esp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013a393 : add esp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000d6daa : add esp, 0x18 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000037524 : add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076a05 : add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079e71 : add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000080451 : add esp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000007de6d : add esp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000007dea6 : add esp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000080aad : add esp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000136419 : add esp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8e74 : add esp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x00000000000dbd3e : add esp, 0x28 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cf961 : add esp, 0x28 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000079807 : add esp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124369 : add esp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c94a1 : add esp, 0x38 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ffde9 : add esp, 0x400 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007610c : add esp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0fc : add esp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000128a5b : add esp, 0x58 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000acfc9 : add esp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008401f : add esp, 0x68 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003a14f : add esp, 0x80 ; xor eax, eax ; pop rbx ; ret
0x00000000000c9007 : add esp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013a141 : add esp, 0xa0 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012fe09 : add esp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000012e645 : add esp, 8 ; mov rsi, rbp ; mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001176ce : add esp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000002bb9f : add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000022688 : add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079671 : add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ec1ab : add esp, 8 ; xor eax, eax ; ret
0x00000000000f704a : add esp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000011f8f0 : add qword ptr [rax], r12 ; je 0x11f8e0 ; pop rbx ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011f8ef : add qword ptr [rax], r12 ; je 0x11f8e1 ; pop rbx ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000098730 : add qword ptr [rbp], r12 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000116666 : add rax, 0x48 ; cmp rax, rdx ; jb 0x11666b ; xor eax, eax ; ret
0x00000000000484e8 : add rax, 1 ; cmp rax, rdx ; jne 0x484eb ; xor eax, eax ; ret
0x0000000000098cc5 : add rax, 1 ; sub rsi, 1 ; jne 0x98ccc ; xor eax, eax ; ret
0x00000000000868ce : add rax, 8 ; cmp rdx, rax ; ja 0x868d4 ; xor eax, eax ; ret
0x000000000007ef19 : add rax, qword ptr [rbp + 0x10] ; mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000007eee8 : add rax, qword ptr [rbp + 0x18] ; mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000004dd78 : add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x00000000000a0502 : add rcx, 1 ; movzx edx, byte ptr [rcx] ; test dl, dl ; jne 0xa0509 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x0000000000098c05 : add rcx, 1 ; sub rsi, 1 ; jne 0x98c0f ; xor edi, edi ; mov rax, rdi ; ret
0x000000000012e64e : add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e9 : add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000001307a1 : add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000000a0750 : add rdi, 1 ; movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0755 ; xor eax, eax ; ret
0x00000000000a07a7 : add rdi, 1 ; movsx r8d, byte ptr [rdi] ; test r8b, r8b ; jne 0xa079f ; xor eax, eax ; ret
0x00000000000ac794 : add rdi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac79c ; xor eax, eax ; ret
0x0000000000048680 : add rsi, 1 ; cmp rsi, rdx ; jne 0x48683 ; xor eax, eax ; ret
0x000000000007693c : add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000003b01b : add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ba3f0 : add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x00000000000be4e0 : add rsp, 0x10 ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002a692 : add rsp, 0x10 ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008fabc : add rsp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x000000000006bcd0 : add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013a392 : add rsp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000d6da9 : add rsp, 0x18 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000037523 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076a04 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079e70 : add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000080450 : add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000007de6c : add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000007dea5 : add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000080aac : add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000136418 : add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8e73 : add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x00000000000dbd3d : add rsp, 0x28 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cf960 : add rsp, 0x28 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000079806 : add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000124368 : add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c94a0 : add rsp, 0x38 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000ffde8 : add rsp, 0x400 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007610b : add rsp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0fb : add rsp, 0x48 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000128a5a : add rsp, 0x58 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000acfc8 : add rsp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008401e : add rsp, 0x68 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003a14e : add rsp, 0x80 ; xor eax, eax ; pop rbx ; ret
0x00000000000c9006 : add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013a140 : add rsp, 0xa0 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012fe08 : add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x00000000001176cd : add rsp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000002bb9e : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000022687 : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079670 : add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ec1aa : add rsp, 8 ; xor eax, eax ; ret
0x00000000000f7049 : add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000001b35f8 : and al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x0000000000029868 : and al, 0x10 ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000007de9e : and al, 0x10 ; mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x00000000000c9c25 : and al, 0x10 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000004540a : and al, 0x10 ; xor esi, esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000bb416 : and al, 0x18 ; xor r8d, r8d ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000707e1 : and al, 0x20 ; xor esi, esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000f767b : and al, 0x2c ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000306cb : and al, 0x39 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000011b0f3 : and al, 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a7fb : and al, 0x48 ; mov dword ptr [rbx + 0x10], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000076b7b : and al, 0x50 ; push 0 ; lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000fe327 : and al, 0x60 ; mov dword ptr [rbp + 0x24], eax ; xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x00000000000d6501 : and al, 0x68 ; xor edi, edi ; jmp 0xd64ce
0x00000000000d6500 : and al, 0x68 ; xor edi, edi ; jmp 0xd64cf
0x00000000000f70cd : and al, 0x74 ; xor byte ptr [rax + 0x63], cl ; ret 0xc283
0x00000000000b73db : and al, 0x84 ; add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor al, 0x83 ; sub r10, rax ; jmp 0xb740d
0x0000000000132bb8 : and al, 0xa7 ; add byte ptr [rax], al ; test eax, eax ; jne 0x132be0 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001a547c : and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000000bfdef : and al, 0xc ; mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000139626 : and al, 0xc ; xor eax, eax ; test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000001462ba : and al, 0xf ; add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146382 : and al, 0xf ; add byte ptr [rbp + 9], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000106963 : and al, 4 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000e0a8c : and al, 4 ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000e0b23 : and al, 8 ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007dea3 : and al, 8 ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000124b0d : and al, 8 ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000360c6 : and al, 8 ; mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x0000000000139e53 : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981e : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a2 : and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x0000000000084273 : and al, 8 ; xor edi, edi ; call qword ptr [rax]
0x000000000012cdce : and al, 8 ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000000dbdfd : and al, byte ptr [rbx + 0xd7403f8] ; xor eax, eax ; pop rbx ; ret
0x0000000000030858 : and bh, byte ptr [rcx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000097fa7 : and bl, al ; nop dword ptr [rax] ; xor rax, rax ; ret
0x00000000000759e6 : and byte ptr [r9 - 0x77], r9b ; xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x000000000011257d : and byte ptr [rax + 0x2b], cl ; xor r9b, bpl ; ret
0x000000000003a238 : and byte ptr [rax - 0x3f], cl ; retf 0x6411 ; xor rdx, qword ptr [0x30] ; call rdx
0x0000000000122d42 : and byte ptr [rax - 0x73], cl ; xor eax, 0x6ab80 ; call 0x14782f
0x00000000000f4546 : and byte ptr [rax - 0x75], cl ; xor ecx, dword ptr [rax - 0x7d] ; ret
0x00000000001166fb : and byte ptr [rax], al ; jne 0x1166fd ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x000000000011f8f2 : and byte ptr [rbx + rbx*8 + 0x5b], dh ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001142f1 : and byte ptr [rcx + 0x2b], cl ; je 0x114321 ; xor cl, ch ; ret
0x00000000001b5bad : and byte ptr [rcx + 0xe], ah ; sbb byte ptr [rcx + 0xe], al ; adc byte ptr [rcx + 0xe], al ; or byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret 1
0x00000000000759e7 : and byte ptr [rcx - 0x77], cl ; xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x00000000000707e2 : and byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000019393c : and byte ptr [rdi], ch ; cld ; push qword ptr [rax + 0x30] ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x000000000008f833 : and byte ptr [rsi + 0xf], ah ; out dx, eax ; mul byte ptr [rsi + 0xf] ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x00000000000fd82f : and byte ptr [rsi + rcx + 0x48], dh ; xor eax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x000000000002d7da : and dl, byte ptr [rcx + 0x39] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000362b6 : and dword ptr [rdi + rdx*8], eax ; xor eax, eax ; ret
0x00000000000363e8 : and dword ptr [rdi], eax ; xor eax, eax ; ret
0x00000000000801a3 : and dword ptr [rsp + rsi], ecx ; add byte ptr [rax - 0x77], cl ; cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x00000000000c7c28 : and eax, 0x30 ; test rax, rax ; je 0xc7c56 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f80fc : and eax, 0x30 ; test rax, rax ; je 0xf8161 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000004dae8 : and eax, 0x30 ; xor esi, esi ; call rax
0x0000000000124b0a : and eax, 0x824448b ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000030561 : and eax, 0xc1480039 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001726f5 : and eax, 0xc8c14800 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; jmp rax
0x00000000000fc504 : and eax, 0xe8ef8948 ; stosd dword ptr [rdi], eax ; xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000fd9b9 : and eax, 0xffffeff0 ; or esi, eax ; xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x00000000000368a8 : and eax, dword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000033ef2 : and eax, ecx ; xor rax, rdx ; movzx edx, byte ptr [rdi] ; test dl, dl ; jne 0x33ee4 ; ret
0x0000000000116af3 : and ebx, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000003b232 : and ecx, 0x3ff ; xor eax, ecx ; ret
0x00000000000367be : and ecx, dword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x000000000007fa52 : and edi, 0xfffffff8 ; cmp rdx, rdi ; je 0x7f9e6 ; nop ; xor eax, eax ; ret
0x000000000013ab59 : and esi, dword ptr [rax + rbp - 0x373eb800] ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000000362b5 : and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x00000000000363e7 : and qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000368a7 : and rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000033ef1 : and rax, rcx ; xor rax, rdx ; movzx edx, byte ptr [rdi] ; test dl, dl ; jne 0x33ee5 ; ret
0x00000000000367bd : and rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000116a63 : cdq ; sti ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000003b448 : cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001361a0 : clc ; add dword ptr [rsi + 0x27], edi ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001360ae : clc ; add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000170d0a : clc ; cmp eax, dword ptr [rsi - 8] ; jne 0x170d30 ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d30 ; xor eax, eax ; ret
0x0000000000170d09 : clc ; cmp eax, dword ptr [rsi - 8] ; jne 0x170d31 ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d31 ; xor eax, eax ; ret
0x000000000016cc99 : clc ; cmp rcx, rax ; jne 0x16cccb ; xor eax, eax ; ret
0x000000000016cc98 : clc ; cmp rcx, rax ; jne 0x16cccc ; xor eax, eax ; ret
0x000000000016c28d : clc ; cmp rcx, rax ; jne 0x16cccf ; xor eax, eax ; ret
0x000000000016c28c : clc ; cmp rcx, rax ; jne 0x16ccd0 ; xor eax, eax ; ret
0x000000000016dad9 : clc ; cmp rcx, rax ; jne 0x16db0b ; xor eax, eax ; ret
0x000000000016dad8 : clc ; cmp rcx, rax ; jne 0x16db0c ; xor eax, eax ; ret
0x000000000016d8bd : clc ; cmp rcx, rax ; jne 0x16db0f ; xor eax, eax ; ret
0x000000000016d8bc : clc ; cmp rcx, rax ; jne 0x16db10 ; xor eax, eax ; ret
0x000000000007fa54 : clc ; cmp rdx, rdi ; je 0x7f9e4 ; nop ; xor eax, eax ; ret
0x0000000000125ea7 : clc ; jb 0x125ecc ; cmp eax, edx ; jne 0x125e8c ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x0000000000170d0d : clc ; jne 0x170d2d ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d2d ; xor eax, eax ; ret
0x0000000000170d0c : clc ; jne 0x170d2e ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d2e ; xor eax, eax ; ret
0x000000000016c80f : clc ; mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16ccd3 ; xor eax, eax ; ret
0x000000000016c80e : clc ; mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16ccd4 ; xor eax, eax ; ret
0x000000000016d9df : clc ; mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16db13 ; xor eax, eax ; ret
0x000000000016d9de : clc ; mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16db14 ; xor eax, eax ; ret
0x000000000016cc95 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16cccf ; xor eax, eax ; ret
0x000000000016cc94 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd0 ; xor eax, eax ; ret
0x000000000016c289 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd3 ; xor eax, eax ; ret
0x000000000016c288 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd4 ; xor eax, eax ; ret
0x000000000016dad5 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db0f ; xor eax, eax ; ret
0x000000000016dad4 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db10 ; xor eax, eax ; ret
0x000000000016d8b9 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db13 ; xor eax, eax ; ret
0x000000000016d8b8 : clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db14 ; xor eax, eax ; ret
0x0000000000108ec2 : clc ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x0000000000121a66 : clc ; push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000117801 : clc ; push qword ptr [rbp - 0xe] ; xor eax, eax ; leave ; ret
0x000000000003a8b3 : clc ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003a8c5 : clc ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x0000000000170d12 : cld ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d28 ; xor eax, eax ; ret
0x0000000000170d11 : cld ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d29 ; xor eax, eax ; ret
0x00000000001704e1 : cld ; cmp eax, ecx ; jne 0x1706fb ; xor eax, eax ; ret
0x00000000001704e0 : cld ; cmp eax, ecx ; jne 0x1706fc ; xor eax, eax ; ret
0x000000000016d8e3 : cld ; cmp ecx, dword ptr [rdi - 4] ; jne 0x16db22 ; xor eax, eax ; ret
0x000000000016d8e2 : cld ; cmp ecx, dword ptr [rdi - 4] ; jne 0x16db23 ; xor eax, eax ; ret
0x000000000016c2b6 : cld ; cmp ecx, eax ; jne 0x16ccda ; xor eax, eax ; ret
0x000000000016c2b5 : cld ; cmp ecx, eax ; jne 0x16ccdb ; xor eax, eax ; ret
0x0000000000193986 : cld ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x0000000000193942 : cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x000000000016d8e6 : cld ; jne 0x16db1f ; xor eax, eax ; ret
0x000000000016d8e5 : cld ; jne 0x16db20 ; xor eax, eax ; ret
0x0000000000170d15 : cld ; jne 0x170d25 ; xor eax, eax ; ret
0x0000000000170d14 : cld ; jne 0x170d26 ; xor eax, eax ; ret
0x000000000016c2b3 : cld ; mov eax, dword ptr [rdi - 4] ; cmp ecx, eax ; jne 0x16ccdd ; xor eax, eax ; ret
0x000000000016c2b2 : cld ; mov eax, dword ptr [rdi - 4] ; cmp ecx, eax ; jne 0x16ccde ; xor eax, eax ; ret
0x00000000001704de : cld ; mov ecx, dword ptr [rsi - 4] ; cmp eax, ecx ; jne 0x1706fe ; xor eax, eax ; ret
0x00000000001704dd : cld ; mov ecx, dword ptr [rsi - 4] ; cmp eax, ecx ; jne 0x1706ff ; xor eax, eax ; ret
0x000000000016c515 : cld ; mov ecx, dword ptr [rsi - 4] ; cmp ecx, eax ; jne 0x16ccdd ; xor eax, eax ; ret
0x000000000016c514 : cld ; mov ecx, dword ptr [rsi - 4] ; cmp ecx, eax ; jne 0x16ccde ; xor eax, eax ; ret
0x000000000019393e : cld ; push qword ptr [rax + 0x30] ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x0000000000193982 : cld ; push qword ptr [rax] ; xor bh, ah ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x00000000001168e4 : cld ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116a53 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a69 ; xor eax, eax ; ret
0x0000000000116a83 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a99 ; xor eax, eax ; ret
0x0000000000116ab3 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116ac9 ; xor eax, eax ; ret
0x0000000000116ae3 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116af9 ; xor eax, eax ; ret
0x0000000000116ae2 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116afa ; xor eax, eax ; ret
0x0000000000116b13 : cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116b29 ; xor eax, eax ; ret
0x000000000016ec32 : cli ; add al, 0x73 ; xor eax, 0x7701fa80 ; cmp dh, byte ptr [rdx + 2] ; mov byte ptr [rdi], cl ; vzeroupper ; ret
0x00000000001507cd : cli ; add al, 0x73 ; xor eax, dword ptr [rax + 0x3b7701fa] ; jb 0x1507ed ; movzx ecx, byte ptr [rsi] ; mov byte ptr [rdi], cl ; ret
0x00000000000fcbe1 : cli ; add al, 0x77 ; or esp, dword ptr [rsi - 0x77] ; push rsi ; xor ax, ax ; ret
0x0000000000116c32 : cli ; cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c4a ; xor eax, eax ; ret
0x0000000000079521 : cli ; dec dword ptr [rax - 0x77] ; fucompi st(0) ; lea esp, dword ptr [rdx + rdi*8 - 1] ; xor eax, eax ; pop rbx ; ret
0x000000000007fa57 : cli ; je 0x7f9e1 ; nop ; xor eax, eax ; ret
0x000000000003a8b1 : cli ; mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003a8c2 : cli ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x00000000000d80d8 : cli ; or dh, byte ptr [rbp - 0x42] ; xor eax, eax ; cmp byte ptr [rdi + 0x65], 0 ; setne al ; add eax, eax ; ret
0x0000000000116932 : cli ; std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x11694a ; xor eax, eax ; ret
0x0000000000116b24 : cli ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116c33 : cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c49 ; xor eax, eax ; ret
0x0000000000116c63 : cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c79 ; xor eax, eax ; ret
0x0000000000116c93 : cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116ca9 ; xor eax, eax ; ret
0x0000000000116cc3 : cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116cd9 ; xor eax, eax ; ret
0x0000000000116cf3 : cli ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116d09 ; xor eax, eax ; ret
0x000000000013d246 : cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000001a8f3d : cmc ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x0000000000121a63 : cmc ; inc dword ptr [rbx + 0xe75fff8] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000072eb2 : cmc ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000801a9 : cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x000000000003aeef : cmovbe edx, eax ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x000000000003aeee : cmovbe rdx, r8 ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x00000000000ca1c5 : cmove ecx, eax ; xor eax, eax ; call 0x56487
0x0000000000116744 : cmove edx, eax ; xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x00000000000ca1c4 : cmove rcx, rax ; xor eax, eax ; call 0x56488
0x0000000000116743 : cmove rdx, rax ; xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x000000000013215f : cmovns eax, dword ptr [rbx - 0x1f7cef3e] ; xor byte ptr [rcx - 0x7d], cl ; ret
0x00000000000009e5 : cmovo edx, dword ptr [rdx] ; xor byte ptr [rdx + 0x310e2046], ch ; rol qword ptr [rax + 0x4260a120], cl ; ret 0x4021
0x000000000010462f : cmovs ebx, esi ; mov rbx, qword ptr [rbx] ; test rbx, rbx ; jne 0x104629 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000012b79d : cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000008fcd1 : cmp al, 0x33 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000013a3fa : cmp al, 0x3a ; add eax, 0xd8894900 ; mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x56661
0x00000000000bd498 : cmp al, 0x90 ; xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000dff27 : cmp al, 0xb0 ; shl rdx, 2 ; xor esi, esi ; call 0x9181c
0x000000000012fd50 : cmp al, 0xd6 ; add byte ptr [rax], al ; test eax, eax ; jne 0x12fd78 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001801e1 : cmp al, 0xeb ; inc esi ; xor eax, 0x3b57ffeb ; jmp 0x1801f5
0x000000000004867a : cmp al, 0xf0 ; mov qword ptr [rcx + rsi*8], rdi ; add rsi, 1 ; cmp rsi, rdx ; jne 0x48689 ; xor eax, eax ; ret
0x000000000004867e : cmp al, 0xf1 ; add rsi, 1 ; cmp rsi, rdx ; jne 0x48685 ; xor eax, eax ; ret
0x00000000000d81f0 : cmp al, 1 ; jne 0xd81f3 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8194 ; ret
0x000000000016d8c3 : cmp al, 2 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000105100 : cmp al, 6 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000000857c2 : cmp al, bl ; xor eax, dword ptr [rax] ; jne 0x857df ; jmp 0x857f9
0x0000000000020404 : cmp al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000032942 : cmp al, byte ptr [rcx] ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000013a3fb : cmp al, byte ptr [rip - 0x2776b700] ; mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x56660
0x00000000001706e6 : cmp al, byte ptr [rsi - 1] ; jne 0x17070c ; xor eax, eax ; ret
0x000000000017058e : cmp al, byte ptr [rsi - 1] ; jne 0x170710 ; xor eax, eax ; ret
0x00000000001169f2 : cmp bh, ch ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a0a ; xor eax, eax ; ret
0x0000000000116cf2 : cmp bh, dl ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116d0a ; xor eax, eax ; ret
0x0000000000146a50 : cmp bl, al ; nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000001800f5 : cmp bl, ch ; inc esi ; xor eax, 0x39e1ffeb ; jmp 0x180109
0x0000000000112578 : cmp byte ptr [r8 - 0x75], cl ; push rbx ; and byte ptr [rax + 0x2b], cl ; xor r9b, bpl ; ret
0x00000000000e9019 : cmp byte ptr [r8], cl ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000112579 : cmp byte ptr [rax - 0x75], cl ; push rbx ; and byte ptr [rax + 0x2b], cl ; xor r9b, bpl ; ret
0x000000000013d243 : cmp byte ptr [rax - 0x77], cl ; cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x0000000000098cc0 : cmp byte ptr [rax], 0 ; je 0x98d01 ; add rax, 1 ; sub rsi, 1 ; jne 0x98cd1 ; xor eax, eax ; ret
0x00000000000a5a09 : cmp byte ptr [rax], 1 ; sbb rax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x0000000000098cc1 : cmp byte ptr [rax], al ; je 0x98d00 ; add rax, 1 ; sub rsi, 1 ; jne 0x98cd0 ; xor eax, eax ; ret
0x00000000000868ca : cmp byte ptr [rax], al ; jne 0x868f0 ; add rax, 8 ; cmp rdx, rax ; ja 0x868d8 ; xor eax, eax ; ret
0x000000000003a5d7 : cmp byte ptr [rax], al ; xor esi, esi ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000e901a : cmp byte ptr [rax], cl ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001142ec : cmp byte ptr [rcx - 0x75], cl ; jl 0x114321 ; and byte ptr [rcx + 0x2b], cl ; je 0x114326 ; xor cl, ch ; ret
0x00000000000a5a0a : cmp byte ptr [rcx], al ; sbb rax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x00000000000d25d0 : cmp byte ptr [rdi + 1], 0 ; jne 0xd25f9 ; or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x00000000000fd9b8 : cmp byte ptr [rip - 0x1010], ah ; or esi, eax ; xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x00000000001462b8 : cmp byte ptr [rsp + 0xf], 0 ; jne 0x1462f5 ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146380 : cmp byte ptr [rsp + 0xf], 0 ; jne 0x14639d ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000000a0472 : cmp ch, bl ; mov bl, 0x48 ; mov ecx, eax ; xor eax, eax ; mov qword ptr [rdx], rcx ; ret
0x00000000000d80d7 : cmp dl, 0xa ; jne 0xd80aa ; xor eax, eax ; cmp byte ptr [rdi + 0x65], 0 ; setne al ; add eax, eax ; ret
0x000000000002e2e3 : cmp dword ptr [r8], r8d ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000116661 : cmp dword ptr [rax + 8], edi ; je 0x116688 ; add rax, 0x48 ; cmp rax, rdx ; jb 0x116670 ; xor eax, eax ; ret
0x00000000000868c9 : cmp dword ptr [rax], 0 ; jne 0x868f1 ; add rax, 8 ; cmp rdx, rax ; ja 0x868d9 ; xor eax, eax ; ret
0x000000000002ac38 : cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002aefc : cmp dword ptr [rax], eax ; xor ebx, ebx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002e457 : cmp dword ptr [rax], r8d ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000f101e : cmp dword ptr [rbp], ebx ; mov qword ptr [r12], rax ; je 0xf100a ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000002ac7b : cmp dword ptr [rcx + rdi], 0x11c8c148 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000079101 : cmp dword ptr [rdi + 0x10], eax ; jb 0x7913e ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000794d1 : cmp dword ptr [rdi + 0x10], eax ; jb 0x794cc ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000001166f9 : cmp dword ptr [rdi + 0x20], 0 ; jne 0x1166ff ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000abbab : cmp dword ptr [rdi + 0xc], ecx ; jne 0xabd2b ; xor eax, eax ; ret
0x0000000000104ac4 : cmp dword ptr [rdi + 8], 0 ; je 0x1055b1 ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000125ea3 : cmp dword ptr [rdx], eax ; cmp r8, rdi ; jb 0x125ed0 ; cmp eax, edx ; jne 0x125e90 ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x00000000000e98d1 : cmp dword ptr [rip + 0x2da588], 0 ; je 0xe991b ; xor eax, eax ; ret
0x0000000000136060 : cmp dword ptr [rsi + 0x10], 0xc ; je 0x136078 ; xor eax, eax ; ret
0x000000000003027b : cmp dword ptr es:[rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002e456 : cmp dword ptr es:[rax], r8d ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000801a2 : cmp eax, 0x340c21 ; mov rbp, rsi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x00000000000ceb03 : cmp eax, 0x4d44 ; je 0xceb23 ; cmp rax, 0x7275 ; jne 0xceafc ; xor eax, eax ; ret
0x00000000000ceb0b : cmp eax, 0x7275 ; jne 0xceaf4 ; xor eax, eax ; ret
0x000000000008fb06 : cmp eax, 0xc1480033 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000117800 : cmp eax, 0xff ; jne 0x1177ff ; xor eax, eax ; leave ; ret
0x0000000000121a65 : cmp eax, 0xff ; jne 0x121a85 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000047ff2 : cmp eax, 0xfffff001 ; jae 0x48005 ; xor eax, eax ; ret
0x0000000000114ad9 : cmp eax, 1 ; je 0x114b89 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000aadea : cmp eax, 1 ; je 0xaae14 ; cmp eax, 2 ; je 0xaae0c ; xor eax, eax ; ret
0x00000000001360ad : cmp eax, 1 ; jle 0x1360cd ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013619f : cmp eax, 1 ; jle 0x1361da ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013dbeb : cmp eax, 2 ; je 0x13dc6f ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000aadef : cmp eax, 2 ; je 0xaae07 ; xor eax, eax ; ret
0x00000000000dbdfe : cmp eax, 3 ; je 0xdbe18 ; xor eax, eax ; pop rbx ; ret
0x00000000000dbdf9 : cmp eax, 6 ; je 0xdbe2d ; cmp eax, 3 ; je 0xdbe1d ; xor eax, eax ; pop rbx ; ret
0x000000000013dd5d : cmp eax, dword ptr [rbx] ; jne 0x13dd61 ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000170d13 : cmp eax, dword ptr [rsi - 4] ; jne 0x170d27 ; xor eax, eax ; ret
0x0000000000170d0b : cmp eax, dword ptr [rsi - 8] ; jne 0x170d2f ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d2f ; xor eax, eax ; ret
0x00000000000dfc57 : cmp eax, eax ; jne 0xdfc40 ; mov dword ptr [rbx + 0x2c], eax ; mov dword ptr [rbx + 0x30], eax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007de64 : cmp eax, ecx ; jbe 0x7de91 ; mov rax, qword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000001704e2 : cmp eax, ecx ; jne 0x1706fa ; xor eax, eax ; ret
0x000000000017064a : cmp eax, ecx ; jne 0x17070f ; xor eax, eax ; ret
0x00000000001706de : cmp eax, ecx ; jne 0x170714 ; movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170714 ; xor eax, eax ; ret
0x00000000000ac227 : cmp eax, ecx ; jne 0xac242 ; test ecx, ecx ; je 0xac242 ; xor eax, eax ; ret
0x0000000000125ea6 : cmp eax, edi ; jb 0x125ecd ; cmp eax, edx ; jne 0x125e8d ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000011666b : cmp eax, edx ; jb 0x116666 ; xor eax, eax ; ret
0x0000000000125eaa : cmp eax, edx ; jne 0x125e89 ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x00000000000484ed : cmp eax, edx ; jne 0x484e6 ; xor eax, eax ; ret
0x000000000013a58f : cmp ebp, 0xff ; mov byte ptr [rax], 0 ; jle 0x13a5b9 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000001801dd : cmp ebp, ebx ; inc dword ptr [rdx] ; cmp al, 0xeb ; inc esi ; xor eax, 0x3b57ffeb ; jmp 0x1801f9
0x000000000003b016 : cmp ebx, 0xff ; jne 0x3b017 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001932f1 : cmp ebx, 0xff ; xor byte ptr [rbp - 0x78ef0005], al ; sti ; jmp rax
0x000000000013140e : cmp ebx, eax ; je 0x13142e ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f8e6f : cmp ebx, eax ; jne 0xf8efb ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x000000000018011d : cmp ebx, ebp ; inc esi ; xor eax, 0x39e1ffeb ; jmp 0x180131
0x000000000016d8e4 : cmp ecx, dword ptr [rdi - 4] ; jne 0x16db21 ; xor eax, eax ; ret
0x000000000016cc9b : cmp ecx, eax ; jne 0x16ccc9 ; xor eax, eax ; ret
0x000000000016c28f : cmp ecx, eax ; jne 0x16cccd ; xor eax, eax ; ret
0x000000000016c2b7 : cmp ecx, eax ; jne 0x16ccd9 ; xor eax, eax ; ret
0x000000000016dadb : cmp ecx, eax ; jne 0x16db09 ; xor eax, eax ; ret
0x000000000016d8bf : cmp ecx, eax ; jne 0x16db0d ; xor eax, eax ; ret
0x000000000016db0f : cmp ecx, eax ; jne 0x16db1c ; xor eax, eax ; ret
0x000000000013e7a3 : cmp ecx, edx ; jae 0x13e7b6 ; xor eax, eax ; ret
0x000000000013e7e3 : cmp ecx, edx ; jae 0x13e7f6 ; xor eax, eax ; ret
0x000000000003aee9 : cmp ecx, edx ; mov qword ptr [rdi], rax ; cmovbe rdx, r8 ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x00000000000a074c : cmp ecx, esi ; je 0xa0771 ; add rdi, 1 ; movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0759 ; xor eax, eax ; ret
0x0000000000097587 : cmp edi, 0xd ; je 0x975a1 ; xor byte ptr [rdx + 0xe], 0x2a ; ret
0x00000000000fcbe0 : cmp edx, 4 ; ja 0xfcbfb ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x00000000000025e5 : cmp edx, dword ptr [rbp + 0x1b] ; xor ah, byte ptr [rsi] ; sahf ; jl 0x2584 ; loop 0x25cf ; ret 0x23cb
0x00000000000025e4 : cmp edx, dword ptr [rbp + 0x1b] ; xor ah, byte ptr [rsi] ; sahf ; jl 0x2585 ; loop 0x25d0 ; ret 0x23cb
0x00000000000868d3 : cmp edx, eax ; ja 0x868cf ; xor eax, eax ; ret
0x00000000000ac790 : cmp edx, eax ; je 0xac810 ; add rdi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac7a0 ; xor eax, eax ; ret
0x000000000007fa56 : cmp edx, edi ; je 0x7f9e2 ; nop ; xor eax, eax ; ret
0x000000000008fd2a : cmp esi, dword ptr [rbx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000048685 : cmp esi, edx ; jne 0x4867e ; xor eax, eax ; ret
0x00000000001169a3 : cmp esp, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116660 : cmp qword ptr [rax + 8], rdi ; je 0x116689 ; add rax, 0x48 ; cmp rax, rdx ; jb 0x116671 ; xor eax, eax ; ret
0x000000000002e206 : cmp qword ptr [rax], rax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000f101d : cmp qword ptr [rbp], rbx ; mov qword ptr [r12], rax ; je 0xf100b ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000079100 : cmp qword ptr [rdi + 0x10], rax ; jb 0x7913f ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000794d0 : cmp qword ptr [rdi + 0x10], rax ; jb 0x794cd ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000001166f8 : cmp qword ptr [rdi + 0x20], 0 ; jne 0x116700 ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000e98d0 : cmp qword ptr [rip + 0x2da588], 0 ; je 0xe991c ; xor eax, eax ; ret
0x0000000000125ea5 : cmp r8, rdi ; jb 0x125ece ; cmp eax, edx ; jne 0x125e8e ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x00000000000dfc56 : cmp r8d, eax ; jne 0xdfc41 ; mov dword ptr [rbx + 0x2c], eax ; mov dword ptr [rbx + 0x30], eax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ac226 : cmp r8d, ecx ; jne 0xac243 ; test ecx, ecx ; je 0xac243 ; xor eax, eax ; ret
0x000000000003aee8 : cmp r9, rdx ; mov qword ptr [rdi], rax ; cmovbe rdx, r8 ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x0000000000047ff1 : cmp rax, -0xfff ; jae 0x48006 ; xor eax, eax ; ret
0x00000000000ceb0a : cmp rax, 0x7275 ; jne 0xceaf5 ; xor eax, eax ; ret
0x000000000011666a : cmp rax, rdx ; jb 0x116667 ; xor eax, eax ; ret
0x0000000000116669 : cmp rax, rdx ; jb 0x116668 ; xor eax, eax ; ret
0x00000000000484ec : cmp rax, rdx ; jne 0x484e7 ; xor eax, eax ; ret
0x000000000016cc9a : cmp rcx, rax ; jne 0x16ccca ; xor eax, eax ; ret
0x000000000016c28e : cmp rcx, rax ; jne 0x16ccce ; xor eax, eax ; ret
0x000000000016dada : cmp rcx, rax ; jne 0x16db0a ; xor eax, eax ; ret
0x000000000016d8be : cmp rcx, rax ; jne 0x16db0e ; xor eax, eax ; ret
0x0000000000097586 : cmp rdi, 0xd ; je 0x975a2 ; xor byte ptr [rdx + 0xe], 0x2a ; ret
0x00000000000868d2 : cmp rdx, rax ; ja 0x868d0 ; xor eax, eax ; ret
0x000000000007fa55 : cmp rdx, rdi ; je 0x7f9e3 ; nop ; xor eax, eax ; ret
0x0000000000048684 : cmp rsi, rdx ; jne 0x4867f ; xor eax, eax ; ret
0x0000000000086822 : cmpsb byte ptr [rsi], byte ptr [rdi] ; xor eax, dword ptr [rax] ; mov qword ptr [rax], rdi ; ret
0x0000000000132b1e : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132b3f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bb9 : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132bdf ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008fd59 : cmpsd dword ptr [rsi], dword ptr [rdi] ; cmp esi, dword ptr [rbx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000184095 : cmpsd dword ptr [rsi], dword ptr [rdi] ; xor byte ptr [rsi + 0x4ce2e5dd], 0x67 ; add ch, byte ptr [rbp + rbp*2 + 0x5b] ; ret 0x6f9
0x0000000000086818 : cmpsd dword ptr [rsi], dword ptr [rdi] ; xor eax, dword ptr [rax] ; mov qword ptr [rax], rsi ; mov rax, qword ptr [rip + 0x33a6bb] ; mov qword ptr [rax], rdi ; ret
0x000000000003b449 : cwde ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000011f632 : cwde ; nop dword ptr [rax + rax] ; xor eax, eax ; pop rbx ; ret
0x0000000000089d83 : dec byte ptr [rax - 0x73] ; xor byte ptr [rax - 0x77], cl ; and byte ptr [rax + 0x31], cl ; ret 0x93be
0x00000000000f101c : dec dword ptr [rax + 0x39] ; pop rbp ; add byte ptr [rcx - 0x77], cl ; add al, 0x24 ; je 0xf100c ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000363e3 : dec dword ptr [rax - 0x2d] ; ror byte ptr [rax + 0x21], 7 ; xor eax, eax ; ret
0x00000000000577d3 : dec dword ptr [rax - 0x39] ; xor byte ptr [r8], r8b ; add byte ptr [rax], al ; add cl, ch ; ret
0x000000000004dadf : dec dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x00000000000db197 : dec dword ptr [rax - 0x75] ; adc ecx, dword ptr [rax - 0x7b] ; sal byte ptr [rbp - 0x40], cl ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000843e0 : dec dword ptr [rax - 0x75] ; add eax, 0x33c9e0 ; xor edi, edi ; call qword ptr [rax]
0x0000000000084268 : dec dword ptr [rax - 0x75] ; add eax, 0x33cb58 ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x0000000000079522 : dec dword ptr [rax - 0x77] ; fucompi st(0) ; lea esp, dword ptr [rdx + rdi*8 - 1] ; xor eax, eax ; pop rbx ; ret
0x0000000000130956 : dec dword ptr [rax - 0x7b] ; ror byte ptr [rax - 0x77], 0xc3 ; jne 0x1308fe ; xor eax, eax ; pop rbx ; ret
0x00000000000d64fd : dec dword ptr [rbx + rcx*4 + 0x44] ; and al, 0x68 ; xor edi, edi ; jmp 0xd64d2
0x00000000001142e7 : dec dword ptr [rcx - 0x75] ; je 0x114321 ; cmp byte ptr [rcx - 0x75], cl ; jl 0x114326 ; and byte ptr [rcx + 0x2b], cl ; je 0x11432b ; xor cl, ch ; ret
0x0000000000170590 : dec dword ptr [rdi] ; test dword ptr [rsi + 1], ebp ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000003188 : div byte ptr [rax] ; lodsb al, byte ptr [rsi] ; xor dh, bh ; xor byte ptr [rdx + rsi - 0x11fc0c82], ch ; mov eax, 0xa1a3e95a ; ret 0xba88
0x000000000008dbd2 : div byte ptr [rbp + 4] ; xor rax, rax ; ret
0x000000000000318c : div dword ptr [rax] ; lodsb al, byte ptr [rsi] ; xor bh, byte ptr [rsi - 0xd] ; add ebp, esi ; mov eax, 0xa1a3e95a ; ret 0xba88
0x000000000012672f : enter -0x173f, 3 ; mov ecx, eax ; xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x00000000000488d3 : enter -0x3cff, 0x66 ; nop dword ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000003b447 : enter -0x67b8, 0x48 ; mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000feae4 : enter -0x6d8, -1 ; xor eax, eax ; add rsp, 0x190 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000076b82 : enter -0x76b4, -0x17 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000007de65 : enter 0x1876, 0x48 ; mov eax, dword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x0000000000020742 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb61 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003561c : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x00000000000f76ab : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bbe : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86d : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000001174f4 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; test rax, rax ; je 0x117540 ; call rax
0x000000000004dae2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x00000000000ac228 : enter 0xd75, -0x7b ; leave ; je 0xac241 ; xor eax, eax ; ret
0x0000000000197fe5 : enter 1, -0x4c ; xor edi, eax ; jmp rsp
0x0000000000197fdd : enter 1, 0x24 ; xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x00000000000879f7 : fadd dword ptr [rax] ; add byte ptr [rax], al ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000488d1 : fadd dword ptr [rbx + 0x66c301c8] ; nop dword ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000000f7f40 : fadd st(3) ; nop word ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000abd28 : fadd st(3) ; nop word ptr [rax + rax] ; xor rax, rax ; ret
0x0000000000103500 : fbstp dword ptr [rcx] ; shr al, 0x48 ; xor ebp, esi ; lcall ptr [rax + 0x48] ; mov eax, ebx ; pop rdx ; pop rbx ; ret
0x000000000008991f : fcom dword ptr [rcx] ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000103a9c : fcom st(3) ; sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x000000000006bc65 : fcomp dword ptr [rbx - 0x3d] ; nop dword ptr [rax + rax] ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x00000000000fd0a3 : fcomp dword ptr [rbx - 0x3d] ; nop word ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; ret
0x0000000000086cd3 : fcomp dword ptr [rbx - 0x3d] ; xor eax, eax ; pop rbx ; ret
0x00000000000a5a0e : fdivr st(7) ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x000000000012fe3e : fiadd dword ptr [rax] ; add byte ptr [rbp + 0x480b75c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003b500 : fiadd word ptr [rip + 0x48000000] ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x00000000000fda26 : fild word ptr [rcx + 0xf] ; xor byte ptr [rcx], 0xc0 ; ret
0x000000000002aeff : fisttp dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000103346 : fisttp dword ptr [rcx + 0x5d0102] ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000001054a3 : fld dword ptr [rdx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000080bfb : fldcw word ptr [rbx] ; xor al, 0 ; jae 0x80bba ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000090d09 : fldenv dword ptr [rsi + 0xf] ; je 0x90d66 ; xor byte ptr [rsi + 0xf], ah ; xlatb ; ret
0x0000000000097f47 : fldenv dword ptr [rsi + 0xf] ; je 0x97fa4 ; xor byte ptr [rsi + 0xf], ah ; xlatb ; ret
0x000000000013a400 : fmul dword ptr [rcx + rcx*4 - 0x1f] ; mov rdi, rbp ; xor eax, eax ; call 0x5665b
0x000000000011b0ef : fmul dword ptr [rcx - 0x77] ; sub al, 0x24 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f71b9 : fmul dword ptr [rdi] ; lahf ; rcr byte ptr [rbx - 0x3d], 0x90 ; xor eax, eax ; pop rbx ; ret
0x00000000001168e3 : frndint ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001307e6 : fstp dword ptr [rbx + 0x5d] ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000000ff6a9 : fsubp st(0) ; add dword ptr [rip - 0x7ab80000], 0x5bd475c0 ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff87a : fsubp st(0) ; mov al, 3 ; add byte ptr [rax], al ; test rax, rax ; jne 0xff869 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000117822 : fsubr dword ptr [rdx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000079525 : fucompi st(0) ; lea esp, dword ptr [rdx + rdi*8 - 1] ; xor eax, eax ; pop rbx ; ret
0x00000000000dfcaa : fucompi st(0) ; sal byte ptr [rdx - 1], 0xff ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000004ab35 : fucompi st(0) ; xor eax, 0x48000565 ; add esp, 0x440 ; pop rbx ; ret
0x000000000012f427 : hlt ; add byte ptr [rax], al ; test eax, eax ; jne 0x12f44f ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f426 : hlt ; add byte ptr [rax], al ; test eax, eax ; jne 0x12f450 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000019867d : hlt ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001874fe : hlt ; inc dword ptr [rbx] ; xor esp, 0xf4810dff ; call qword ptr [rdi]
0x00000000000d81f3 : hlt ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8191 ; ret
0x00000000000ba3ee : idiv bh ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x0000000000130850 : idiv bh ; inc dword ptr [rbp + 0x5b0975c0] ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000012b15e : idiv bh ; xor eax, eax ; ret
0x0000000000116c13 : imul edi, edx, 0xc148002a ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x00000000001a643c : in al, -0x36 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000001a8f3c : in al, -0xb ; add byte ptr [rax], al ; xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001aab3c : in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x000000000010fbf7 : in al, 0x4d ; mov dword ptr [rbp], esp ; je 0x10fc29 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fc502 : in al, 0x75 ; and eax, 0xe8ef8948 ; stosd dword ptr [rdi], eax ; xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x0000000000104dd8 : in al, 0xa ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000013d242 : in al, dx ; cmp byte ptr [rax - 0x77], cl ; cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000003b4ff : in al, dx ; fiadd word ptr [rip + 0x48000000] ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x000000000012b6dc : in al, dx ; lea rsp, qword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000001242f9 : in al, dx ; xor al, ch ; xor byte ptr [rbp - 2], bl ; inc dword ptr [rbp - 0x769b8740] ; ret
0x0000000000131e83 : in al, dx ; xor dh, dh ; ret 0xc707
0x00000000001acb44 : in al, dx ; xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x0000000000030857 : in eax, 0x22 ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000184093 : in eax, 0x2d ; cmpsd dword ptr [rsi], dword ptr [rdi] ; xor byte ptr [rsi + 0x4ce2e5dd], 0x67 ; add ch, byte ptr [rbp + rbp*2 + 0x5b] ; ret 0x6f9
0x000000000003b01a : in eax, dx ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013d140 : in eax, dx ; je 0x13d181 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000010e410 : in eax, dx ; mov qword ptr [r12], rbp ; je 0x10e437 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x00000000000a075a : in eax, dx ; xor eax, eax ; ret
0x0000000000193987 : inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x000000000005dc32 : inc dword ptr [rax - 0x78] ; xor byte ptr [rcx - 0x7d], cl ; ret
0x00000000000dbdf5 : inc dword ptr [rax] ; add al, 0 ; cmp eax, 6 ; je 0xdbe31 ; cmp eax, 3 ; je 0xdbe21 ; xor eax, eax ; pop rbx ; ret
0x000000000013a591 : inc dword ptr [rax] ; add byte ptr [rax], al ; mov byte ptr [rax], 0 ; jle 0x13a5b7 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000130852 : inc dword ptr [rbp + 0x5b0975c0] ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000013619e : inc dword ptr [rbx + 0x277e01f8] ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000121a64 : inc dword ptr [rbx + 0xe75fff8] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001360ac : inc dword ptr [rbx + 0xe7e01f8] ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b015 : inc dword ptr [rbx - 0x128a0005] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003b234 : inc dword ptr [rbx] ; add byte ptr [rax], al ; xor eax, ecx ; ret
0x00000000001874ff : inc dword ptr [rbx] ; xor esp, 0xf4810dff ; call qword ptr [rdi]
0x0000000000128e0a : inc dword ptr [rcx + rcx*8 - 0x3c0c1d8b] ; nop dword ptr [rax] ; xor eax, eax ; ret
0x00000000000d6074 : inc dword ptr [rdi + rcx - 0x4a] ; add al, 7 ; mov r9, rdi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a7
0x00000000001801df : inc dword ptr [rdx] ; cmp al, 0xeb ; inc esi ; xor eax, 0x3b57ffeb ; jmp 0x1801f7
0x000000000008faba : inc eax ; add rsp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x0000000000193943 : inc eax ; xor esp, edi ; call qword ptr [rax]
0x000000000014090c : inc ebx ; nop ; mov eax, dword ptr [rip + 0x28604a] ; test eax, eax ; je 0x140930 ; xor eax, eax ; ret
0x000000000007684c : inc ebx ; nop ; xor eax, eax ; ret
0x000000000007f106 : inc ebx ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000001800f7 : inc esi ; xor eax, 0x39e1ffeb ; jmp 0x180107
0x000000000018011f : inc esi ; xor eax, 0x39e1ffeb ; jmp 0x18012f
0x00000000001801e3 : inc esi ; xor eax, 0x3b57ffeb ; jmp 0x1801f3
0x0000000000128e09 : inc qword ptr [rcx + rcx*8 - 0x3c0c1d8b] ; nop dword ptr [rax] ; xor eax, eax ; ret
0x000000000008fab9 : inc rax ; add rsp, 0x100 ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x00000000000ac793 : insb byte ptr [rdi], dx ; add rdi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac79d ; xor eax, eax ; ret
0x000000000012cdcd : insb byte ptr [rdi], dx ; and al, 8 ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x0000000000197fdc : insb byte ptr [rdi], dx ; enter 1, 0x24 ; xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x000000000013dd93 : insb byte ptr [rdi], dx ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001b072d : insd dword ptr [rdi], dx ; add dword ptr [rax], eax ; xor byte ptr [rdx - 0xa], ah ; jmp qword ptr [rsi]
0x000000000003b4fd : insd dword ptr [rdi], dx ; out 0xec, al ; fiadd word ptr [rip + 0x48000000] ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x000000000004867f : int1 ; add rsi, 1 ; cmp rsi, rdx ; jne 0x48684 ; xor eax, eax ; ret
0x00000000000a074d : int1 ; je 0xa0770 ; add rdi, 1 ; movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0758 ; xor eax, eax ; ret
0x0000000000116ca3 : int1 ; stc ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000135656 : int1 ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x0000000000135676 : int1 ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x10], 2 ; add rdi, 0x10 ; jmp rcx
0x0000000000138126 : int1 ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x58], 2 ; add rdi, 0x58 ; jmp rcx
0x0000000000137846 : int1 ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x68], 2 ; add rdi, 0x68 ; jmp rcx
0x0000000000048638 : int1 ; xor eax, eax ; pop rbx ; ret
0x00000000000868d6 : int1 ; xor eax, eax ; ret
0x0000000000098c0e : int1 ; xor edi, edi ; mov rax, rdi ; ret
0x000000000012b798 : iretd ; adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000000cd653 : iretd ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002b1d3 : ja 0x2b21e ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002e205 : ja 0x2e260 ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000080a35 : ja 0x80a47 ; xor al, 0 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a4f ; call rax
0x00000000000868d5 : ja 0x868cd ; xor eax, eax ; ret
0x00000000000f7371 : ja 0xf737b ; xor eax, eax ; ret
0x00000000000fcbe3 : ja 0xfcbf8 ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x00000000000fd9b7 : ja 0xfd9ff ; and eax, 0xffffeff0 ; or esi, eax ; xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x00000000000fda23 : ja 0xfda65 ; jne 0xfda12 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x000000000012fe02 : jae 0x12fe35 ; mov rdx, qword ptr [rbx + 0x28] ; add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000013e7a5 : jae 0x13e7b4 ; xor eax, eax ; ret
0x000000000013e7e5 : jae 0x13e7f4 ; xor eax, eax ; ret
0x00000000001821b6 : jae 0x1821d9 ; lodsd eax, dword ptr [rsi] ; xor eax, 0x444be0a8 ; sar byte ptr [rsi + rax*2], 0xf8 ; mov ch, 0x36 ; push rcx ; call qword ptr [rsi]
0x000000000003552e : jae 0x35575 ; xor eax, eax ; pop rbx ; ret
0x0000000000047ff7 : jae 0x48000 ; xor eax, eax ; ret
0x000000000010542a : jb 0x105438 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000011666d : jb 0x116664 ; xor eax, eax ; ret
0x0000000000125ea8 : jb 0x125ecb ; cmp eax, edx ; jne 0x125e8b ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000013dbe9 : jb 0x13dc11 ; cmp eax, 2 ; je 0x13dc71 ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000306ca : jb 0x30701 ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000350f9 : jb 0x35117 ; pxor xmm4, xmm4 ; ucomiss xmm0, xmm4 ; jp 0x35121 ; jne 0x35121 ; addss xmm0, xmm0 ; ret
0x0000000000079104 : jb 0x7913b ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000794d4 : jb 0x794c9 ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000aa2ed : jb 0xa9b99 ; movdqu xmmword ptr [rdi + 0x30], xmm7 ; xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000ceb0d : jb 0xceb16 ; add byte ptr [rbp - 0x27], dh ; xor eax, eax ; ret
0x0000000000139f3a : jbe 0x139f5f ; xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013a390 : jbe 0x13a401 ; add rsp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002b237 : jbe 0x2b282 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000483bb : jbe 0x48431 ; xor eax, eax ; ret
0x000000000007de66 : jbe 0x7de8f ; mov rax, qword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000000a0e4c : jbe 0xa0e2a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001039f3 : je 0x103ab9 ; xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a17 ; ret
0x000000000010501c : je 0x10556b ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aef : je 0x10558b ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104ac8 : je 0x1055ad ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000104d92 : je 0x1055cb ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000105041 : je 0x1055eb ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b14 : je 0x10560b ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bf : je 0x10562b ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b38 : je 0x10564b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104edb : je 0x10566b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db6 : je 0x10568b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c5d : je 0x1056ab ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105408 : je 0x1056cb ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052e3 : je 0x1056eb ; xor esi, esi ; mov rdi, r14 ; call rbx
0x000000000010518a : je 0x10570b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105065 : je 0x10572b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050fe : je 0x10574b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105085 : je 0x10576b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001054a1 : je 0x10578b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105428 : je 0x1057ab ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010537c : je 0x1057cb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105303 : je 0x1057eb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105223 : je 0x10580b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051aa : je 0x10582b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f74 : je 0x10584b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104efb : je 0x10586b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b58 : je 0x10588b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4f : je 0x1058ab ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd6 : je 0x1058cb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bd1 : je 0x1058eb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf6 : je 0x10590b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c7d : je 0x10592b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010e415 : je 0x10e432 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x000000000010fbfc : je 0x10fc24 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001142ea : je 0x11431e ; cmp byte ptr [rcx - 0x75], cl ; jl 0x114323 ; and byte ptr [rcx + 0x2b], cl ; je 0x114328 ; xor cl, ch ; ret
0x00000000001142f4 : je 0x11431e ; xor cl, ch ; ret
0x0000000000114adc : je 0x114b86 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000114ec0 : je 0x114f24 ; xor eax, eax ; pop rbx ; ret
0x0000000000116664 : je 0x116685 ; add rax, 0x48 ; cmp rax, rdx ; jb 0x11666d ; xor eax, eax ; ret
0x00000000001176cb : je 0x1176f4 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000011f8f3 : je 0x11f8dd ; pop rbx ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012d737 : je 0x12d72a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012e70f : je 0x12e813 ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x000000000012fef3 : je 0x12ff04 ; xor eax, eax ; ret
0x0000000000131410 : je 0x13142c ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000136064 : je 0x136074 ; xor eax, eax ; ret
0x000000000013846c : je 0x13849d ; xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000013d141 : je 0x13d180 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000013daa7 : je 0x13db30 ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013dbee : je 0x13dc6c ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013ddab : je 0x13dda4 ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013e864 : je 0x13e897 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x000000000013e98e : je 0x13e9d0 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, r14 ; mov rdi, rbp ; call r12
0x0000000000140918 : je 0x140924 ; xor eax, eax ; ret
0x00000000001462b6 : je 0x1462df ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x1462f7 ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000016ca57 : je 0x16ca61 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000182208 : je 0x1821d3 ; xor al, 0xd8 ; ret
0x00000000001a64cc : je 0x1a64a0 ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x00000000000206fe : je 0x2071f ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003639b : je 0x363bf ; mov eax, 1 ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000363db : je 0x36401 ; mov rax, -2 ; rol rax, cl ; and qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003a934 : je 0x3a97a ; xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a94a ; pop rbx ; ret
0x000000000003aa0e : je 0x3aa7b ; mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x0000000000048494 : je 0x484ab ; mov rdx, qword ptr [r8 + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000004862f : je 0x48646 ; mov rax, qword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000746e5 : je 0x74704 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x0000000000079b97 : je 0x79bc1 ; xor edx, edx ; div rbp ; mov rbx, rax ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007f2b5 : je 0x7f2d4 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x000000000007fa58 : je 0x7f9e0 ; nop ; xor eax, eax ; ret
0x000000000008a858 : je 0x8a873 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000090d0c : je 0x90d63 ; xor byte ptr [rsi + 0xf], ah ; xlatb ; ret
0x000000000009758a : je 0x9759e ; xor byte ptr [rdx + 0xe], 0x2a ; ret
0x0000000000097580 : je 0x975a8 ; xor byte ptr [rdx + 0xd], 0x2a ; cmp rdi, 0xd ; je 0x975a8 ; xor byte ptr [rdx + 0xe], 0x2a ; ret
0x0000000000097f4a : je 0x97fa1 ; xor byte ptr [rsi + 0xf], ah ; xlatb ; ret
0x0000000000098c03 : je 0x98c29 ; add rcx, 1 ; sub rsi, 1 ; jne 0x98c11 ; xor edi, edi ; mov rax, rdi ; ret
0x0000000000098cc3 : je 0x98cfe ; add rax, 1 ; sub rsi, 1 ; jne 0x98cce ; xor eax, eax ; ret
0x00000000000a074e : je 0xa076f ; add rdi, 1 ; movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0757 ; xor eax, eax ; ret
0x00000000000a07a5 : je 0xa07d1 ; add rdi, 1 ; movsx r8d, byte ptr [rdi] ; test r8b, r8b ; jne 0xa07a1 ; xor eax, eax ; ret
0x00000000000a0bd5 : je 0xa0bf6 ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c70 ; xor eax, eax ; ret
0x00000000000aadf2 : je 0xaae04 ; xor eax, eax ; ret
0x00000000000aaded : je 0xaae11 ; cmp eax, 2 ; je 0xaae09 ; xor eax, eax ; ret
0x00000000000ac22d : je 0xac23c ; xor eax, eax ; ret
0x00000000000ac792 : je 0xac80e ; add rdi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac79e ; xor eax, eax ; ret
0x00000000000acfc7 : je 0xad020 ; add esp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c7c30 : je 0xc7c4e ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000c9c24 : je 0xc9c5a ; adc byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ceb08 : je 0xceb1e ; cmp rax, 0x7275 ; jne 0xceaf7 ; xor eax, eax ; ret
0x00000000000db283 : je 0xdb2c7 ; nop dword ptr [rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000dbe01 : je 0xdbe15 ; xor eax, eax ; pop rbx ; ret
0x00000000000dbdfc : je 0xdbe2a ; cmp eax, 3 ; je 0xdbe1a ; xor eax, eax ; pop rbx ; ret
0x00000000000e25dc : je 0xe2824 ; mov ecx, dword ptr [rbp + 4] ; test ecx, ecx ; jle 0xe2671 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2610
0x00000000000e98d8 : je 0xe9914 ; xor eax, eax ; ret
0x00000000000f1025 : je 0xf1003 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8104 : je 0xf8159 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000000fd830 : je 0xfd84a ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x0000000000104ac5 : jg 0x104adf ; add byte ptr [rdi], cl ; test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000104edd : jg 0x104eef ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001166fa : jg 0x11672b ; add byte ptr [rbp - 0x10], dh ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x000000000012ff0d : jg 0x12fef3 ; add byte ptr [rax], al ; test eax, eax ; jne 0x12ff30 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000135652 : jg 0x1356a2 ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013b812 : jg 0x13b862 ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013bf32 : jg 0x13bf8a ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000004808b : jg 0x480f9 ; xor eax, eax ; ret
0x000000000007aff2 : jg 0x7b073 ; xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x7b011 ; ret
0x00000000000a8a75 : jg 0xa8afd ; xor byte ptr [rax - 0x73], cl ; ret
0x00000000000aa086 : jg 0xaa096 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000aa099 : jg 0xaa0ac ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa0ba : jg 0xaa0ce ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa0d9 : jg 0xaa0ec ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa0f9 : jg 0xaa10c ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa11c : jg 0xaa132 ; mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa13a : jg 0xaa14e ; mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa15a : jg 0xaa16e ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa17a : jg 0xaa18e ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa19d : jg 0xaa1b4 ; mov qword ptr [rdi + 0x10], rdx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1be : jg 0xaa1d6 ; mov qword ptr [rdi + 0x10], rdx ; mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000aa1dd : jg 0xaa1f4 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa1fd : jg 0xaa214 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa21b : jg 0xaa230 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa23b : jg 0xaa250 ; movdqu xmmword ptr [rdi + 0xe], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa25b : jg 0xaa270 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa27b : jg 0xaa290 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa29e : jg 0xaa2b6 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa2f6 : jg 0xaa32f ; xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000aa2f5 : jg 0xaa37e ; xor byte ptr [rax], dh ; in eax, dx ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000ce354 : jg 0xce356 ; lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000000d25d1 : jg 0xd25e4 ; add byte ptr [rbp + 0x12], dh ; or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x00000000000fe788 : jg 0xfe7c6 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000fe7f8 : jg 0xfe836 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000008fb1f : jge 0x8fb6d ; xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x00000000000a0bdf : jge 0xa0be7 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000f8e72 : jge 0xf8ec4 ; add esp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x00000000000fe932 : jge 0xfe970 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000106962 : jl 0x106998 ; add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000106afe : jl 0x106b34 ; add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001142ef : jl 0x11431e ; and byte ptr [rcx + 0x2b], cl ; je 0x114323 ; xor cl, ch ; ret
0x0000000000122d40 : jl 0x122d77 ; and byte ptr [rax - 0x73], cl ; xor eax, 0x6ab80 ; call 0x147831
0x0000000000125ea2 : jl 0x125eee ; add cl, byte ptr [rcx + 0x39] ; clc ; jb 0x125ed1 ; cmp eax, edx ; jne 0x125e91 ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000012e092 : jl 0x12e0cd ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000195d1c : jl 0x195d24 ; add byte ptr [rax], al ; xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x000000000002ac37 : jl 0x2ac82 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002ac7c : jl 0x2acc7 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000075ef8 : jl 0x75eb9 ; xor al, 0 ; mov dword ptr fs:[rax], 9 ; mov eax, 0xffffffff ; ret
0x00000000000c4a36 : jl 0xc4a61 ; xor byte ptr [rax + 0x63], cl ; ret 0x894c
0x00000000000f767a : jl 0xf76b0 ; sub al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001360b0 : jle 0x1360ca ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001361a2 : jle 0x1361d7 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013a598 : jle 0x13a5b0 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000e25e7 : jle 0xe2666 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2605
0x00000000000fe882 : jle 0xfe8c0 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000104638 : jne 0x104620 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000001166fd : jne 0x1166fb ; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x0000000000116788 : jne 0x116794 ; xor eax, eax ; ret
0x00000000001167b8 : jne 0x1167c4 ; xor eax, eax ; ret
0x00000000001167e8 : jne 0x1167f4 ; xor eax, eax ; ret
0x0000000000116818 : jne 0x116824 ; xor eax, eax ; ret
0x0000000000116848 : jne 0x116854 ; xor eax, eax ; ret
0x0000000000116878 : jne 0x116884 ; xor eax, eax ; ret
0x00000000001168a8 : jne 0x1168b4 ; xor eax, eax ; ret
0x00000000001168d8 : jne 0x1168e4 ; xor eax, eax ; ret
0x0000000000116908 : jne 0x116914 ; xor eax, eax ; ret
0x0000000000116938 : jne 0x116944 ; xor eax, eax ; ret
0x0000000000116968 : jne 0x116974 ; xor eax, eax ; ret
0x0000000000116998 : jne 0x1169a4 ; xor eax, eax ; ret
0x00000000001169c8 : jne 0x1169d4 ; xor eax, eax ; ret
0x00000000001169f8 : jne 0x116a04 ; xor eax, eax ; ret
0x0000000000116a28 : jne 0x116a34 ; xor eax, eax ; ret
0x0000000000116a58 : jne 0x116a64 ; xor eax, eax ; ret
0x0000000000116a88 : jne 0x116a94 ; xor eax, eax ; ret
0x0000000000116ab8 : jne 0x116ac4 ; xor eax, eax ; ret
0x0000000000116ae8 : jne 0x116af4 ; xor eax, eax ; ret
0x0000000000116b18 : jne 0x116b24 ; xor eax, eax ; ret
0x0000000000116b78 : jne 0x116b84 ; xor eax, eax ; ret
0x0000000000116ba8 : jne 0x116bb4 ; xor eax, eax ; ret
0x0000000000116bd8 : jne 0x116be4 ; xor eax, eax ; ret
0x0000000000116c08 : jne 0x116c14 ; xor eax, eax ; ret
0x0000000000116c38 : jne 0x116c44 ; xor eax, eax ; ret
0x0000000000116c68 : jne 0x116c74 ; xor eax, eax ; ret
0x0000000000116c98 : jne 0x116ca4 ; xor eax, eax ; ret
0x0000000000116cc8 : jne 0x116cd4 ; xor eax, eax ; ret
0x0000000000116cf8 : jne 0x116d04 ; xor eax, eax ; ret
0x0000000000117803 : jne 0x1177fc ; xor eax, eax ; leave ; ret
0x0000000000121a68 : jne 0x121a82 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000125a3a : jne 0x125b48 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000125eac : jne 0x125e87 ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000012e0d3 : jne 0x12e0ea ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2c3 : jne 0x12f2da ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f380 : jne 0x12f34e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f42c : jne 0x12f44a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f489 : jne 0x12f4b0 ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012fd56 : jne 0x12fd72 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd93 : jne 0x12fdaa ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe43 : jne 0x12fe5a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe93 : jne 0x12feaa ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff13 : jne 0x12ff2a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130855 : jne 0x130868 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000013095d : jne 0x1308f7 ; xor eax, eax ; pop rbx ; ret
0x0000000000130dcd : jne 0x130e2c ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131c83 : jne 0x131c9a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a88 : jne 0x132aa2 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b23 : jne 0x132b3a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bbe : jne 0x132bda ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c37 : jne 0x132bf6 ; add byte ptr [rax], al ; test eax, eax ; jne 0x132c60 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132c3d : jne 0x132c5a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000139819 : jne 0x139841 ; mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000139919 : jne 0x139941 ; mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013dd5f : jne 0x13dd5f ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013dd92 : jne 0x13de0e ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013e146 : jne 0x13e1aa ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e216 : jne 0x13e27a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e6 : jne 0x13e34a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a6 : jne 0x13e40a ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000143aac : jne 0x143abd ; xor eax, eax ; pop rbx ; ret
0x0000000000145876 : jne 0x14588a ; mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001462bd : jne 0x1462f0 ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000146385 : jne 0x146398 ; xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000147058 : jne 0x147064 ; xor eax, eax ; ret
0x0000000000147088 : jne 0x147094 ; xor eax, eax ; ret
0x00000000001470b8 : jne 0x1470c4 ; xor eax, eax ; ret
0x00000000001470e8 : jne 0x1470f4 ; xor eax, eax ; ret
0x0000000000147118 : jne 0x147124 ; xor eax, eax ; ret
0x0000000000147148 : jne 0x147154 ; xor eax, eax ; ret
0x000000000016cc9d : jne 0x16ccc7 ; xor eax, eax ; ret
0x000000000016c291 : jne 0x16cccb ; xor eax, eax ; ret
0x000000000016cc90 : jne 0x16ccd4 ; mov rax, qword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd4 ; xor eax, eax ; ret
0x000000000016c2b9 : jne 0x16ccd7 ; xor eax, eax ; ret
0x000000000016dadd : jne 0x16db07 ; xor eax, eax ; ret
0x000000000016d8c1 : jne 0x16db0b ; xor eax, eax ; ret
0x000000000016dad0 : jne 0x16db14 ; mov rax, qword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db14 ; xor eax, eax ; ret
0x000000000016db11 : jne 0x16db1a ; xor eax, eax ; ret
0x000000000016d8e7 : jne 0x16db1e ; xor eax, eax ; ret
0x000000000016db05 : jne 0x16db26 ; shr rcx, 0x20 ; shr rax, 0x20 ; cmp ecx, eax ; jne 0x16db26 ; xor eax, eax ; ret
0x000000000016ed02 : jne 0x16ed25 ; nop ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x00000000001704e4 : jne 0x1706f8 ; xor eax, eax ; ret
0x00000000001706e9 : jne 0x170709 ; xor eax, eax ; ret
0x0000000000170591 : jne 0x17070d ; xor eax, eax ; ret
0x00000000001706e0 : jne 0x170712 ; movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170712 ; xor eax, eax ; ret
0x0000000000170644 : jne 0x170715 ; cmp eax, ecx ; jne 0x170715 ; xor eax, eax ; ret
0x00000000001706dc : jne 0x170716 ; cmp eax, ecx ; jne 0x170716 ; movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170716 ; xor eax, eax ; ret
0x0000000000170d16 : jne 0x170d24 ; xor eax, eax ; ret
0x0000000000170d0e : jne 0x170d2c ; mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d2c ; xor eax, eax ; ret
0x00000000000365a6 : jne 0x365c5 ; mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x000000000003aa09 : jne 0x3aa30 ; test rdi, rdi ; je 0x3aa80 ; mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x000000000003b019 : jne 0x3b014 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000484ef : jne 0x484e4 ; xor eax, eax ; ret
0x0000000000048687 : jne 0x4867c ; xor eax, eax ; ret
0x000000000007693a : jne 0x76915 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000076a02 : jne 0x769e5 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000076afa : jne 0x76ad7 ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000078c9f : jne 0x78cc1 ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x00000000000801d7 : jne 0x80208 ; xor edi, edi ; call qword ptr [r15]
0x00000000000868cc : jne 0x868ee ; add rax, 8 ; cmp rdx, rax ; ja 0x868d6 ; xor eax, eax ; ret
0x000000000008dbd3 : jne 0x8dbde ; xor rax, rax ; ret
0x0000000000090dc9 : jne 0x90e25 ; xor rax, rax ; ret
0x0000000000090d89 : jne 0x90e49 ; xor rax, rax ; ret
0x0000000000098c0d : jne 0x98c07 ; xor edi, edi ; mov rax, rdi ; ret
0x0000000000098ccd : jne 0x98cc4 ; xor eax, eax ; ret
0x00000000000a050b : jne 0xa0500 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0589 : jne 0xa0571 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0759 : jne 0xa074c ; xor eax, eax ; ret
0x00000000000a07b2 : jne 0xa0794 ; xor eax, eax ; ret
0x00000000000a0bdd : jne 0xa0c68 ; xor eax, eax ; ret
0x00000000000a0c1a : jne 0xa0c94 ; xor eax, eax ; ret
0x00000000000a135c : jne 0xa1346 ; xor eax, eax ; sub eax, ecx ; ret
0x00000000000abbae : jne 0xabd28 ; xor eax, eax ; ret
0x00000000000ac229 : jne 0xac240 ; test ecx, ecx ; je 0xac240 ; xor eax, eax ; ret
0x00000000000ac79c : jne 0xac794 ; xor eax, eax ; ret
0x00000000000acfc6 : jne 0xad04c ; add rsp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000c7f4f : jne 0xc7f1e ; nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000ceb10 : jne 0xceaef ; xor eax, eax ; ret
0x00000000000ceb0c : jne 0xceb88 ; add byte ptr [rax], al ; jne 0xceaf3 ; xor eax, eax ; ret
0x00000000000d25d4 : jne 0xd25f5 ; or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x00000000000d80da : jne 0xd80a7 ; xor eax, eax ; cmp byte ptr [rdi + 0x65], 0 ; setne al ; add eax, eax ; ret
0x00000000000d81f2 : jne 0xd81f1 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8192 ; ret
0x00000000000d8eca : jne 0xd8eb8 ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000db19e : jne 0xdb16a ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000dfc59 : jne 0xdfc3e ; mov dword ptr [rbx + 0x2c], eax ; mov dword ptr [rbx + 0x30], eax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f8e71 : jne 0xf8ef9 ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; ret
0x00000000000fda25 : jne 0xfda10 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x00000000000ff6b2 : jne 0xff690 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff883 : jne 0xff860 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000116a93 : jno 0x116aa1 ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000012c3ae : jno 0x12c409 ; lea esp, dword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000016c54e : jno 0x16c55d ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000bbb03 : jno 0xbbb69 ; xor byte ptr [rax], al ; xor ebx, ebx ; mov dword ptr fs:[rax], 0x4b ; mov rax, rbx ; pop rbx ; ret
0x00000000000bfd03 : jno 0xbfd26 ; xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x16 ; mov eax, 0xffffffff ; ret
0x0000000000116823 : jns 0x116833 ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000010518c : jo 0x10519c ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051ac : jo 0x1051bd ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000193940 : jo 0x193979 ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x000000000003a237 : jo 0x3a268 ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x000000000007457a : jo 0x745c8 ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x000000000007f1d4 : jo 0x7f226 ; xor al, 0 ; add dword ptr [rip + 0x344565], 1 ; ret
0x00000000000f16be : jo 0xf16d2 ; xor eax, eax ; mov qword ptr [r8], rsi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f7286 : jo 0xf72de ; mov eax, dword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7e03 : jo 0xf7e5b ; mov eax, dword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000001167b2 : jp 0x1167bd ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x1167ca ; xor eax, eax ; ret
0x0000000000116ab2 : jp 0x116aba ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116aca ; xor eax, eax ; ret
0x0000000000060ed3 : jp 0x60eea ; mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0fb
0x00000000000fe931 : jrcxz 0xfe9c1 ; sub al, 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000116662 : js 0x11667b ; je 0x116687 ; add rax, 0x48 ; cmp rax, rdx ; jb 0x11666f ; xor eax, eax ; ret
0x0000000000124b09 : js 0x124b41 ; mov eax, dword ptr [rsp + 8] ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000129861 : js 0x129893 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000002b02b : js 0x2b076 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002b053 : js 0x2b09e ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003a25f : js 0x3a290 ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x000000000003a303 : js 0x3a31e ; mov qword ptr [rax], 2 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003a4e4 : js 0x3a4fd ; mov qword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003a538 : js 0x3a551 ; mov qword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000790fe : js 0x79141 ; cmp qword ptr [rdi + 0x10], rax ; jb 0x79141 ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000794ce : js 0x794cf ; cmp qword ptr [rdi + 0x10], rax ; jb 0x794cf ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000795d4 : js 0x7961a ; add byte ptr [rdi + rax*8], ah ; sbb al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd23c : js 0xcd25d ; mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f71bb : lahf ; rcr byte ptr [rbx - 0x3d], 0x90 ; xor eax, eax ; pop rbx ; ret
0x0000000000131c7d : lahf ; rol dword ptr [rax], 0 ; test eax, eax ; jne 0x131ca0 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000019867b : lcall ptr [rsp + rsi*8] ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000048491 : lea eax, dword ptr [rbx + rdx] ; je 0x484ae ; mov rdx, qword ptr [r8 + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x0000000000050e68 : lea eax, dword ptr [rdi - 1] ; xor edx, edx ; div ecx ; add r8d, eax ; mov eax, r8d ; ret
0x00000000000a5c41 : lea eax, dword ptr [rdx + 0xe] ; cmp byte ptr [rax], 1 ; sbb rax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x00000000000a5a06 : lea eax, dword ptr [rdx + 7] ; cmp byte ptr [rax], 1 ; sbb rax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x000000000003ae6b : lea eax, dword ptr [rdx + rax*4] ; mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x000000000003d177 : lea eax, dword ptr [rdx + rdx*4] ; mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1ca
0x00000000000403c2 : lea eax, dword ptr [rdx + rdx*4] ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40413
0x000000000002986b : lea eax, dword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000012cdcc : lea ebp, dword ptr [rsp + 8] ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x0000000000076b80 : lea ecx, dword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000dff26 : lea edi, dword ptr [rax + rsi*4] ; shl rdx, 2 ; xor esi, esi ; call 0x9181d
0x00000000000fe787 : lea edi, dword ptr [rdi + 0x2c] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000007457d : lea edx, dword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x00000000000dff22 : lea edx, dword ptr [rdx + rdx*4] ; lea rdi, qword ptr [rax + rsi*4] ; shl rdx, 2 ; xor esi, esi ; call 0x91821
0x000000000004862c : lea esi, dword ptr [rbx + rdx] ; je 0x48649 ; mov rax, qword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x00000000001142a0 : lea esi, dword ptr [rip + 0x7910c] ; mov rdx, rax ; mov rdi, r14 ; xor eax, eax ; call 0x1105b0
0x00000000000ca1bb : lea esi, dword ptr [rip + 0xc1f5f] ; mov rdi, r12 ; cmove rcx, rax ; xor eax, eax ; call 0x56491
0x00000000000ce357 : lea esp, dword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000002b499 : lea esp, dword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000079527 : lea esp, dword ptr [rdx + rdi*8 - 1] ; xor eax, eax ; pop rbx ; ret
0x000000000012cdcb : lea r13, qword ptr [rsp + 8] ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x000000000002986a : lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x0000000000076b7f : lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000003ae6a : lea rax, qword ptr [r10 + r8*4] ; mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x0000000000048490 : lea rax, qword ptr [rbx + r10] ; je 0x484af ; mov rdx, qword ptr [r8 + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000003d176 : lea rax, qword ptr [rdx + rdx*4] ; mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1cb
0x00000000000403c1 : lea rax, qword ptr [rdx + rdx*4] ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40414
0x00000000000dff25 : lea rdi, qword ptr [rax + rsi*4] ; shl rdx, 2 ; xor esi, esi ; call 0x9181e
0x000000000007457c : lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x000000000004862b : lea rsi, qword ptr [rbx + r10] ; je 0x4864a ; mov rax, qword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x000000000011429f : lea rsi, qword ptr [rip + 0x7910c] ; mov rdx, rax ; mov rdi, r14 ; xor eax, eax ; call 0x1105b1
0x00000000000ce356 : lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000002b498 : lea rsp, qword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000007693b : leave ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ac22c : leave ; je 0xac23d ; xor eax, eax ; ret
0x00000000000e25e6 : leave ; jle 0xe2667 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2606
0x00000000000365a5 : leave ; jne 0x365c6 ; mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000a0758 : leave ; jne 0xa074d ; xor eax, eax ; ret
0x000000000002145f : leave ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x000000000003b445 : leave ; or eax, ecx ; cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000116cd3 : leave ; stc ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001167c3 : leave ; std ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000cddab : leave ; xor byte ptr [rdi], ch ; add byte ptr [rdi + rax*8], ah ; add al, byte ptr [rax] ; add byte ptr [rax], al ; mov eax, 0xffffffff ; ret
0x00000000000843e5 : leave ; xor eax, dword ptr [rax] ; xor edi, edi ; call qword ptr [rax]
0x00000000000ad10f : leave ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000195ecc : lodsb al, byte ptr [rsi] ; add dword ptr [rcx], eax ; add byte ptr [rax*8 + 0x1c4ffef], dh ; add dword ptr [rax], eax ; xor al, 0xc6 ; out dx, eax ; jmp rsp
0x000000000000318e : lodsb al, byte ptr [rsi] ; xor bh, byte ptr [rsi - 0xd] ; add ebp, esi ; mov eax, 0xa1a3e95a ; ret 0xba88
0x000000000000318a : lodsb al, byte ptr [rsi] ; xor dh, bh ; xor byte ptr [rdx + rsi - 0x11fc0c82], ch ; mov eax, 0xa1a3e95a ; ret 0xba88
0x0000000000132c38 : lodsd eax, dword ptr [rsi] ; add byte ptr [rax], al ; test eax, eax ; jne 0x132c5f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001821b8 : lodsd eax, dword ptr [rsi] ; xor eax, 0x444be0a8 ; sar byte ptr [rsi + rax*2], 0xf8 ; mov ch, 0x36 ; push rcx ; call qword ptr [rsi]
0x000000000002d71a : loop 0x2d77e ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003628d : loop 0x362e2 ; shr eax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x0000000000078c9a : loop 0x78cb1 ; or byte ptr [rax], al ; add byte ptr [rbp + 0x14], dh ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x00000000000dff2b : loop 0xdff37 ; xor esi, esi ; call 0x91818
0x0000000000116b83 : loope 0x116b90 ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001307ad : loope 0x130820 ; nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013a403 : loope 0x13a455 ; mov edi, ebp ; xor eax, eax ; call 0x56658
0x000000000012f2be : loopne 0x12f2cf ; add byte ptr [rbp + 0x480b75c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001327ec : loopne 0x132828 ; xor esi, dword ptr [rbx] ; xor ecx, dword ptr [rbp + 0x31] ; ret 0xc149
0x0000000000193980 : loopne 0x1939c1 ; cld ; push qword ptr [rax] ; xor bh, ah ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x00000000000362ad : loopne 0x36305 ; shr edx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x00000000000363a4 : loopne 0x363f4 ; or dword ptr [rdi], eax ; xor eax, eax ; ret
0x000000000003b229 : loopne 0x3b246 ; mov ecx, edx ; mov dword ptr [rdi], edx ; shr ecx, 0x10 ; and ecx, 0x3ff ; xor eax, ecx ; ret
0x000000000006f081 : loopne 0x6f0f2 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000843e4 : loopne 0x843b5 ; xor eax, dword ptr [rax] ; xor edi, edi ; call qword ptr [rax]
0x0000000000199704 : mov ah, 0x13 ; add dword ptr [rax], eax ; xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x00000000001ab80c : mov ah, 0x1e ; add dword ptr [rax], eax ; xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x000000000013ab5a : mov ah, 0x28 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000753c0 : mov ah, 0xba ; xor al, 0 ; mov dword ptr fs:[rax], 9 ; mov eax, 0xffffffff ; ret
0x00000000000f4474 : mov al, 0 ; add byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001307ec : mov al, 0x23 ; add byte ptr [rax], al ; xor eax, eax ; jmp rcx
0x00000000001307a4 : mov al, 0x23 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000012aa42 : mov al, 0x29 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x00000000000dff28 : mov al, 0x48 ; shl edx, 2 ; xor esi, esi ; call 0x9181b
0x00000000000ff87c : mov al, 3 ; add byte ptr [rax], al ; test rax, rax ; jne 0xff867 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000085764 : mov bh, 0x33 ; add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000007c356 : mov bh, 0x66 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x000000000003b444 : mov bh, 0xc9 ; or eax, ecx ; cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f7331 : mov bh, 7 ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x0000000000116ba2 : mov bh, bl ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116bba ; xor eax, eax ; ret
0x00000000001168a2 : mov bh, dh ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x1168ba ; xor eax, eax ; ret
0x000000000017064e : mov bl, 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000a0474 : mov bl, 0x48 ; mov ecx, eax ; xor eax, eax ; mov qword ptr [rdx], rcx ; ret
0x00000000000a0e49 : mov byte ptr [rax], 0 ; jbe 0xa0e2d ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013a595 : mov byte ptr [rax], 0 ; jle 0x13a5b3 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000e98d3 : mov byte ptr [rbp + 0x7400002d], ah ; xor eax, eax ; ret
0x00000000000daeea : mov byte ptr [rbx + 8], al ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000048682 : mov byte ptr [rcx], 0x48 ; cmp esi, edx ; jne 0x48681 ; xor eax, eax ; ret
0x00000000000aa09b : mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa121 : mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa1a3 : mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa2a5 : mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000a9f29 : mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f57 : mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000d6920 : mov byte ptr [rdi + 8], 2 ; xor eax, eax ; ret
0x00000000000a9fa9 : mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9f02 : mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x0000000000126a49 : mov byte ptr [rsi + 3], al ; xor eax, eax ; ret
0x0000000000126a48 : mov byte ptr [rsi + 3], r8b ; xor eax, eax ; ret
0x000000000012ed62 : mov ch, 0x48 ; lea esp, dword ptr [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000086817 : mov ch, 0xa7 ; xor eax, dword ptr [rax] ; mov qword ptr [rax], rsi ; mov rax, qword ptr [rip + 0x33a6bb] ; mov qword ptr [rax], rdi ; ret
0x000000000016c616 : mov ch, 6 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000105067 : mov ch, 6 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000030172 : mov ch, byte ptr [rcx] ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001039f5 : mov cl, 0 ; add byte ptr [rax], al ; xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a15 ; ret
0x0000000000090d8b : mov cl, 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x0000000000132a83 : mov cl, 0 ; add byte ptr [rbp + 0x480e75c0], al ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000857c0 : mov cl, 0x35 ; cmp al, bl ; xor eax, dword ptr [rax] ; jne 0x857e1 ; jmp 0x857fb
0x000000000008aa43 : mov cl, 0x8d ; xor eax, dword ptr [rax] ; mov dword ptr [rip + 0x338d9b], 1 ; mov eax, ebx ; pop rbx ; ret
0x000000000008a92f : mov cl, 0x8e ; xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000116913 : mov cl, 0xfc ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000aa094 : mov cl, byte ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa0b4 : mov cx, word ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000a9f20 : mov cx, word ptr [rsi] ; mov dl, byte ptr [rsi + 2] ; mov word ptr [rdi], cx ; mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a0507 : mov dh, 0x11 ; test dl, dl ; jne 0xa0504 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0585 : mov dh, 0x11 ; test dl, dl ; jne 0xa0575 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x0000000000021461 : mov dh, 0xc0 ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000aadaf : mov dh, 0xca ; xor edx, edx ; pop rbx ; and eax, 0x7ff80000 ; div ecx ; mov eax, eax ; ret
0x0000000000108ec5 : mov dh, 0xff ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x00000000000d80bc : mov dh, 4 ; xor byte ptr [rax - 0x77], cl ; ret 0xc148
0x000000000010540a : mov dl, 2 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000000a9f23 : mov dl, byte ptr [rsi + 2] ; mov word ptr [rdi], cx ; mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f52 : mov dl, byte ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000a9fa3 : mov dl, byte ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9f00 : mov dl, byte ptr [rsi] ; mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000e0a89 : mov dword ptr [r12 + 4], r14d ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001174a0 : mov dword ptr [r8], edx ; xor eax, eax ; ret
0x00000000000fdc91 : mov dword ptr [r8], r12d ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000074575 : mov dword ptr [rax + 0x10], edx ; mov qword ptr [rax + 0x40], rsi ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x0000000000074209 : mov dword ptr [rax + 0x18], edx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x0000000000074205 : mov dword ptr [rax + 0x28], edx ; mov qword ptr [rax + 0x18], rdx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x0000000000074579 : mov dword ptr [rax + 0x40], esi ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x00000000000f7043 : mov dword ptr [rax + 8], ebp ; mov dword ptr [rbx + 4], edx ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000003a4e3 : mov dword ptr [rax + 8], edi ; mov qword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c9000 : mov dword ptr [rax], 0x14 ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000006f18a : mov dword ptr [rax], 0x16 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bbc18 : mov dword ptr [rax], 0x16 ; xor eax, eax ; ret
0x00000000000795d8 : mov dword ptr [rax], 0x1c ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bbbf8 : mov dword ptr [rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000bb97f : mov dword ptr [rax], 0x4b ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x0000000000110588 : mov dword ptr [rax], 0xc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000089e0d : mov dword ptr [rax], 0xc ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008bb26 : mov dword ptr [rax], 0xc ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085768 : mov dword ptr [rax], 0xc ; xor eax, eax ; ret
0x00000000000fe494 : mov dword ptr [rax], 0xffffffff ; xor eax, eax ; ret
0x000000000003a306 : mov dword ptr [rax], 2 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000107748 : mov dword ptr [rax], 2 ; xor eax, eax ; ret
0x000000000003a4e7 : mov dword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012472e : mov dword ptr [rax], 6 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000074202 : mov dword ptr [rax], edx ; mov qword ptr [rax + 0x28], rdx ; mov qword ptr [rax + 0x18], rdx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x00000000000fe46c : mov dword ptr [rax], edx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4aa ; ret
0x0000000000074581 : mov dword ptr [rax], edx ; xor eax, eax ; ret
0x000000000008a9db : mov dword ptr [rax], esi ; xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x00000000000fdc92 : mov dword ptr [rax], esp ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fe329 : mov dword ptr [rbp + 0x24], eax ; xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x000000000007ef1e : mov dword ptr [rbp + 8], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f6f49 : mov dword ptr [rbp + 8], eax ; mov dword ptr [rbp], ebx ; xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007eeed : mov dword ptr [rbp + 8], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b144 : mov dword ptr [rbp], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003b4aa : mov dword ptr [rbp], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000f6f4c : mov dword ptr [rbp], ebx ; xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000089ac7 : mov dword ptr [rbp], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010fbf9 : mov dword ptr [rbp], esp ; je 0x10fc27 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000003a7fd : mov dword ptr [rbx + 0x10], eax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007a689 : mov dword ptr [rbx + 0x10], eax ; xor eax, eax ; pop rbx ; ret
0x00000000001176c8 : mov dword ptr [rbx + 0x10], edx ; je 0x1176f7 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000007d2cf : mov dword ptr [rbx + 0x20], eax ; mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000dfc5b : mov dword ptr [rbx + 0x2c], eax ; mov dword ptr [rbx + 0x30], eax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007d2cb : mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx + 0x20], rax ; mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000dfc5e : mov dword ptr [rbx + 0x30], eax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003552d : mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x000000000007a67e : mov dword ptr [rbx + 0x90], esi ; mov qword ptr [rbx + 8], rax ; mov qword ptr [rbx + 0x10], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000bfdf2 : mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000124b0f : mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000f7046 : mov dword ptr [rbx + 4], edx ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007a685 : mov dword ptr [rbx + 8], eax ; mov qword ptr [rbx + 0x10], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000360c8 : mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x00000000000ac796 : mov dword ptr [rbx + rcx*4], 0x75c08507 ; xor eax, eax ; ret
0x0000000000139e56 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000139821 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a5 : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003b44b : mov dword ptr [rbx], eax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012caa4 : mov dword ptr [rbx], eax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000cd23f : mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000145879 : mov dword ptr [rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000007420c : mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x000000000007d2d2 : mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000008040b : mov dword ptr [rbx], esi ; xor al, 0 ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000048636 : mov dword ptr [rcx + rsi*8], eax ; xor eax, eax ; pop rbx ; ret
0x000000000004867d : mov dword ptr [rcx + rsi*8], edi ; add rsi, 1 ; cmp rsi, rdx ; jne 0x48686 ; xor eax, eax ; ret
0x00000000000a07a9 : mov dword ptr [rcx], 0x7be0f44 ; test r8b, r8b ; jne 0xa079d ; xor eax, eax ; ret
0x00000000000a0752 : mov dword ptr [rcx], 0x840fbe0f ; leave ; jne 0xa0753 ; xor eax, eax ; ret
0x0000000000076f00 : mov dword ptr [rcx], eax ; xor eax, eax ; pop rbx ; ret
0x00000000000c04bb : mov dword ptr [rcx], ecx ; xor byte ptr [rax], al ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000f7f22 : mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x00000000000aa11e : mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa0bd : mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa0fb : mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa17d : mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa1a0 : mov dword ptr [rdi + 0x10], edx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1e0 : mov dword ptr [rdi + 0x10], edx ; mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa200 : mov dword ptr [rdi + 0x10], edx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa1c1 : mov dword ptr [rdi + 0x10], edx ; mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000f7f10 : mov dword ptr [rdi + 0x10c], esi ; xor eax, eax ; ret
0x00000000000aa1e3 : mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x0000000000079107 : mov dword ptr [rdi + 0x18], eax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000aa1c5 : mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000aa203 : mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000fda22 : mov dword ptr [rdi + 0x34], esi ; jne 0xfda13 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x00000000000fd9b6 : mov dword ptr [rdi + 0x38], esi ; and eax, 0xffffeff0 ; or esi, eax ; xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x00000000000aa13d : mov dword ptr [rdi + 0xe], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa0db : mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa15d : mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000a9f87 : mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x000000000003b5dd : mov dword ptr [rdi + 4], eax ; xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x00000000000a9f69 : mov dword ptr [rdi + 4], edx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000f7370 : mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x00000000000aa02b : mov dword ptr [rdi + 5], edx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa04b : mov dword ptr [rdi + 6], edx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000a9fe9 : mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa06b : mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x0000000000125926 : mov dword ptr [rdi + 8], 0x29 ; xor eax, eax ; mov dword ptr [rdi + 0xc], edx ; mov qword ptr [rsi], rdi ; ret
0x00000000000368a1 : mov dword ptr [rdi + 8], eax ; mov rax, qword ptr [rsi] ; and rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000036b91 : mov dword ptr [rdi + 8], eax ; mov rax, qword ptr [rsi] ; or rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003af04 : mov dword ptr [rdi + 8], edx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000a9fcb : mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000aa009 : mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x00000000000367c2 : mov dword ptr [rdi + rax*8], ecx ; xor eax, eax ; pop rbx ; ret
0x000000000003aa10 : mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x000000000003aeec : mov dword ptr [rdi], eax ; cmovbe rdx, r8 ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x0000000000036363 : mov dword ptr [rdi], eax ; xor eax, eax ; ret
0x00000000000a9f27 : mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f55 : mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000a9fa7 : mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9f85 : mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9fe7 : mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa007 : mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x00000000000aa028 : mov dword ptr [rdi], ecx ; mov qword ptr [rdi + 5], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa048 : mov dword ptr [rdi], ecx ; mov qword ptr [rdi + 6], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000aa068 : mov dword ptr [rdi], ecx ; mov qword ptr [rdi + 7], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000a9f66 : mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000a9fc8 : mov dword ptr [rdi], ecx ; mov word ptr [rdi + 8], dx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x000000000003b22d : mov dword ptr [rdi], edx ; shr ecx, 0x10 ; and ecx, 0x3ff ; xor eax, ecx ; ret
0x00000000000a9f14 : mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000a9f42 : mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x00000000000a9f94 : mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 8], ch ; ret
0x00000000000f7351 : mov dword ptr [rdi], esi ; xor eax, eax ; ret
0x0000000000060ed2 : mov dword ptr [rdx + 8], edi ; mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0fc
0x0000000000124362 : mov dword ptr [rdx], 0x26 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000103347 : mov dword ptr [rdx], eax ; add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000077b7f : mov dword ptr [rdx], eax ; xor eax, eax ; pop rbx ; ret
0x00000000000c04bf : mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x000000000008a92d : mov dword ptr [rip + 0x338eb1], 1 ; xor eax, eax ; ret
0x000000000008691a : mov dword ptr [rip + 0x33ceb8], esi ; xor eax, eax ; ret
0x0000000000086913 : mov dword ptr [rip + 0x33cec7], eax ; mov qword ptr [rip + 0x33ceb8], rsi ; xor eax, eax ; ret
0x000000000003b547 : mov dword ptr [rsi + 0x10], eax ; mov eax, 0xb ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b506 : mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x000000000003ae6f : mov dword ptr [rsi + 0x10], edx ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x000000000003ae73 : mov dword ptr [rsi + 0x28], eax ; xor eax, eax ; ret
0x00000000000dae82 : mov dword ptr [rsi + 0x38], eax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fd82b : mov dword ptr [rsi + 0x50], eax ; test al, 0x20 ; je 0xfd84f ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x00000000000fcbe6 : mov dword ptr [rsi + 0x66], edx ; xor eax, eax ; ret
0x00000000000f7e01 : mov dword ptr [rsi + 0x70], edx ; mov rax, qword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7284 : mov dword ptr [rsi + 0x70], edx ; mov rax, qword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f728f : mov dword ptr [rsi + 0x78], eax ; xor eax, eax ; ret
0x000000000003b58e : mov dword ptr [rsi + 0xc], eax ; mov eax, 1 ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x000000000003b550 : mov dword ptr [rsi + 0xc], eax ; xor eax, eax ; ret
0x000000000003b597 : mov dword ptr [rsi + 0xe], eax ; xor eax, eax ; ret
0x000000000012feea : mov dword ptr [rsi + 8], 0 ; test eax, eax ; je 0x12ff0d ; xor eax, eax ; ret
0x0000000000074e18 : mov dword ptr [rsi + 8], eax ; mov qword ptr [rsi], rax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000484e5 : mov dword ptr [rsi + rax*8], ecx ; add rax, 1 ; cmp rax, rdx ; jne 0x484ee ; xor eax, eax ; ret
0x000000000004849b : mov dword ptr [rsi + rax*8], edx ; xor eax, eax ; pop rbx ; ret
0x0000000000126a44 : mov dword ptr [rsi + rbx + 0x10], edx ; mov byte ptr [rsi + 3], r8b ; xor eax, eax ; ret
0x0000000000126a3f : mov dword ptr [rsi + rbx + 8], eax ; mov qword ptr [rsi + r11 + 0x10], rdx ; mov byte ptr [rsi + 3], r8b ; xor eax, eax ; ret
0x000000000003ae68 : mov dword ptr [rsi], eax ; lea rax, qword ptr [r10 + r8*4] ; mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x0000000000074e1c : mov dword ptr [rsi], eax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007910b : mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x0000000000125eaf : mov dword ptr [rsi], ecx ; xor eax, eax ; ret
0x000000000011b1c1 : mov dword ptr [rsi], edi ; xor eax, eax ; ret
0x00000000000c9c23 : mov dword ptr [rsp + 0x10], esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000e0a8a : mov dword ptr [rsp + 4], esi ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000084271 : mov dword ptr [rsp + 8], eax ; xor edi, edi ; call qword ptr [rax]
0x00000000000f1022 : mov dword ptr [rsp], eax ; je 0xf1006 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011b0f1 : mov dword ptr [rsp], ebp ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010e412 : mov dword ptr [rsp], ebp ; je 0x10e435 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x00000000000983f3 : mov dword ptr [rsp], ebp ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000fdc90 : mov dword ptr fs:[r8], r12d ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006f189 : mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bbc17 : mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000795d7 : mov dword ptr fs:[rax], 0x1c ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bbbf7 : mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000bb97e : mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x0000000000110587 : mov dword ptr fs:[rax], 0xc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000089e0c : mov dword ptr fs:[rax], 0xc ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008bb25 : mov dword ptr fs:[rax], 0xc ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000085767 : mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x0000000000107747 : mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x000000000012472d : mov dword ptr fs:[rax], 6 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000cd23e : mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000145878 : mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000124361 : mov dword ptr fs:[rdx], 0x26 ; add rsp, 0x30 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000a9f62 : mov dx, word ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000a9fc3 : mov dx, word ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov word ptr [rdi + 8], dx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000a9f10 : mov dx, word ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x000000000003b54a : mov eax, 0xb ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b4fc : mov eax, 0xdeece66d ; add eax, 0x48000000 ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x0000000000047fea : mov eax, 0xe ; syscall ; cmp rax, -0xfff ; jae 0x4800d ; xor eax, eax ; ret
0x00000000000363de : mov eax, 0xfffffffe ; rol rax, cl ; and qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003b591 : mov eax, 1 ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x000000000003639d : mov eax, 1 ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000d820c : mov eax, dword ptr [rax + rax*8] ; xor eax, eax ; bt r8, rcx ; jb 0xd8199 ; ret
0x0000000000048632 : mov eax, dword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000801d2 : mov eax, dword ptr [rax] ; test rax, rax ; jne 0x8020d ; xor edi, edi ; call qword ptr [r15]
0x000000000003a27d : mov eax, dword ptr [rbp + rax + 0x18] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000007de69 : mov eax, dword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000000f7e05 : mov eax, dword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7e30 : mov eax, dword ptr [rdi + 0x108] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f7e20 : mov eax, dword ptr [rdi + 0x10c] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x0000000000048082 : mov eax, dword ptr [rdi + 0x28] ; mov r9, qword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000f7288 : mov eax, dword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7360 : mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x0000000000170d10 : mov eax, dword ptr [rdi - 4] ; cmp eax, dword ptr [rsi - 4] ; jne 0x170d2a ; xor eax, eax ; ret
0x000000000016c2b4 : mov eax, dword ptr [rdi - 4] ; cmp ecx, eax ; jne 0x16ccdc ; xor eax, eax ; ret
0x00000000001704dc : mov eax, dword ptr [rdi - 4] ; mov ecx, dword ptr [rsi - 4] ; cmp eax, ecx ; jne 0x170700 ; xor eax, eax ; ret
0x000000000016c513 : mov eax, dword ptr [rdi - 4] ; mov ecx, dword ptr [rsi - 4] ; cmp ecx, eax ; jne 0x16ccdf ; xor eax, eax ; ret
0x000000000016c811 : mov eax, dword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16ccd1 ; xor eax, eax ; ret
0x000000000016d9e1 : mov eax, dword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16db11 ; xor eax, eax ; ret
0x000000000016cc93 : mov eax, dword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd1 ; xor eax, eax ; ret
0x000000000016dad3 : mov eax, dword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db11 ; xor eax, eax ; ret
0x000000000012fee8 : mov eax, dword ptr [rdi] ; mov dword ptr [rsi + 8], 0 ; test eax, eax ; je 0x12ff0f ; xor eax, eax ; ret
0x00000000000ac798 : mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac798 ; xor eax, eax ; ret
0x00000000000aade7 : mov eax, dword ptr [rdx + 0x70] ; cmp eax, 1 ; je 0xaae17 ; cmp eax, 2 ; je 0xaae0f ; xor eax, eax ; ret
0x0000000000146aa1 : mov eax, dword ptr [rip + 0x27a3d1] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000147140 : mov eax, dword ptr [rip + 0x27f5ea] ; test eax, eax ; jne 0x14715c ; xor eax, eax ; ret
0x0000000000147110 : mov eax, dword ptr [rip + 0x27f61a] ; test eax, eax ; jne 0x14712c ; xor eax, eax ; ret
0x00000000001470e0 : mov eax, dword ptr [rip + 0x27f64a] ; test eax, eax ; jne 0x1470fc ; xor eax, eax ; ret
0x00000000001470b0 : mov eax, dword ptr [rip + 0x27f67a] ; test eax, eax ; jne 0x1470cc ; xor eax, eax ; ret
0x0000000000147080 : mov eax, dword ptr [rip + 0x27f6aa] ; test eax, eax ; jne 0x14709c ; xor eax, eax ; ret
0x0000000000147050 : mov eax, dword ptr [rip + 0x27f6da] ; test eax, eax ; jne 0x14706c ; xor eax, eax ; ret
0x0000000000140910 : mov eax, dword ptr [rip + 0x28604a] ; test eax, eax ; je 0x14092c ; xor eax, eax ; ret
0x0000000000116cf0 : mov eax, dword ptr [rip + 0x2afa3a] ; test eax, eax ; jne 0x116d0c ; xor eax, eax ; ret
0x0000000000116cc0 : mov eax, dword ptr [rip + 0x2afa6a] ; test eax, eax ; jne 0x116cdc ; xor eax, eax ; ret
0x0000000000116c90 : mov eax, dword ptr [rip + 0x2afa9a] ; test eax, eax ; jne 0x116cac ; xor eax, eax ; ret
0x0000000000116c60 : mov eax, dword ptr [rip + 0x2afaca] ; test eax, eax ; jne 0x116c7c ; xor eax, eax ; ret
0x0000000000116c30 : mov eax, dword ptr [rip + 0x2afafa] ; test eax, eax ; jne 0x116c4c ; xor eax, eax ; ret
0x0000000000116c00 : mov eax, dword ptr [rip + 0x2afb2a] ; test eax, eax ; jne 0x116c1c ; xor eax, eax ; ret
0x0000000000116bd0 : mov eax, dword ptr [rip + 0x2afb5a] ; test eax, eax ; jne 0x116bec ; xor eax, eax ; ret
0x0000000000116ba0 : mov eax, dword ptr [rip + 0x2afb8a] ; test eax, eax ; jne 0x116bbc ; xor eax, eax ; ret
0x0000000000116b70 : mov eax, dword ptr [rip + 0x2afbba] ; test eax, eax ; jne 0x116b8c ; xor eax, eax ; ret
0x0000000000116b10 : mov eax, dword ptr [rip + 0x2afc1a] ; test eax, eax ; jne 0x116b2c ; xor eax, eax ; ret
0x0000000000116ae0 : mov eax, dword ptr [rip + 0x2afc4a] ; test eax, eax ; jne 0x116afc ; xor eax, eax ; ret
0x0000000000116ab0 : mov eax, dword ptr [rip + 0x2afc7a] ; test eax, eax ; jne 0x116acc ; xor eax, eax ; ret
0x0000000000116a80 : mov eax, dword ptr [rip + 0x2afcaa] ; test eax, eax ; jne 0x116a9c ; xor eax, eax ; ret
0x0000000000116a50 : mov eax, dword ptr [rip + 0x2afcda] ; test eax, eax ; jne 0x116a6c ; xor eax, eax ; ret
0x0000000000116a20 : mov eax, dword ptr [rip + 0x2afd0a] ; test eax, eax ; jne 0x116a3c ; xor eax, eax ; ret
0x00000000001169f0 : mov eax, dword ptr [rip + 0x2afd3a] ; test eax, eax ; jne 0x116a0c ; xor eax, eax ; ret
0x00000000001169c0 : mov eax, dword ptr [rip + 0x2afd6a] ; test eax, eax ; jne 0x1169dc ; xor eax, eax ; ret
0x0000000000116990 : mov eax, dword ptr [rip + 0x2afd9a] ; test eax, eax ; jne 0x1169ac ; xor eax, eax ; ret
0x0000000000116960 : mov eax, dword ptr [rip + 0x2afdca] ; test eax, eax ; jne 0x11697c ; xor eax, eax ; ret
0x0000000000116930 : mov eax, dword ptr [rip + 0x2afdfa] ; test eax, eax ; jne 0x11694c ; xor eax, eax ; ret
0x0000000000116900 : mov eax, dword ptr [rip + 0x2afe2a] ; test eax, eax ; jne 0x11691c ; xor eax, eax ; ret
0x00000000001168d0 : mov eax, dword ptr [rip + 0x2afe5a] ; test eax, eax ; jne 0x1168ec ; xor eax, eax ; ret
0x00000000001168a0 : mov eax, dword ptr [rip + 0x2afe8a] ; test eax, eax ; jne 0x1168bc ; xor eax, eax ; ret
0x0000000000116870 : mov eax, dword ptr [rip + 0x2afeba] ; test eax, eax ; jne 0x11688c ; xor eax, eax ; ret
0x0000000000116840 : mov eax, dword ptr [rip + 0x2afeea] ; test eax, eax ; jne 0x11685c ; xor eax, eax ; ret
0x0000000000116810 : mov eax, dword ptr [rip + 0x2aff1a] ; test eax, eax ; jne 0x11682c ; xor eax, eax ; ret
0x00000000001167e0 : mov eax, dword ptr [rip + 0x2aff4a] ; test eax, eax ; jne 0x1167fc ; xor eax, eax ; ret
0x00000000001167b0 : mov eax, dword ptr [rip + 0x2aff7a] ; test eax, eax ; jne 0x1167cc ; xor eax, eax ; ret
0x0000000000116780 : mov eax, dword ptr [rip + 0x2affaa] ; test eax, eax ; jne 0x11679c ; xor eax, eax ; ret
0x0000000000107741 : mov eax, dword ptr [rip + 0x2b9731] ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x0000000000103aab : mov eax, dword ptr [rip + 0x2bd3c7] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000103a9a : mov eax, dword ptr [rip + 0x2bd3d8] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000fe48d : mov eax, dword ptr [rip + 0x2c2a35] ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x00000000000fe465 : mov eax, dword ptr [rip + 0x2c2a5d] ; mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4b1 ; ret
0x00000000000fcd41 : mov eax, dword ptr [rip + 0x2c4131] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000bbc11 : mov eax, dword ptr [rip + 0x305261] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000085761 : mov eax, dword ptr [rip + 0x33b711] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000843e2 : mov eax, dword ptr [rip + 0x33c9e0] ; xor edi, edi ; call qword ptr [rax]
0x000000000008426a : mov eax, dword ptr [rip + 0x33cb58] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000801cb : mov eax, dword ptr [rip + 0x340cdf] ; mov rax, qword ptr [rax] ; test rax, rax ; jne 0x80214 ; xor edi, edi ; call qword ptr [r15]
0x00000000000483b2 : mov eax, dword ptr [rsi + 0x28] ; mov r9, qword ptr [rsi + 0x30] ; mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x00000000000ac223 : mov eax, dword ptr [rsi + 8] ; cmp r8d, ecx ; jne 0xac246 ; test ecx, ecx ; je 0xac246 ; xor eax, eax ; ret
0x00000000000368a5 : mov eax, dword ptr [rsi] ; and rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000f7f20 : mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x0000000000036b95 : mov eax, dword ptr [rsi] ; or rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000d64ff : mov eax, dword ptr [rsp + 0x68] ; xor edi, edi ; jmp 0xd64d0
0x00000000000bfded : mov eax, dword ptr [rsp + 0xc] ; mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000124b0b : mov eax, dword ptr [rsp + 8] ; mov dword ptr [rbx + 4], eax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000139e51 : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981c : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a0 : mov eax, dword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003af01 : mov eax, eax ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000013a3ff : mov eax, ebx ; mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x5665c
0x000000000012672e : mov eax, ecx ; shr eax, 3 ; mov ecx, eax ; xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x0000000000108ec1 : mov eax, edi ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x000000000003a8b2 : mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003a8c4 : mov eax, edi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x0000000000076ef9 : mov eax, edx ; sar rax, 2 ; mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000aad97 : mov eax, edx ; xor edx, edx ; and eax, 0x3fffc00 ; div ecx ; pop rbx ; mov eax, eax ; ret
0x000000000003013f : mov ebp, 0x48003927 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000a0c71 : mov ebp, 0xea8348c0 ; xor byte ptr [rax + 1], cl ; ret 0x547c
0x00000000001360aa : mov ebp, 0xf883ffff ; add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000104acf : mov ebp, edi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000000801a8 : mov ebp, esi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x000000000007f929 : mov ebx, 0x441f0f66 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000001046ec : mov ebx, 0xd8658d48 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000121a62 : mov ebx, 0xf883fff5 ; push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000104633 : mov ebx, dword ptr [rbx] ; test rbx, rbx ; jne 0x104625 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000013095b : mov ebx, eax ; jne 0x1308f9 ; xor eax, eax ; pop rbx ; ret
0x0000000000116bb3 : mov ecx, 0x48002afa ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000007f143 : mov ecx, 0xc3003433 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000e25e2 : mov ecx, dword ptr [rbp + 4] ; test ecx, ecx ; jle 0xe266b ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260a
0x000000000013e7a0 : mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jae 0x13e7b9 ; xor eax, eax ; ret
0x000000000013e7e0 : mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jae 0x13e7f9 ; xor eax, eax ; ret
0x0000000000048086 : mov ecx, dword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000365a1 : mov ecx, dword ptr [rdi + 8] ; test ecx, ecx ; jne 0x365ca ; mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000001166e0 : mov ecx, dword ptr [rdi + 8] ; xor eax, eax ; test ecx, ecx ; jne 0x1166ff ; cmp qword ptr [rdi], 0 ; je 0x116708 ; ret
0x000000000007f2b0 : mov ecx, dword ptr [rdi] ; test cl, 8 ; je 0x7f2d9 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x0000000000104af1 : mov ecx, dword ptr [rdx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r12 ; call rbx
0x00000000000aa0f4 : mov ecx, dword ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa175 : mov ecx, dword ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa0b5 : mov ecx, dword ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000483b6 : mov ecx, dword ptr [rsi + 0x30] ; mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x00000000000abba8 : mov ecx, dword ptr [rsi + 0xc] ; cmp dword ptr [rdi + 0xc], ecx ; jne 0xabd2e ; xor eax, eax ; ret
0x00000000000aa135 : mov ecx, dword ptr [rsi + 0xe] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa0d4 : mov ecx, dword ptr [rsi + 0xf] ; movdqu xmmword ptr [rdi], xmm0 ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa155 : mov ecx, dword ptr [rsi + 0xf] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000367ba : mov ecx, dword ptr [rsi + rax*8] ; and rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000036aaa : mov ecx, dword ptr [rsi + rax*8] ; or rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x00000000001704df : mov ecx, dword ptr [rsi - 4] ; cmp eax, ecx ; jne 0x1706fd ; xor eax, eax ; ret
0x000000000016d8e1 : mov ecx, dword ptr [rsi - 4] ; cmp ecx, dword ptr [rdi - 4] ; jne 0x16db24 ; xor eax, eax ; ret
0x000000000016c516 : mov ecx, dword ptr [rsi - 4] ; cmp ecx, eax ; jne 0x16ccdc ; xor eax, eax ; ret
0x000000000016c2b1 : mov ecx, dword ptr [rsi - 4] ; mov eax, dword ptr [rdi - 4] ; cmp ecx, eax ; jne 0x16ccdf ; xor eax, eax ; ret
0x000000000016cc97 : mov ecx, dword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16cccd ; xor eax, eax ; ret
0x000000000016c28b : mov ecx, dword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd1 ; xor eax, eax ; ret
0x000000000016dad7 : mov ecx, dword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db0d ; xor eax, eax ; ret
0x000000000016d8bb : mov ecx, dword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db11 ; xor eax, eax ; ret
0x00000000000a9f21 : mov ecx, dword ptr [rsi] ; mov dl, byte ptr [rsi + 2] ; mov word ptr [rdi], cx ; mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f50 : mov ecx, dword ptr [rsi] ; mov dl, byte ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], dl ; xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000a9fa1 : mov ecx, dword ptr [rsi] ; mov dl, byte ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9f60 : mov ecx, dword ptr [rsi] ; mov dx, word ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000a9f80 : mov ecx, dword ptr [rsi] ; mov edx, dword ptr [rsi + 3] ; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9fe1 : mov ecx, dword ptr [rsi] ; mov edx, dword ptr [rsi + 7] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa001 : mov ecx, dword ptr [rsi] ; mov edx, dword ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x000000000013e68a : mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6aa ; ret
0x00000000000a0476 : mov ecx, eax ; xor eax, eax ; mov qword ptr [rdx], rcx ; ret
0x0000000000126733 : mov ecx, eax ; xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x0000000000076b84 : mov ecx, ebp ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x0000000000070ebc : mov ecx, ebp ; mov rsi, r12 ; mov rdi, rbx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x000000000012e64c : mov ecx, ebx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000013079f : mov ecx, ebx ; add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e5 : mov ecx, ebx ; pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000000d607b : mov ecx, edi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a0
0x000000000003b22b : mov ecx, edx ; mov dword ptr [rdi], edx ; shr ecx, 0x10 ; and ecx, 0x3ff ; xor eax, ecx ; ret
0x000000000007de70 : mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x000000000007deaa : mov ecx, edx ; xor edx, edx ; jmp rax
0x0000000000135655 : mov ecx, esi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013a402 : mov ecx, esp ; mov rdi, rbp ; xor eax, eax ; call 0x56659
0x0000000000070ebb : mov ecx, r13d ; mov rsi, r12 ; mov rdi, rbx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x0000000000132b1d : mov edi, 0x850000a7 ; sal byte ptr [rbp + 0xb], 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003a25e : mov edi, dword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x000000000012e091 : mov edi, dword ptr [rcx + rbp] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000135651 : mov edi, dword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013bf31 : mov edi, dword ptr [rdi + 0x48] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000004808a : mov edi, dword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000801a1 : mov edi, dword ptr [rip + 0x340c21] ; mov rbp, rsi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x0000000000029866 : mov edi, dword ptr [rsp + 0x10] ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x00000000000f7679 : mov edi, dword ptr [rsp + 0x2c] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000106961 : mov edi, dword ptr [rsp + 4] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000007dea1 : mov edi, dword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x000000000013ddb1 : mov edi, ebp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd65 : mov edi, ebp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000002f2a8 : mov edi, ebp ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000013a405 : mov edi, ebp ; xor eax, eax ; call 0x56656
0x000000000012fe0d : mov edi, ebp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x0000000000135e03 : mov edi, ebx ; xor ebx, ebx ; call 0x1f9c2
0x0000000000070ec2 : mov edi, ebx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x00000000000cd652 : mov edi, ecx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000076b87 : mov edi, edi ; xor r8d, r8d ; call rbx
0x000000000014719f : mov edi, edx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001142aa : mov edi, esi ; xor eax, eax ; call 0x1105a6
0x00000000000ca1c2 : mov edi, esp ; cmove rcx, rax ; xor eax, eax ; call 0x5648a
0x0000000000050964 : mov edi, esp ; xor esi, esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000ba642 : mov edx, 0x48003082 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000047c0a : mov edx, 0xc1480037 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000013ddb3 : mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd67 : mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000105017 : mov edx, 1 ; je 0x105570 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aea : mov edx, 1 ; je 0x105590 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d8d : mov edx, 2 ; je 0x1055d0 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503c : mov edx, 2 ; je 0x1055f0 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b0f : mov edx, 2 ; je 0x105610 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052ba : mov edx, 2 ; je 0x105630 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b33 : mov edx, 3 ; je 0x105650 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed6 : mov edx, 3 ; je 0x105670 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db1 : mov edx, 3 ; je 0x105690 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c58 : mov edx, 3 ; je 0x1056b0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105403 : mov edx, 3 ; je 0x1056d0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052de : mov edx, 3 ; je 0x1056f0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105185 : mov edx, 3 ; je 0x105710 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105060 : mov edx, 3 ; je 0x105730 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050f9 : mov edx, 4 ; je 0x105750 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105080 : mov edx, 4 ; je 0x105770 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549c : mov edx, 4 ; je 0x105790 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105423 : mov edx, 4 ; je 0x1057b0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105377 : mov edx, 4 ; je 0x1057d0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052fe : mov edx, 4 ; je 0x1057f0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010521e : mov edx, 4 ; je 0x105810 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a5 : mov edx, 4 ; je 0x105830 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f6f : mov edx, 4 ; je 0x105850 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef6 : mov edx, 4 ; je 0x105870 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b53 : mov edx, 4 ; je 0x105890 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4a : mov edx, 4 ; je 0x1058b0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd1 : mov edx, 4 ; je 0x1058d0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcc : mov edx, 4 ; je 0x1058f0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf1 : mov edx, 4 ; je 0x105910 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c78 : mov edx, 4 ; je 0x105930 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000048497 : mov edx, dword ptr [rax + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000012fe05 : mov edx, dword ptr [rbx + 0x28] ; add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x0000000000077b78 : mov edx, dword ptr [rbx + 0xf8] ; mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000db199 : mov edx, dword ptr [rbx] ; test rdx, rdx ; jne 0xdb16f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001166ff : mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x000000000012caa1 : mov edx, dword ptr [rdi] ; mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000746e0 : mov edx, dword ptr [rdi] ; test dl, 8 ; je 0x74709 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x00000000000365a8 : mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000c04b9 : mov edx, dword ptr [rip + 0x300989] ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000a9f82 : mov edx, dword ptr [rsi + 3] ; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 3], edx ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9f63 : mov edx, dword ptr [rsi + 4] ; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000aa024 : mov edx, dword ptr [rsi + 5] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 5], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa044 : mov edx, dword ptr [rsi + 6] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 6], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000a9fe3 : mov edx, dword ptr [rsi + 7] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa064 : mov edx, dword ptr [rsi + 7] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 7], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000aa003 : mov edx, dword ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x00000000000a9fc4 : mov edx, dword ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov word ptr [rdi + 8], dx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000a9f40 : mov edx, dword ptr [rsi] ; mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x00000000000a9f91 : mov edx, dword ptr [rsi] ; mov qword ptr [rdi], rdx ; xor ch, ch ; mov byte ptr [rdi + 8], ch ; ret
0x00000000000a9f11 : mov edx, dword ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000360c4 : mov edx, dword ptr [rsp + 8] ; mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x000000000013e688 : mov edx, eax ; mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6ac ; ret
0x00000000001142a7 : mov edx, eax ; mov rdi, r14 ; xor eax, eax ; call 0x1105a9
0x000000000008b4a4 : mov edx, eax ; xor edi, edi ; xor eax, eax ; call 0x6e17e
0x00000000000403c6 : mov edx, ebp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x4040f
0x000000000003a8b0 : mov edx, edi ; mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003a8c1 : mov edx, edi ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x000000000013d245 : mov edx, edi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000003d17b : mov edx, esi ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c6
0x000000000012f381 : mov esi, 0x18c48348 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000a0755 : mov esi, 0x75c9840f ; in eax, dx ; xor eax, eax ; ret
0x0000000000112a3d : mov esi, 0x8b4864d1 ; xor byte ptr [rdi], cl ; mov esi, 0xbe0f48cb ; ret
0x0000000000089d81 : mov esi, 0x8d48feda ; xor byte ptr [rax - 0x77], cl ; and byte ptr [rax + 0x31], cl ; ret 0x93be
0x00000000000a07ad : mov esi, 0xc0844507 ; jne 0xa0799 ; xor eax, eax ; ret
0x00000000001035b2 : mov esi, 0xea831c14 ; xor byte ptr [rbx - 0x78f0f606], al ; out dx, eax ; add byte ptr [rax], al ; add byte ptr [rax - 0x7d], cl ; ret
0x000000000003a236 : mov esi, dword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000060ed6 : mov esi, dword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0f8
0x00000000000483ba : mov esi, dword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x000000000012e649 : mov esi, ebp ; mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000013079c : mov esi, ebp ; mov rcx, rbx ; add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e2 : mov esi, ebp ; mov rcx, rbx ; pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x000000000013ddae : mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd62 : mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x00000000000c7c33 : mov esi, edi ; xor edi, edi ; call rax
0x0000000000070ebf : mov esi, esp ; mov rdi, rbx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x0000000000035618 : mov esi, esp ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000d0939 : mov esp, dword ptr [rdi + 0x10] ; xor eax, eax ; jmp 0xd04ee
0x0000000000116943 : mov esp, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000983f2 : mov qword ptr [r12], r13 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f1021 : mov qword ptr [r12], rax ; je 0xf1007 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011b0f0 : mov qword ptr [r12], rbp ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010e411 : mov qword ptr [r12], rbp ; je 0x10e436 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x000000000010fbf8 : mov qword ptr [r13], r12 ; je 0x10fc28 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000074208 : mov qword ptr [rax + 0x18], rdx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x0000000000074204 : mov qword ptr [rax + 0x28], rdx ; mov qword ptr [rax + 0x18], rdx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x0000000000074578 : mov qword ptr [rax + 0x40], rsi ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x000000000003a4e2 : mov qword ptr [rax + 8], rdi ; mov qword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fe493 : mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x000000000003a305 : mov qword ptr [rax], 2 ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003a4e6 : mov qword ptr [rax], 4 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000074201 : mov qword ptr [rax], rdx ; mov qword ptr [rax + 0x28], rdx ; mov qword ptr [rax + 0x18], rdx ; mov dword ptr [rbx], ecx ; xor eax, eax ; pop rbx ; ret
0x00000000000fe46b : mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4ab ; ret
0x0000000000074580 : mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x000000000008a9da : mov qword ptr [rax], rsi ; xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x000000000007ef1d : mov qword ptr [rbp + 8], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f6f48 : mov qword ptr [rbp + 8], rax ; mov dword ptr [rbp], ebx ; xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x000000000007eeec : mov qword ptr [rbp + 8], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000003b4a9 : mov qword ptr [rbp], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000089ac6 : mov qword ptr [rbp], rdx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a7fc : mov qword ptr [rbx + 0x10], rax ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007a688 : mov qword ptr [rbx + 0x10], rax ; xor eax, eax ; pop rbx ; ret
0x000000000007d2ce : mov qword ptr [rbx + 0x20], rax ; mov dword ptr [rbx], edx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000007a684 : mov qword ptr [rbx + 8], rax ; mov qword ptr [rbx + 0x10], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000139e55 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000139820 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000001399a4 : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003b44a : mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012caa3 : mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x0000000000048635 : mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x000000000004867c : mov qword ptr [rcx + rsi*8], rdi ; add rsi, 1 ; cmp rsi, rdx ; jne 0x48687 ; xor eax, eax ; ret
0x0000000000076eff : mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000aa17c : mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa19f : mov qword ptr [rdi + 0x10], rdx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1df : mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa1ff : mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa1c0 : mov qword ptr [rdi + 0x10], rdx ; mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x0000000000079106 : mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000aa13c : mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa15c : mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa02a : mov qword ptr [rdi + 5], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa04a : mov qword ptr [rdi + 6], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000aa06a : mov qword ptr [rdi + 7], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000368a0 : mov qword ptr [rdi + 8], rax ; mov rax, qword ptr [rsi] ; and rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000036b90 : mov qword ptr [rdi + 8], rax ; mov rax, qword ptr [rsi] ; or rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003af03 : mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000367c1 : mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x000000000003aeeb : mov qword ptr [rdi], rax ; cmovbe rdx, r8 ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x0000000000036362 : mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000a9fa6 : mov qword ptr [rdi], rcx ; mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9fe6 : mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa006 : mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x00000000000aa027 : mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 5], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa047 : mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 6], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000aa067 : mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 7], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000a9fc7 : mov qword ptr [rdi], rcx ; mov word ptr [rdi + 8], dx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000a9f93 : mov qword ptr [rdi], rdx ; xor ch, ch ; mov byte ptr [rdi + 8], ch ; ret
0x0000000000060ed1 : mov qword ptr [rdx + 8], rdi ; mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0fd
0x0000000000077b7e : mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000086919 : mov qword ptr [rip + 0x33ceb8], rsi ; xor eax, eax ; ret
0x0000000000086912 : mov qword ptr [rip + 0x33cec7], r8 ; mov qword ptr [rip + 0x33ceb8], rsi ; xor eax, eax ; ret
0x000000000003ae6e : mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x000000000003b546 : mov qword ptr [rsi + 0x10], rax ; mov eax, 0xb ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b505 : mov qword ptr [rsi + 0x10], rax ; xor eax, eax ; ret
0x000000000003ae72 : mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x00000000000fd82a : mov qword ptr [rsi + 0x50], r8 ; test al, 0x20 ; je 0xfd850 ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x00000000000f7e00 : mov qword ptr [rsi + 0x70], rdx ; mov rax, qword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7283 : mov qword ptr [rsi + 0x70], rdx ; mov rax, qword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f728e : mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x0000000000074e17 : mov qword ptr [rsi + 8], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000126a43 : mov qword ptr [rsi + r11 + 0x10], rdx ; mov byte ptr [rsi + 3], r8b ; xor eax, eax ; ret
0x0000000000126a3e : mov qword ptr [rsi + r11 + 8], rax ; mov qword ptr [rsi + r11 + 0x10], rdx ; mov byte ptr [rsi + 3], r8b ; xor eax, eax ; ret
0x00000000000484e4 : mov qword ptr [rsi + rax*8], rcx ; add rax, 1 ; cmp rax, rdx ; jne 0x484ef ; xor eax, eax ; ret
0x000000000004849a : mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000003ae67 : mov qword ptr [rsi], rax ; lea rax, qword ptr [r10 + r8*4] ; mov qword ptr [rsi + 0x10], r10 ; mov qword ptr [rsi + 0x28], rax ; xor eax, eax ; ret
0x0000000000074e1b : mov qword ptr [rsi], rax ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007910a : mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x0000000000125eae : mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x000000000011b1c0 : mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x0000000000084270 : mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000d0938 : mov r12, qword ptr [r15 + 0x10] ; xor eax, eax ; jmp 0xd04ef
0x00000000000801a0 : mov r15, qword ptr [rip + 0x340c21] ; mov rbp, rsi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x00000000000d820b : mov r8, qword ptr [r8 + rax*8] ; xor eax, eax ; bt r8, rcx ; jb 0xd819a ; ret
0x0000000000048081 : mov r8, qword ptr [rdi + 0x28] ; mov r9, qword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000483b1 : mov r8, qword ptr [rsi + 0x28] ; mov r9, qword ptr [rsi + 0x30] ; mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x00000000000d64fe : mov r8, qword ptr [rsp + 0x68] ; xor edi, edi ; jmp 0xd64d1
0x000000000013a3fe : mov r8, rbx ; mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x5665d
0x00000000000ac222 : mov r8d, dword ptr [rsi + 8] ; cmp r8d, ecx ; jne 0xac247 ; test ecx, ecx ; je 0xac247 ; xor eax, eax ; ret
0x0000000000048085 : mov r9, qword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x00000000000483b5 : mov r9, qword ptr [rsi + 0x30] ; mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x00000000000d607a : mov r9, rdi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a1
0x00000000000363dd : mov rax, -2 ; rol rax, cl ; and qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000048631 : mov rax, qword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000801d1 : mov rax, qword ptr [rax] ; test rax, rax ; jne 0x8020e ; xor edi, edi ; call qword ptr [r15]
0x000000000007de68 : mov rax, qword ptr [rbx + 0x48] ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x00000000000f7e04 : mov rax, qword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7287 : mov rax, qword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x000000000016c810 : mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16ccd2 ; xor eax, eax ; ret
0x000000000016d9e0 : mov rax, qword ptr [rdi - 8] ; cmp rcx, rax ; jne 0x16db12 ; xor eax, eax ; ret
0x000000000016cc92 : mov rax, qword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd2 ; xor eax, eax ; ret
0x000000000016dad2 : mov rax, qword ptr [rdi - 8] ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db12 ; xor eax, eax ; ret
0x0000000000146aa0 : mov rax, qword ptr [rip + 0x27a3d1] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000107740 : mov rax, qword ptr [rip + 0x2b9731] ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x0000000000103aaa : mov rax, qword ptr [rip + 0x2bd3c7] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000103a99 : mov rax, qword ptr [rip + 0x2bd3d8] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000fe48c : mov rax, qword ptr [rip + 0x2c2a35] ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x00000000000fcd40 : mov rax, qword ptr [rip + 0x2c4131] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000bbc10 : mov rax, qword ptr [rip + 0x305261] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000085760 : mov rax, qword ptr [rip + 0x33b711] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x00000000000843e1 : mov rax, qword ptr [rip + 0x33c9e0] ; xor edi, edi ; call qword ptr [rax]
0x0000000000084269 : mov rax, qword ptr [rip + 0x33cb58] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000368a4 : mov rax, qword ptr [rsi] ; and rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000036b94 : mov rax, qword ptr [rsi] ; or rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000139e50 : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000013981b : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000013999f : mov rax, qword ptr [rsp + 8] ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x000000000003af00 : mov rax, r8 ; mov qword ptr [rdi + 8], rdx ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000108ec0 : mov rax, rdi ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x000000000003a8c3 : mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x0000000000076ef8 : mov rax, rdx ; sar rax, 2 ; mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000104ace : mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000000801a7 : mov rbp, rsi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x0000000000104632 : mov rbx, qword ptr [rbx] ; test rbx, rbx ; jne 0x104626 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000013095a : mov rbx, rax ; jne 0x1308fa ; xor eax, eax ; pop rbx ; ret
0x00000000000aa174 : mov rcx, qword ptr [rsi + 0x10] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa134 : mov rcx, qword ptr [rsi + 0xe] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa154 : mov rcx, qword ptr [rsi + 0xf] ; movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000367b9 : mov rcx, qword ptr [rsi + rax*8] ; and rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000036aa9 : mov rcx, qword ptr [rsi + rax*8] ; or rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x000000000016cc96 : mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccce ; xor eax, eax ; ret
0x000000000016c28a : mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd2 ; xor eax, eax ; ret
0x000000000016dad6 : mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db0e ; xor eax, eax ; ret
0x000000000016d8ba : mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db12 ; xor eax, eax ; ret
0x00000000000a9fa0 : mov rcx, qword ptr [rsi] ; mov dl, byte ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov byte ptr [rdi + 8], dl ; xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9fe0 : mov rcx, qword ptr [rsi] ; mov edx, dword ptr [rsi + 7] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 7], edx ; xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa000 : mov rcx, qword ptr [rsi] ; mov edx, dword ptr [rsi + 8] ; mov qword ptr [rdi], rcx ; mov dword ptr [rdi + 8], edx ; xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x000000000013a401 : mov rcx, r12 ; mov rdi, rbp ; xor eax, eax ; call 0x5665a
0x0000000000076b83 : mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000a0475 : mov rcx, rax ; xor eax, eax ; mov qword ptr [rdx], rcx ; ret
0x000000000012e64b : mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000013079e : mov rcx, rbx ; add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e4 : mov rcx, rbx ; pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x0000000000135654 : mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000003a25d : mov rdi, qword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000135650 : mov rdi, qword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x000000000013bf30 : mov rdi, qword ptr [rdi + 0x48] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x0000000000048089 : mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
0x0000000000029865 : mov rdi, qword ptr [rsp + 0x10] ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000007dea0 : mov rdi, qword ptr [rsp + 8] ; add rsp, 0x20 ; pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x00000000000ca1c1 : mov rdi, r12 ; cmove rcx, rax ; xor eax, eax ; call 0x5648b
0x000000000002f2a7 : mov rdi, r13 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001142a9 : mov rdi, r14 ; xor eax, eax ; call 0x1105a7
0x0000000000076b86 : mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000cd651 : mov rdi, r9 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000013ddb0 : mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd64 : mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013a404 : mov rdi, rbp ; xor eax, eax ; call 0x56657
0x000000000012fe0c : mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x0000000000135e02 : mov rdi, rbx ; xor ebx, ebx ; call 0x1f9c3
0x0000000000070ec1 : mov rdi, rbx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x000000000014719e : mov rdi, rdx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000012caa0 : mov rdx, qword ptr [r15] ; mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x0000000000048496 : mov rdx, qword ptr [r8 + rax*8] ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x000000000012fe04 : mov rdx, qword ptr [rbx + 0x28] ; add rsp, 8 ; mov rdi, rbp ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x0000000000077b77 : mov rdx, qword ptr [rbx + 0xf8] ; mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x00000000000db198 : mov rdx, qword ptr [rbx] ; test rdx, rdx ; jne 0xdb170 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000aa023 : mov rdx, qword ptr [rsi + 5] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 5], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa043 : mov rdx, qword ptr [rsi + 6] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 6], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000aa063 : mov rdx, qword ptr [rsi + 7] ; mov qword ptr [rdi], rcx ; mov qword ptr [rdi + 7], rdx ; xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000a9f90 : mov rdx, qword ptr [rsi] ; mov qword ptr [rdi], rdx ; xor ch, ch ; mov byte ptr [rdi + 8], ch ; ret
0x000000000003d17a : mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c7
0x000000000013e687 : mov rdx, rax ; mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6ad ; ret
0x00000000001142a6 : mov rdx, rax ; mov rdi, r14 ; xor eax, eax ; call 0x1105aa
0x000000000008b4a3 : mov rdx, rax ; xor edi, edi ; xor eax, eax ; call 0x6e17f
0x00000000000403c5 : mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40410
0x000000000003a8c0 : mov rdx, rdi ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x000000000013d244 : mov rdx, rdi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000003a235 : mov rsi, qword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000060ed5 : mov rsi, qword ptr [rbp - 0x660] ; xor edx, edx ; jmp 0x5d0f9
0x00000000000483b9 : mov rsi, qword ptr [rsi + 0x70] ; xor eax, eax ; ret
0x0000000000070ebe : mov rsi, r12 ; mov rdi, rbx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x000000000013ddad : mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd61 : mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000012e648 : mov rsi, rbp ; mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000013079b : mov rsi, rbp ; mov rcx, rbx ; add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e1 : mov rsi, rbp ; mov rcx, rbx ; pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000000c7c32 : mov rsi, rdi ; xor edi, edi ; call rax
0x0000000000035617 : mov rsi, rsp ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000bfdf1 : mov word ptr [rbx + 0xc], ax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x0000000000196ca4 : mov word ptr [rcx + rax], fs ; xor al, 0x68 ; cmc ; call rsp
0x00000000000aa0bc : mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa1c4 : mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x000000000003b5dc : mov word ptr [rdi + 4], ax ; xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x00000000000a9f68 : mov word ptr [rdi + 4], dx ; xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000a9fca : mov word ptr [rdi + 8], dx ; xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000a9f26 : mov word ptr [rdi], cx ; mov byte ptr [rdi + 2], dl ; xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f13 : mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000f7350 : mov word ptr [rdi], si ; xor eax, eax ; ret
0x00000000000fcbe5 : mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x000000000003b58d : mov word ptr [rsi + 0xc], ax ; mov eax, 1 ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x000000000003b54f : mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x000000000003b596 : mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x00000000000f7333 : mov word ptr [rsi], ax ; xor eax, eax ; ret
0x00000000000b73da : mov word ptr [rsp + rax*4], fs ; add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor al, 0x83 ; sub r10, rax ; jmp 0xb740e
0x00000000000c815a : movabs byte ptr [0x6411c8c148002fa7], al ; xor rax, qword ptr [0x30] ; call rax
0x00000000000795d3 : movabs eax, dword ptr [0x1c00c764003478] ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000116d03 : movabs eax, dword ptr [0x6411c8c148002af9] ; xor rax, qword ptr [0x30] ; jmp rax
0x00000000001167f3 : movabs eax, dword ptr [0x6411c8c148002afd] ; xor rax, qword ptr [0x30] ; jmp rax
0x0000000000036358 : movabs rax, -0x180000001 ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003b4fb : movabs rax, 0x5deece66d ; mov qword ptr [rsi + 0x10], rax ; xor eax, eax ; ret
0x000000000013ebe5 : movaps xmmword ptr [rsp + 0x80], xmm0 ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000000aa080 : movdqu xmm0, xmmword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000aa2a0 : movdqu xmmword ptr [rdi + 0x10], xmm2 ; mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa27d : movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa2f3 : movdqu xmmword ptr [rdi + 0x30], xmm7 ; xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000aa21d : movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa23d : movdqu xmmword ptr [rdi + 0xe], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa25d : movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa097 : movdqu xmmword ptr [rdi], xmm0 ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa11a : movdqu xmmword ptr [rdi], xmm0 ; mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa0f7 : movdqu xmmword ptr [rdi], xmm0 ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa0d7 : movdqu xmmword ptr [rdi], xmm0 ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa178 : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa19b : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rdx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1db : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa1fb : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa1bc : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0x10], rdx ; mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000aa138 : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa158 : movdqu xmmword ptr [rdi], xmm0 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa0b8 : movdqu xmmword ptr [rdi], xmm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa29c : movdqu xmmword ptr [rdi], xmm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa279 : movdqu xmmword ptr [rdi], xmm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa219 : movdqu xmmword ptr [rdi], xmm0 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa239 : movdqu xmmword ptr [rdi], xmm0 ; movdqu xmmword ptr [rdi + 0xe], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa259 : movdqu xmmword ptr [rdi], xmm0 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa084 : movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000a5b93 : movlpd qword ptr [rdx + 8], xmm1 ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000a5b2a : movlpd qword ptr [rdx], xmm0 ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000a5b26 : movlpd xmm0, qword ptr [rcx] ; movlpd qword ptr [rdx], xmm0 ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000a5b94 : movlps qword ptr [rdx + 8], xmm1 ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000a5b2b : movlps qword ptr [rdx], xmm0 ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000a5b27 : movlps xmm0, qword ptr [rcx] ; movlpd qword ptr [rdx], xmm0 ; xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000a5b8f : movlps xmm1, qword ptr [rcx + 8] ; movlpd qword ptr [rdx + 8], xmm1 ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000aa081 : movq mm0, qword ptr [rsi] ; movdqu xmmword ptr [rdi], xmm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000aa2a1 : movq qword ptr [rdi + 0x10], mm2 ; mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa27e : movq qword ptr [rdi + 0x10], mm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa2f4 : movq qword ptr [rdi + 0x30], mm7 ; xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000aa21e : movq qword ptr [rdi + 0xd], mm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa23e : movq qword ptr [rdi + 0xe], mm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa25e : movq qword ptr [rdi + 0xf], mm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa098 : movq qword ptr [rdi], mm0 ; mov byte ptr [rdi + 0x10], cl ; xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa11b : movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa0f8 : movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa0d8 : movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa179 : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa19c : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1dc : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x17], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa1fc : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa1bd : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov word ptr [rdi + 0x18], cx ; xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000aa139 : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0xe], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa159 : movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa0b9 : movq qword ptr [rdi], mm0 ; mov word ptr [rdi + 0x10], cx ; xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa29d : movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; mov byte ptr [rdi + 0x20], cl ; xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa27a : movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa21a : movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa23a : movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0xe], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa25a : movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa085 : movq qword ptr [rdi], mm0 ; xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000001b35fc : movsb byte ptr [rdi], byte ptr [rsi] ; pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001a64fc : movsb byte ptr [rdi], byte ptr [rsi] ; retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x0000000000198680 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a0 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x000000000012b793 : movsd dword ptr [rdi], dword ptr [rsi] ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x00000000000e98d4 : movsd dword ptr [rdi], dword ptr [rsi] ; sub eax, 0x36740000 ; xor eax, eax ; ret
0x000000000012a71c : movsd dword ptr [rdi], dword ptr [rsi] ; xor eax, dword ptr [rsi] ; add byte ptr [rax - 0x77], cl ; ret 0x1be
0x000000000012b792 : movsq qword ptr [rdi], qword ptr [rsi] ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x00000000000a07ac : movsx eax, byte ptr [rdi] ; test r8b, r8b ; jne 0xa079a ; xor eax, eax ; ret
0x00000000000a0754 : movsx ecx, byte ptr [rdi] ; test cl, cl ; jne 0xa0751 ; xor eax, eax ; ret
0x00000000000a07ab : movsx r8d, byte ptr [rdi] ; test r8b, r8b ; jne 0xa079b ; xor eax, eax ; ret
0x000000000004dd74 : movsxd rax, dword ptr [rax + rdx*4] ; add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x000000000003b4a5 : movsxd rax, dword ptr [rbx + 2] ; mov qword ptr [rbp], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000367b7 : movsxd rax, ecx ; mov rcx, qword ptr [rsi + rax*8] ; and rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000036aa7 : movsxd rax, ecx ; mov rcx, qword ptr [rsi + rax*8] ; or rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000036289 : movsxd rax, ecx ; shl rdx, cl ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x000000000007aff0 : movsxd rdi, dword ptr [rdi + 0x70] ; xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x7b013 ; ret
0x0000000000119336 : movsxd rdi, edi ; xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x11935f ; ret
0x0000000000119335 : movsxd rdi, edi ; xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x119360 ; ret
0x00000000000fd98a : movups xmm0, xmmword ptr [rax] ; add bl, al ; nop ; xor eax, eax ; ret
0x0000000000021460 : movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000d6076 : movzx eax, byte ptr [rdi + rax] ; mov r9, rdi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a5
0x00000000000a1352 : movzx eax, byte ptr [rdi + rdx] ; movzx ecx, byte ptr [rsi + rdx] ; test al, al ; jne 0xa1350 ; xor eax, eax ; sub eax, ecx ; ret
0x00000000001706e2 : movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170710 ; xor eax, eax ; ret
0x000000000017058a : movzx eax, byte ptr [rdi - 1] ; cmp al, byte ptr [rsi - 1] ; jne 0x170714 ; xor eax, eax ; ret
0x00000000000f7330 : movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x00000000000a1356 : movzx ecx, byte ptr [rsi + rdx] ; test al, al ; jne 0xa134c ; xor eax, eax ; sub eax, ecx ; ret
0x00000000000aadae : movzx ecx, dl ; xor edx, edx ; pop rbx ; and eax, 0x7ff80000 ; div ecx ; mov eax, eax ; ret
0x0000000000108ec4 : movzx edi, bh ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x0000000000108ec3 : movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x00000000000a0506 : movzx edx, byte ptr [rcx] ; test dl, dl ; jne 0xa0505 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0584 : movzx edx, byte ptr [rcx] ; test dl, dl ; jne 0xa0576 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000d6075 : movzx r8d, byte ptr [rdi + rax] ; mov r9, rdi ; xor eax, eax ; mov rdx, r8 ; jmp 0xd60a6
0x000000000008f837 : mul byte ptr [rsi + 0xf] ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x000000000004dd77 : nop ; add rax, rcx ; xor r8d, r8d ; mov edx, 1 ; jmp rax
0x00000000000ba40f : nop ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x000000000007966f : nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ac78f : nop ; cmp edx, eax ; je 0xac811 ; add rdi, 4 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0xac7a1 ; xor eax, eax ; ret
0x00000000000d691f : nop ; mov byte ptr [rdi + 8], 2 ; xor eax, eax ; ret
0x000000000011749f : nop ; mov dword ptr [r8], edx ; xor eax, eax ; ret
0x00000000000fdc8f : nop ; mov dword ptr fs:[r8], r12d ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000014090f : nop ; mov eax, dword ptr [rip + 0x28604a] ; test eax, eax ; je 0x14092d ; xor eax, eax ; ret
0x000000000014090e : nop ; mov eax, dword ptr [rip + 0x28604a] ; test eax, eax ; je 0x14092e ; xor eax, eax ; ret
0x000000000003a8af : nop ; mov edx, edi ; mov eax, edi ; sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000010773f : nop ; mov rax, qword ptr [rip + 0x2b9731] ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x00000000000f734f : nop ; mov word ptr [rdi], si ; xor eax, eax ; ret
0x00000000000f732f : nop ; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x000000000013ea45 : nop ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000000ac015 : nop ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x00000000000bd499 : nop ; xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000146240 : nop ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx + 0x10], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x000000000014646b : nop ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x000000000008a75d : nop ; xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; pop rbp ; pop r12 ; ret
0x000000000008a773 : nop ; xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; ret
0x0000000000087dd2 : nop ; xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87dea ; call rax
0x0000000000088083 : nop ; xor eax, dword ptr [rax] ; test eax, eax ; js 0x88098 ; ret
0x000000000010e2bf : nop ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f71bf : nop ; xor eax, eax ; pop rbx ; ret
0x000000000007684f : nop ; xor eax, eax ; ret
0x000000000006bbef : nop ; xor ebp, ebp ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x00000000000d6aaf : nop ; xor edx, edx ; cmp dword ptr [rbx + 0xa4], 1 ; setg dl ; jmp 0xd6a59
0x00000000000d6aae : nop ; xor edx, edx ; cmp dword ptr [rbx + 0xa4], 1 ; setg dl ; jmp 0xd6a5a
0x0000000000090e4f : nop ; xor rax, rax ; ret
0x000000000006c413 : nop dword ptr [rax + rax] ; add dword ptr [rdx + 4], 1 ; xor eax, eax ; ret
0x000000000006bccb : nop dword ptr [rax + rax] ; add rsp, 0x1000 ; xor eax, eax ; pop rbx ; ret
0x000000000013d7fb : nop dword ptr [rax + rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008044b : nop dword ptr [rax + rax] ; add rsp, 0x18 ; xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000136413 : nop dword ptr [rax + rax] ; add rsp, 0x20 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000010c6d3 : nop dword ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008d7b3 : nop dword ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000d81eb : nop dword ptr [rax + rax] ; cmp al, 1 ; jne 0xd81f8 ; xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8199 ; ret
0x0000000000136058 : nop dword ptr [rax + rax] ; cmp dword ptr [rsi + 0x10], 0xc ; je 0x136080 ; xor eax, eax ; ret
0x00000000000fcbdb : nop dword ptr [rax + rax] ; cmp edx, 4 ; ja 0xfcc00 ; mov word ptr [rsi + 0x66], dx ; xor eax, eax ; ret
0x00000000000a9ef8 : nop dword ptr [rax + rax] ; mov dl, byte ptr [rsi] ; mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000f7368 : nop dword ptr [rax + rax] ; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x00000000000a9f0b : nop dword ptr [rax + rax] ; mov dx, word ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000f7e2b : nop dword ptr [rax + rax] ; mov eax, dword ptr [rdi + 0x108] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f7358 : nop dword ptr [rax + rax] ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x0000000000116b6b : nop dword ptr [rax + rax] ; mov eax, dword ptr [rip + 0x2afbba] ; test eax, eax ; jne 0x116b91 ; xor eax, eax ; ret
0x00000000000a9f38 : nop dword ptr [rax + rax] ; mov edx, dword ptr [rsi] ; mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x000000000011b1b8 : nop dword ptr [rax + rax] ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000f7327 : nop dword ptr [rax + rax] ; nop ; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x0000000000170d31 : nop dword ptr [rax + rax] ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x0000000000117658 : nop dword ptr [rax + rax] ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x000000000010c053 : nop dword ptr [rax + rax] ; sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x00000000000a9ee8 : nop dword ptr [rax + rax] ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x0000000000146a53 : nop dword ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3b : nop dword ptr [rax + rax] ; xor eax, eax ; add rsp, 8 ; ret
0x000000000002de98 : nop dword ptr [rax + rax] ; xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x0000000000131318 : nop dword ptr [rax + rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003aa6b : nop dword ptr [rax + rax] ; xor eax, eax ; pop rbx ; ret
0x00000000000365b3 : nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000078cc8 : nop dword ptr [rax + rax] ; xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
0x000000000007c368 : nop dword ptr [rax + rax] ; xor eax, eax ; test rdx, rdx ; jne 0x7c38f ; ret
0x000000000006bc68 : nop dword ptr [rax + rax] ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x0000000000071cab : nop dword ptr [rax + rax] ; xor edx, edx ; mov rax, rdx ; ret
0x0000000000119213 : nop dword ptr [rax + rax] ; xor esi, esi ; mov rax, rsi ; ret
0x00000000000a0cc8 : nop dword ptr [rax + rax] ; xor rax, rax ; ret
0x0000000000146fdc : nop dword ptr [rax] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; ret
0x000000000013d879 : nop dword ptr [rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001307f4 : nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000001177f9 : nop dword ptr [rax] ; cmp eax, 0xff ; jne 0x117806 ; xor eax, eax ; leave ; ret
0x0000000000050e65 : nop dword ptr [rax] ; lea eax, dword ptr [rdi - 1] ; xor edx, edx ; div ecx ; add r8d, eax ; mov eax, r8d ; ret
0x00000000000f7f0c : nop dword ptr [rax] ; mov dword ptr [rdi + 0x10c], esi ; xor eax, eax ; ret
0x00000000000f7e1c : nop dword ptr [rax] ; mov eax, dword ptr [rdi + 0x10c] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f7f19 : nop dword ptr [rax] ; mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
0x000000000013e79c : nop dword ptr [rax] ; mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jae 0x13e7bd ; xor eax, eax ; ret
0x000000000013e7dc : nop dword ptr [rax] ; mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jae 0x13e7fd ; xor eax, eax ; ret
0x00000000000a9ee3 : nop dword ptr [rax] ; nop word ptr cs:[rax + rax] ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x00000000000aa832 : nop dword ptr [rax] ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x00000000000a0cc2 : nop dword ptr [rax] ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x00000000000e98bc : nop dword ptr [rax] ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000010c994 : nop dword ptr [rax] ; sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x000000000008dbcc : nop dword ptr [rax] ; test rsi, rsi ; jne 0x8dbe5 ; xor rax, rax ; ret
0x00000000000a2dcd : nop dword ptr [rax] ; xor ah, ah ; mov byte ptr [rdx + 2], ah ; mov ax, word ptr [rcx] ; mov word ptr [rdx], ax ; mov rax, rdi ; ret
0x00000000000c7f51 : nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000121231 : nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x28 ; ret
0x00000000000db285 : nop dword ptr [rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000d8bad : nop dword ptr [rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000073c05 : nop dword ptr [rax] ; xor eax, eax ; ret
0x0000000000078cd9 : nop dword ptr [rax] ; xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
0x000000000006bb75 : nop dword ptr [rax] ; xor ebx, ebx ; add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000034d7d : nop dword ptr [rax] ; xor ecx, ecx ; addsd xmm0, xmm0 ; mov dword ptr [rdi], ecx ; ret
0x000000000011a355 : nop dword ptr [rax] ; xor esi, esi ; mov rax, rsi ; ret
0x0000000000097fa9 : nop dword ptr [rax] ; xor rax, rax ; ret
0x0000000000136057 : nop dword ptr cs:[rax + rax] ; cmp dword ptr [rsi + 0x10], 0xc ; je 0x136081 ; xor eax, eax ; ret
0x00000000000f7357 : nop dword ptr cs:[rax + rax] ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000011b1b7 : nop dword ptr cs:[rax + rax] ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000a9ee7 : nop dword ptr cs:[rax + rax] ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x000000000002de97 : nop dword ptr cs:[rax + rax] ; xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x0000000000131317 : nop dword ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fd0a7 : nop dword ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; ret
0x000000000003b027 : nop dword ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000007c367 : nop dword ptr cs:[rax + rax] ; xor eax, eax ; test rdx, rdx ; jne 0x7c390 ; ret
0x00000000000a0cc7 : nop dword ptr cs:[rax + rax] ; xor rax, rax ; ret
0x000000000013d7fa : nop word ptr [rax + rax] ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008d807 : nop word ptr [rax + rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000a9f0a : nop word ptr [rax + rax] ; mov dx, word ptr [rsi] ; mov word ptr [rdi], dx ; xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x0000000000117657 : nop word ptr [rax + rax] ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x000000000010c052 : nop word ptr [rax + rax] ; sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x0000000000146a52 : nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 0x38 ; ret
0x00000000000e8f3a : nop word ptr [rax + rax] ; xor eax, eax ; add rsp, 8 ; ret
0x000000000003aa6a : nop word ptr [rax + rax] ; xor eax, eax ; pop rbx ; ret
0x00000000000365b2 : nop word ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000119212 : nop word ptr [rax + rax] ; xor esi, esi ; mov rax, rsi ; ret
0x00000000000abd2a : nop word ptr [rax + rax] ; xor rax, rax ; ret
0x00000000000f7356 : nop word ptr cs:[rax + rax] ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000011b1b6 : nop word ptr cs:[rax + rax] ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000a9ee6 : nop word ptr cs:[rax + rax] ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x0000000000131316 : nop word ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fd0a6 : nop word ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; ret
0x000000000003b026 : nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000007c366 : nop word ptr cs:[rax + rax] ; xor eax, eax ; test rdx, rdx ; jne 0x7c391 ; ret
0x00000000000a0cc6 : nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x00000000000362b3 : not eax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x00000000000362b2 : not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x0000000000020402 : or ah, byte ptr [rbx + 0x3a] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000559bd : or ah, byte ptr [rsi + 0x44] ; or dword ptr [rsi + 0xe], esp ; xor eax, eax ; mov qword ptr [rdi], r13 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000011058a : or al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000089e0f : or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008bb28 : or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000008576a : or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000ca1bf : or al, 0 ; mov rdi, r12 ; cmove rcx, rax ; xor eax, eax ; call 0x5648d
0x00000000000a1358 : or al, 0x16 ; test al, al ; jne 0xa134a ; xor eax, eax ; sub eax, ecx ; ret
0x00000000000801a4 : or al, 0x34 ; add byte ptr [rax - 0x77], cl ; cmc ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x00000000000bfdf0 : or al, 0x66 ; mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000003b58c : or al, 0x66 ; mov dword ptr [rsi + 0xc], eax ; mov eax, 1 ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x0000000000131315 : or al, 0x66 ; nop dword ptr cs:[rax + rax] ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000034ddd : or al, 0x66 ; pxor mm4, mm4 ; ucomisd xmm0, xmm4 ; jp 0x34e01 ; jne 0x34e01 ; addsd xmm0, xmm0 ; ret
0x000000000003b590 : or al, 0xb8 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov word ptr [rsi + 0xe], ax ; xor eax, eax ; ret
0x00000000000484e2 : or al, 0xc0 ; mov qword ptr [rsi + rax*8], rcx ; add rax, 1 ; cmp rax, rdx ; jne 0x484f1 ; xor eax, eax ; ret
0x00000000000367bf : or al, 0xc2 ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x00000000000484e6 : or al, 0xc6 ; add rax, 1 ; cmp rax, rdx ; jne 0x484ed ; xor eax, eax ; ret
0x00000000000367bb : or al, 0xc6 ; and rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x0000000000036aab : or al, 0xc6 ; or rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x00000000000367c3 : or al, 0xc7 ; xor eax, eax ; pop rbx ; ret
0x000000000002bbff : or al, 0xf ; xchg edx, ebx ; add byte ptr [rax], al ; add byte ptr [rbx + 0x63], cl ; xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x00000000000f7e22 : or al, 1 ; add byte ptr [rax], al ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f7f12 : or al, 1 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000019eed3 : or al, 7 ; or byte ptr [rcx + 0xb], al ; xor al, 0 ; add byte ptr [rax], al ; test byte ptr [rbp], dl ; add al, dh ; in al, dx ; jmp qword ptr [rax]
0x0000000000104acb : or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000130dc8 : or bh, bh ; adc byte ptr [rbp + 0x485175c0], al ; add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013e140 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e1b0 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e210 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e280 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e0 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e350 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a0 : or bh, bh ; push rax ; test eax, eax ; jne 0x13e410 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000116a22 : or bh, ch ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a3a ; xor eax, eax ; ret
0x0000000000087936 : or bl, al ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000d6921 : or byte ptr [r10], r8b ; xor eax, eax ; ret
0x00000000000ac220 : or byte ptr [r11 + r9*4 + 0x46], r8b ; or byte ptr [rcx + 0x39], al ; enter 0xd75, -0x7b ; leave ; je 0xac249 ; xor eax, eax ; ret
0x00000000000a5b91 : or byte ptr [r14 + 0xf], spl ; adc ecx, dword ptr [rdx + 8] ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000ceb09 : or byte ptr [rax + 0x3d], cl ; jne 0xceb8b ; add byte ptr [rax], al ; jne 0xceaf6 ; xor eax, eax ; ret
0x00000000001b5c93 : or byte ptr [rax + 0xb], cl ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret
0x000000000003a4e5 : or byte ptr [rax - 0x39], cl ; add byte ptr [rax + rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000048630 : or byte ptr [rax - 0x75], cl ; add al, 0xf0 ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000112575 : or byte ptr [rax - 0x75], cl ; cmp byte ptr [r8 - 0x75], cl ; push rbx ; and byte ptr [rax + 0x2b], cl ; xor r9b, bpl ; ret
0x00000000000d8f76 : or byte ptr [rax - 0x77], cl ; add al, byte ptr [rbp - 0x77] ; xor byte ptr [rcx + 0x63], cl ; add r9b, r13b ; ret
0x000000000012e647 : or byte ptr [rax - 0x77], cl ; out dx, al ; mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000012fe0b : or byte ptr [rax - 0x77], cl ; out dx, eax ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000013818e : or byte ptr [rax - 0x77], cl ; xor byte ptr [r8 - 0x77], r9b ; push rdi ; cmp byte ptr [rax + 1], bh ; ret
0x00000000001acaa6 : or byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x00000000001aab35 : or byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000001a70c2 : or byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b6 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001b5bea : or byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; pushfq ; ret 1
0x00000000001aa984 : or byte ptr [rax], al ; add byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x0000000000078c9c : or byte ptr [rax], al ; add byte ptr [rbp + 0x14], dh ; xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x0000000000104ac6 : or byte ptr [rax], al ; je 0x1055af ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000001a7166 : or byte ptr [rax], al ; sbb al, 0 ; add byte ptr [rax], al ; adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x00000000001b5bb6 : or byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret 1
0x00000000000e9018 : or byte ptr [rbx + 0x38], 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000ac221 : or byte ptr [rbx + rcx*4 + 0x46], al ; or byte ptr [rcx + 0x39], al ; enter 0xd75, -0x7b ; leave ; je 0xac248 ; xor eax, eax ; ret
0x00000000000ac225 : or byte ptr [rcx + 0x39], al ; enter 0xd75, -0x7b ; leave ; je 0xac244 ; xor eax, eax ; ret
0x00000000000ac224 : or byte ptr [rcx + 0x39], r8b ; enter 0xd75, -0x7b ; leave ; je 0xac245 ; xor eax, eax ; ret
0x000000000019eed5 : or byte ptr [rcx + 0xb], al ; xor al, 0 ; add byte ptr [rax], al ; test byte ptr [rbp], dl ; add al, dh ; in al, dx ; jmp qword ptr [rax]
0x0000000000048495 : or byte ptr [rcx - 0x75], cl ; adc al, 0xc0 ; mov qword ptr [rsi + rax*8], rdx ; xor eax, eax ; pop rbx ; ret
0x00000000000f7e32 : or byte ptr [rcx], al ; add byte ptr [rax], al ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000f7f24 : or byte ptr [rcx], al ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000001a4581 : or byte ptr [rdi + 0xb], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x000000000019caad : or byte ptr [rdx + 0xb], cl ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x0000000000116663 : or byte ptr [rdx + rdx + 0x48], dh ; add eax, 0x48 ; cmp rax, rdx ; jb 0x11666e ; xor eax, eax ; ret
0x00000000000d6922 : or byte ptr [rdx], al ; xor eax, eax ; ret
0x00000000001a5472 : or byte ptr [rsi + 0xb], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000000a5b92 : or byte ptr [rsi + 0xf], ah ; adc ecx, dword ptr [rdx + 8] ; xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000bfdeb : or cl, byte ptr [r11 + 0x660c2444] ; mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000bfdec : or cl, byte ptr [rbx + 0x660c2444] ; mov dword ptr [rbx + 0xc], eax ; xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x00000000000fd985 : or cl, byte ptr [rbx + 0xf250847] ; adc byte ptr [rax], al ; add bl, al ; nop ; xor eax, eax ; ret
0x000000000019eed2 : or cl, byte ptr [rdi + rax] ; or byte ptr [rcx + 0xb], al ; xor al, 0 ; add byte ptr [rax], al ; test byte ptr [rbp], dl ; add al, dh ; in al, dx ; jmp qword ptr [rax]
0x000000000019caab : or cl, byte ptr [rsi] ; or byte ptr [rdx + 0xb], cl ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000000d80d9 : or dh, byte ptr [rbp - 0x42] ; xor eax, eax ; cmp byte ptr [rdi + 0x65], 0 ; setne al ; add eax, eax ; ret
0x0000000000036293 : or dword ptr [rdi + rax*8], edx ; xor eax, eax ; ret
0x00000000000fda27 : or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x00000000000363a6 : or dword ptr [rdi], eax ; xor eax, eax ; ret
0x00000000000558ee : or dword ptr [rsi + 0xe], ebp ; xor eax, eax ; mov qword ptr [rdi], r14 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000559c0 : or dword ptr [rsi + 0xe], esp ; xor eax, eax ; mov qword ptr [rdi], r13 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000559bf : or dword ptr [rsi + 0xe], r12d ; xor eax, eax ; mov qword ptr [rdi], r13 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000558ed : or dword ptr [rsi + 0xe], r13d ; xor eax, eax ; mov qword ptr [rdi], r14 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000aa218 : or eax, 0x77f0ff3 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000ac22a : or eax, 0x974c985 ; xor eax, eax ; ret
0x00000000001a5474 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001a4583 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001ac99b : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001aec82 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x000000000003b54b : or eax, dword ptr [rax] ; add byte ptr [rax], al ; mov word ptr [rsi + 0xc], ax ; xor eax, eax ; ret
0x0000000000036b98 : or eax, dword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000001aab32 : or eax, dword ptr [rsi + rcx + 8] ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; in al, 0x11 ; add dword ptr [rax], eax ; xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x000000000003b446 : or eax, ecx ; cdqe ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000036aae : or ecx, dword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x000000000019caaf : or edx, dword ptr [rax + rax] ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000000d25d6 : or esi, 2 ; xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x00000000000fd9be : or esi, eax ; xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x00000000000fcbe4 : or esp, dword ptr [rsi - 0x77] ; push rsi ; xor ax, ax ; ret
0x0000000000036292 : or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x00000000000363a5 : or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000001a4582 : or r8d, dword ptr [r8] ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a5473 : or r8d, dword ptr [rax] ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; and al, 0xbb ; add byte ptr [rax], al ; xor bh, bl ; cld ; call qword ptr [rax]
0x00000000001ac99a : or rax, qword ptr [r8] ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x0000000000036b97 : or rax, qword ptr [rdx] ; mov qword ptr [rdi], rax ; xor eax, eax ; ret
0x0000000000036aad : or rcx, qword ptr [rdx + rax*8] ; mov qword ptr [rdi + rax*8], rcx ; xor eax, eax ; pop rbx ; ret
0x000000000019caae : or rdx, qword ptr [rax + r8] ; add byte ptr [rax], al ; pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000000559be : or word ptr [rsi + 0xe], r12w ; xor eax, eax ; mov qword ptr [rdi], r13 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007fa53 : out -8, eax ; cmp rdx, rdi ; je 0x7f9e5 ; nop ; xor eax, eax ; ret
0x00000000001141a6 : out 0x31, eax ; ror byte ptr [rcx - 0x7d], 0xc7 ; xor al, ch ; out dx, al ; ret
0x0000000000050965 : out 0x31, eax ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000070ec0 : out 0x48, al ; mov edi, ebx ; xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x0000000000035619 : out 0x48, al ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000012d738 : out 0x48, eax ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000ca1c3 : out 0x48, eax ; cmove ecx, eax ; xor eax, eax ; call 0x56489
0x000000000013ddac : out 0x4c, eax ; mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x0000000000104b16 : out 0xa, al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000003b4fe : out 0xec, al ; fiadd word ptr [rip + 0x48000000] ; mov dword ptr [rsi + 0x10], eax ; xor eax, eax ; ret
0x0000000000098ccb : out dx, al ; add dword ptr [rbp - 0xf], esi ; xor eax, eax ; ret
0x0000000000098c0b : out dx, al ; add dword ptr [rbp - 0xf], esi ; xor edi, edi ; mov rax, rdi ; ret
0x00000000000794cf : out dx, al ; cmp qword ptr [rdi + 0x10], rax ; jb 0x794ce ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x0000000000130955 : out dx, al ; dec dword ptr [rax - 0x7b] ; ror byte ptr [rax - 0x77], 0xc3 ; jne 0x1308ff ; xor eax, eax ; pop rbx ; ret
0x000000000012e64a : out dx, al ; mov rcx, rbx ; add rdi, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000013079d : out dx, al ; mov rcx, rbx ; add rdi, 0x23b0 ; xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x00000000001307e3 : out dx, al ; mov rcx, rbx ; pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x000000000013ddaf : out dx, al ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd63 : out dx, al ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013ddb2 : out dx, eax ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd66 : out dx, eax ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013dd60 : out dx, eax ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000008f836 : out dx, eax ; mul byte ptr [rsi + 0xf] ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x000000000016b78d : out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000002f2a9 : out dx, eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001874f8 : out dx, eax ; xor ah, 0xff ; stc ; xor ah, 0xff ; add eax, dword ptr [rcx - 0x7ef2000c] ; hlt ; call qword ptr [rdi]
0x000000000010c059 : out dx, eax ; xor byte ptr [rcx], dh ; rol byte ptr [rbx - 0x69f0f601], 0xc0 ; ret
0x000000000013a406 : out dx, eax ; xor eax, eax ; call 0x56655
0x000000000012fe0e : out dx, eax ; xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x00000000000484f0 : out dx, eax ; xor eax, eax ; ret
0x000000000008a772 : outsb dx, byte ptr [rsi] ; nop ; xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; ret
0x000000000008f831 : outsd dx, dword ptr [rsi] ; pop rdi ; and byte ptr [rsi + 0xf], ah ; out dx, eax ; mul byte ptr [rsi + 0xf] ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x000000000007b005 : outsd dx, dword ptr [rsi] ; pop rsi ; xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov rax, -1 ; ret
0x000000000016b788 : outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000008f83a : outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x00000000000aa276 : outsd dx, dword ptr [rsi] ; push rsi ; adc bl, dh ; movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa216 : outsd dx, dword ptr [rsi] ; push rsi ; or eax, 0x77f0ff3 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa256 : outsd dx, dword ptr [rsi] ; push rsi ; psllq mm1, qword ptr [rdi] ; jg 0xaa275 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x000000000003010d : outsd dx, dword ptr [rsi] ; sub dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000079f6c : outsd dx, dword ptr [rsi] ; xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000ba58d : outsd dx, dword ptr [rsi] ; xor dword ptr [rax], 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000090dbf : pcmpeqb mm1, qword ptr [rdi + 0x10] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0x90e2f ; xor rax, rax ; ret
0x00000000000a0c10 : pcmpeqb mm1, qword ptr [rdi + 0x20] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c9e ; xor eax, eax ; ret
0x00000000000a0bd4 : pcmpeqb mm1, qword ptr [rdi] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c71 ; xor eax, eax ; ret
0x00000000000abcd8 : pcmpeqb mm2, qword ptr [rip + 0x3b30478b] ; xor byte ptr [rbp + 0x3d], r14b ; ret
0x0000000000090dbe : pcmpeqb xmm1, xmmword ptr [rdi + 0x10] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0x90e30 ; xor rax, rax ; ret
0x00000000000a0c0f : pcmpeqb xmm1, xmmword ptr [rdi + 0x20] ; pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c9f ; xor eax, eax ; ret
0x00000000000a0bd6 : pcmpgtd mm1, qword ptr [rdi] ; xlatb ; rol dword ptr [rbp + 0x7d850fc0], 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000090dc4 : pmovmskb eax, mm1 ; test eax, eax ; jne 0x90e2a ; xor rax, rax ; ret
0x0000000000090d84 : pmovmskb eax, mm1 ; test eax, eax ; jne 0x90e4e ; xor rax, rax ; ret
0x00000000000a0bd8 : pmovmskb eax, mm1 ; test eax, eax ; jne 0xa0c6d ; xor eax, eax ; ret
0x00000000000a0c15 : pmovmskb eax, mm1 ; test eax, eax ; jne 0xa0c99 ; xor eax, eax ; ret
0x0000000000090dc3 : pmovmskb eax, xmm1 ; test eax, eax ; jne 0x90e2b ; xor rax, rax ; ret
0x0000000000090d83 : pmovmskb eax, xmm1 ; test eax, eax ; jne 0x90e4f ; xor rax, rax ; ret
0x00000000000a0bd7 : pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c6e ; xor eax, eax ; ret
0x00000000000a0c14 : pmovmskb eax, xmm1 ; test eax, eax ; jne 0xa0c9a ; xor eax, eax ; ret
0x000000000008b613 : pop r9 ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000013e147 : pop rax ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008426c : pop rax ; retf ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x0000000000111c7d : pop rax ; xor byte ptr [rcx - 0x75], al ; or byte ptr [r13 - 0x7c968b40], r8b ; call 0xffffffffc39a689d
0x0000000000128a5d : pop rax ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000f101f : pop rbp ; add byte ptr [rcx - 0x77], cl ; add al, 0x24 ; je 0xf1009 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001307e8 : pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x00000000000fe467 : pop rbp ; sub ch, byte ptr [rax + rax] ; mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4af ; ret
0x0000000000114ec1 : pop rbp ; xor eax, eax ; pop rbx ; ret
0x00000000000e0a88 : pop rbx ; mov dword ptr [r12 + 4], r14d ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007dea9 : pop rbx ; mov ecx, edx ; xor edx, edx ; jmp rax
0x00000000001307e7 : pop rbx ; pop rbp ; add rdi, 0x23b0 ; xor eax, eax ; jmp rcx
0x000000000011f8f5 : pop rbx ; xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000d6dad : pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000e0ae6 : pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000096606 : pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000007de72 : pop rbx ; xor edx, edx ; jmp rax
0x00000000000a058b : pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x000000000008b55c : pop rcx ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x000000000008f832 : pop rdi ; and byte ptr [rsi + 0xf], ah ; out dx, eax ; mul byte ptr [rsi + 0xf] ; outsd dx, dword ptr [rsi] ; push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x0000000000116bd2 : pop rdx ; sti ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116bea ; xor eax, eax ; ret
0x00000000000301a2 : pop rdx ; sub dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000013a391 : pop rsi ; add rsp, 0x158 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007b006 : pop rsi ; xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov rax, -1 ; ret
0x0000000000100c64 : pop rsp ; xor al, 0x2c ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx + 0x5d] ; pop r12 ; ret
0x000000000019cab4 : pop rsp ; xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x00000000000aff3d : popfq ; xor al, byte ptr [rax + rax] ; add cl, ch ; ret 0xfff3
0x00000000000aa0d6 : psllq mm1, qword ptr [rdi] ; jg 0xaa0ef ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa0d5 : psllq mm1, qword ptr [rdi] ; jg 0xaa0f0 ; mov dword ptr [rdi + 0xf], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa157 : psllq mm1, qword ptr [rdi] ; jg 0xaa171 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa156 : psllq mm1, qword ptr [rdi] ; jg 0xaa172 ; mov qword ptr [rdi + 0xf], rcx ; xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa258 : psllq mm1, qword ptr [rdi] ; jg 0xaa273 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x0000000000076b7d : push 0 ; lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000acd86 : push 0 ; xor r8d, r8d ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000f7044 : push 0x4538908 ; add rsp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000116cc2 : push 0xfa ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116cda ; xor eax, eax ; ret
0x00000000001169c2 : push 0xfd ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x1169da ; xor eax, eax ; ret
0x00000000000ad107 : push 1 ; push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad195 : push 1 ; xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad109 : push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000019393f : push qword ptr [rax + 0x30] ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x0000000000193983 : push qword ptr [rax] ; xor bh, ah ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x00000000001706e8 : push qword ptr [rbp + 0x1a] ; xor eax, eax ; ret
0x0000000000121a67 : push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000145875 : push qword ptr [rbp + 5] ; mov dword ptr fs:[rbx], ebp ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b018 : push qword ptr [rbp - 0x13] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000117802 : push qword ptr [rbp - 0xe] ; xor eax, eax ; leave ; ret
0x0000000000047ff6 : push qword ptr [rbx + 3] ; xor eax, eax ; ret
0x000000000003639a : push qword ptr [rbx + rdx - 0x48] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000005961b : push qword ptr [rcx] ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000002d1b1 : push r15 ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000074576 : push rax ; adc byte ptr [rax - 0x77], cl ; jo 0x745cc ; lea rdx, qword ptr [rdx + rcx*4] ; mov qword ptr [rax], rdx ; xor eax, eax ; ret
0x00000000001932f0 : push rax ; cmp ebx, 0xff ; xor byte ptr [rbp - 0x78ef0005], al ; sti ; jmp rax
0x00000000001821b5 : push rax ; jae 0x1821da ; lodsd eax, dword ptr [rsi] ; xor eax, 0x444be0a8 ; sar byte ptr [rsi + rax*2], 0xf8 ; mov ch, 0x36 ; push rcx ; call qword ptr [rsi]
0x00000000000fd829 : push rax ; mov qword ptr [rsi + 0x50], r8 ; test al, 0x20 ; je 0xfd851 ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x0000000000076b7c : push rax ; push 0 ; lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000fd82d : push rax ; test al, 0x20 ; je 0xfd84d ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x00000000000fd82c : push rax ; test al, 0x20 ; je 0xfd84e ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x000000000013e142 : push rax ; test eax, eax ; jne 0x13e1ae ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e212 : push rax ; test eax, eax ; jne 0x13e27e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e2 : push rax ; test eax, eax ; jne 0x13e34e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a2 : push rax ; test eax, eax ; jne 0x13e40e ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000078482 : push rbp ; xor byte ptr [rax - 0x77], cl ; push rbx ; sbb byte ptr [rbx + 0x5d], bl ; pop r12 ; ret
0x0000000000074305 : push rbp ; xor byte ptr [rbx + 0x374fff8], al ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000007e4ec : push rbp ; xor byte ptr [rbx - 0x438a0008], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000117660 : push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x0000000000090dca : push rbp ; xor rax, rax ; ret
0x00000000001176c9 : push rbx ; adc byte ptr [rcx + rbx + 0x48], dh ; add esp, 8 ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000000f7047 : push rbx ; add al, 0x48 ; add esp, 8 ; xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000f849a : push rbx ; add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000011257c : push rbx ; and byte ptr [rax + 0x2b], cl ; xor r9b, bpl ; ret
0x000000000002d50b : push rbx ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000008fd29 : push rbx ; cmp esi, dword ptr [rbx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003a933 : push rbx ; je 0x3a97b ; xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a94b ; pop rbx ; ret
0x00000000000aa2f2 : push rbx ; movq qword ptr [rdi + 0x30], mm7 ; xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000dfce9 : push rbx ; sub byte ptr [rax - 0x75], cl ; xor eax, dword ptr [rcx] ; ret 0x6348
0x000000000006da6d : push rbx ; xor al, 0x48 ; lea ecx, dword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x000000000006d76a : push rbx ; xor al, 0xbe ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x00000000000299d4 : push rbx ; xor byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000bbb04 : push rbx ; xor byte ptr [rax], al ; xor ebx, ebx ; mov dword ptr fs:[rax], 0x4b ; mov rax, rbx ; pop rbx ; ret
0x0000000000130dce : push rcx ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000002d71b : push rcx ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000116853 : push rcx ; std ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000002d13b : push rdi ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000016b789 : push rdi ; xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000008f83b : push rdi ; xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x0000000000100f8d : push rdi ; xor dword ptr [rax + rax], ebp ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000f84e5 : push rdx ; add byte ptr [rax], al ; xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000013818d : push rdx ; or byte ptr [rax - 0x77], cl ; xor byte ptr [r8 - 0x77], r9b ; push rdi ; cmp byte ptr [rax + 1], bh ; ret
0x00000000000bbc14 : push rdx ; xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000bbbf4 : push rdx ; xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000aa118 : push rsi ; adc al, 0xf3 ; movq qword ptr [rdi], mm0 ; mov dword ptr [rdi + 0x10], ecx ; mov byte ptr [rdi + 0x14], dl ; xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa277 : push rsi ; adc bl, dh ; movq qword ptr [rdi], mm0 ; movdqu xmmword ptr [rdi + 0x10], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa025 : push rsi ; add eax, 0x480f8948 ; mov dword ptr [rdi + 5], edx ; xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000a9f83 : push rsi ; add ecx, dword ptr [rcx + 0x357890f] ; xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000f7285 : push rsi ; jo 0xf72df ; mov eax, dword ptr [rdi + 0x80] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000f7e02 : push rsi ; jo 0xf7e5c ; mov eax, dword ptr [rdi + 0x100] ; mov qword ptr [rsi + 0x78], rax ; xor eax, eax ; ret
0x00000000000aa217 : push rsi ; or eax, 0x77f0ff3 ; movdqu xmmword ptr [rdi + 0xd], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa257 : push rsi ; psllq mm1, qword ptr [rdi] ; jg 0xaa274 ; movdqu xmmword ptr [rdi + 0xf], xmm2 ; xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000fcbe7 : push rsi ; xor ax, ax ; ret
0x000000000016b78e : push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x0000000000025ee6 : push rsi ; xor eax, 0x89410000 ; ret
0x000000000008b894 : push rsi ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000139625 : push rsp ; and al, 0xc ; xor eax, eax ; test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x00000000000360c5 : push rsp ; and al, 8 ; mov dword ptr [rbx + 8], edx ; xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x00000000001acaac : push rsp ; xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x0000000000198634 : pushfq ; add dword ptr [rax], eax ; xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x00000000001b35fd : pushfq ; add dword ptr [rax], eax ; xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000000328e0 : pushfq ; add dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000030560 : pushfq ; and eax, 0xc1480039 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000197fe4 : pushfq ; enter 1, -0x4c ; xor edi, eax ; jmp rsp
0x0000000000198edc : pushfq ; xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x000000000013ebee : pxor mm0, mm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x0000000000034ddf : pxor mm4, mm4 ; ucomisd xmm0, xmm4 ; jp 0x34dff ; jne 0x34dff ; addsd xmm0, xmm0 ; ret
0x00000000000350fc : pxor mm4, mm4 ; ucomiss xmm0, xmm4 ; jp 0x3511e ; jne 0x3511e ; addss xmm0, xmm0 ; ret
0x000000000013ebed : pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x0000000000034dde : pxor xmm4, xmm4 ; ucomisd xmm0, xmm4 ; jp 0x34e00 ; jne 0x34e00 ; addsd xmm0, xmm0 ; ret
0x00000000000350fb : pxor xmm4, xmm4 ; ucomiss xmm0, xmm4 ; jp 0x3511f ; jne 0x3511f ; addss xmm0, xmm0 ; ret
0x00000000001307a9 : rcr byte ptr [rbx + 0x5d], 0xff ; loope 0x130824 ; nop ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000f71bc : rcr byte ptr [rbx - 0x3d], 0x90 ; xor eax, eax ; pop rbx ; ret
0x00000000001a643d : retf 0 ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x000000000003a23b : retf 0x6411 ; xor rdx, qword ptr [0x30] ; call rdx
0x00000000001a646d : retf ; add byte ptr [rax], al ; xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x000000000008426d : retf ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x00000000000365b0 : rol bl, 0x66 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000090f9d : rol bl, 1 ; nop ; xor eax, eax ; ret
0x000000000014d5e4 : rol bl, 1 ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000002145a : rol byte ptr [rbp + 0x31], 0xc0 ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000365ab : rol byte ptr [rbp - 0x3f6bf02e], 0xc3 ; nop word ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000170706 : rol byte ptr [rbx + 0xfc3ffd8], 0x1f ; add byte ptr [rax], r8b ; xor eax, eax ; ret
0x00000000000ac012 : rol byte ptr [rbx], 0xc3 ; nop ; nop word ptr cs:[rax + rax] ; xor rax, rax ; ret
0x00000000001327e9 : rol byte ptr [rcx - 0x7f], 1 ; loopne 0x13282b ; xor esi, dword ptr [rbx] ; xor ecx, dword ptr [rbp + 0x31] ; ret 0xc149
0x00000000000484ea : rol byte ptr [rcx], 0x48 ; cmp eax, edx ; jne 0x484e9 ; xor eax, eax ; ret
0x0000000000098cc7 : rol byte ptr [rcx], 0x48 ; sub esi, 1 ; jne 0x98cca ; xor eax, eax ; ret
0x0000000000131c7e : rol dword ptr [rax], 0 ; test eax, eax ; jne 0x131c9f ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000a0bda : rol dword ptr [rbp + 0x7d850fc0], 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000090d86 : rol dword ptr [rbp - 0x4e7af040], 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x0000000000098c07 : rol dword ptr [rcx], 0x48 ; sub esi, 1 ; jne 0x98c0d ; xor edi, edi ; mov rax, rdi ; ret
0x00000000000a0504 : rol dword ptr [rcx], 0xf ; mov dh, 0x11 ; test dl, dl ; jne 0xa0507 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0582 : rol dword ptr [rcx], 0xf ; mov dh, 0x11 ; test dl, dl ; jne 0xa0578 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000363e5 : rol eax, cl ; and qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000363e4 : rol rax, cl ; and qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000362b4 : ror byte ptr [rax + 0x21], 1 ; add al, 0xd7 ; xor eax, eax ; ret
0x00000000000363e6 : ror byte ptr [rax + 0x21], 7 ; xor eax, eax ; ret
0x0000000000116668 : ror byte ptr [rax + 0x48], 0x39 ; sal byte ptr [rdx - 0xf], 1 ; xor eax, eax ; ret
0x00000000000c04a1 : ror byte ptr [rax - 0x73], 0x15 ; xchg eax, edi ; xor byte ptr ss:[rax], al ; jne 0xc04c9 ; mov rax, rdx ; add rsp, 8 ; ret
0x0000000000130959 : ror byte ptr [rax - 0x77], 0xc3 ; jne 0x1308fb ; xor eax, eax ; pop rbx ; ret
0x000000000013626f : ror byte ptr [rax - 0x7d], 0xc4 ; xor byte ptr [rbx + 0xf], bl ; mov dh, 0xc0 ; pop rbp ; pop r12 ; ret
0x00000000000a0c72 : ror byte ptr [rax - 0x7d], 0xea ; xor byte ptr [rax + 1], cl ; ret 0x547c
0x000000000008fabb : ror byte ptr [rax - 0x7f], 0xc4 ; add byte ptr [rcx], al ; add byte ptr [rax], al ; xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x00000000000868d0 : ror byte ptr [rax], 0x48 ; cmp edx, eax ; ja 0x868d2 ; xor eax, eax ; ret
0x0000000000098338 : ror byte ptr [rcx - 0x75], cl ; xor al, 0x24 ; test rsi, rsi ; jne 0x98357 ; jmp 0x98311
0x00000000001141a8 : ror byte ptr [rcx - 0x7d], 0xc7 ; xor al, ch ; out dx, al ; ret
0x00000000000a0bdc : ror byte ptr [rdi], 0x85 ; jge 0xa0bea ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000090d88 : ror byte ptr [rdi], 0x85 ; mov cl, 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x000000000013626c : ror byte ptr [rdi], 0x95 ; ror byte ptr [rax - 0x7d], 0xc4 ; xor byte ptr [rbx + 0xf], bl ; mov dh, 0xc0 ; pop rbp ; pop r12 ; ret
0x0000000000132cdf : ror byte ptr [rdi], 0xb6 ; shr bl, 0xab ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000365ad : ror byte ptr [rdi], cl ; xchg eax, esp ; rol bl, 0x66 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000104aca : ror byte ptr [rdx], cl ; add byte ptr [rax], al ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000003628a : ror dword ptr [rax - 0x2d], -0x1e ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x00000000000362aa : ror dword ptr [rax - 0x2d], 1 ; loopne 0x36308 ; shr edx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x000000000003b22c : ror dword ptr [rcx + 0x10e9c117], 1 ; and ecx, 0x3ff ; xor eax, ecx ; ret
0x00000000000759e3 : ror dword ptr [rcx - 0x77], 0x47 ; and byte ptr [rcx - 0x77], cl ; xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x000000000016c2b8 : ror dword ptr [rdi], -0x7b ; adc byte ptr [rdx], cl ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c9c4 : ror dword ptr [rdi], -0x7b ; add al, 3 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016d8c0 : ror dword ptr [rdi], -0x7b ; cmp al, 2 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016ca54 : ror dword ptr [rdi], -0x7b ; je 0x16ca64 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c54b : ror dword ptr [rdi], -0x7b ; jno 0x16c560 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c613 : ror dword ptr [rdi], -0x7b ; mov ch, 6 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c290 : ror dword ptr [rdi], -0x7b ; sub al, 0xa ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000020741 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb60 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003561b : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000f76aa : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov edi, 1 ; call rax
0x0000000000047bbd : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86c : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x00000000001174f3 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; test rax, rax ; je 0x117541 ; call rax
0x000000000004dae1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000012b797 : ror edi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a23a : ror edx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000020740 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb5f : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003561a : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000047bbc : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000002f5f0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x000000000004dae0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000012b796 : ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a239 : ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000001462b5 : sal byte ptr [rax + rbx - 0x80], 0x7c ; and al, 0xf ; add byte ptr [rbp + 0x29], dh ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000000206fd : sal byte ptr [rax + rdx + 0x48], 0xc1 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012fd55 : sal byte ptr [rbp + 0x10], 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132c3c : sal byte ptr [rbp + 0x11], 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f42b : sal byte ptr [rbp + 0x12], 0x48 ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130dcc : sal byte ptr [rbp + 0x51], 0x48 ; add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000090dc8 : sal byte ptr [rbp + 0x55], 0x48 ; xor eax, eax ; ret
0x000000000013e145 : sal byte ptr [rbp + 0x58], 0x48 ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000acfc5 : sal byte ptr [rbp + 0x74], 0x48 ; add esp, 0x60 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012f2c2 : sal byte ptr [rbp + 0xb], 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a87 : sal byte ptr [rbp + 0xe], 0x48 ; add esp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130854 : sal byte ptr [rbp + 9], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000484ee : sal byte ptr [rbp - 0x11], 1 ; xor eax, eax ; ret
0x00000000000a050a : sal byte ptr [rbp - 0x15], cl ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0588 : sal byte ptr [rbp - 0x23], cl ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000dfc58 : sal byte ptr [rbp - 0x2b], 0x89 ; sub al, 0x89 ; xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000ff6b1 : sal byte ptr [rbp - 0x2c], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000076a01 : sal byte ptr [rbp - 0x2d], 0x48 ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000ff882 : sal byte ptr [rbp - 0x2d], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000125eab : sal byte ptr [rbp - 0x2e], 1 ; mov qword ptr [rsi], rcx ; xor eax, eax ; ret
0x0000000000076af9 : sal byte ptr [rbp - 0x35], 0x48 ; add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000076939 : sal byte ptr [rbp - 0x37], 0x48 ; add esp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000db19d : sal byte ptr [rbp - 0x40], cl ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f37f : sal byte ptr [rbp - 0x42], 0x48 ; add esp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000002145d : sal byte ptr [rcx], 0xc9 ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10d : sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000013ddaa : sal byte ptr [rdi + 0x4c], 0x89 ; out dx, al ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x00000000000f8103 : sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000011666c : sal byte ptr [rdx - 0xf], 1 ; xor eax, eax ; ret
0x00000000000dfcac : sal byte ptr [rdx - 1], 0xff ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000114ebb : sal dh, 1 ; sbb al, 0x20 ; je 0x114f29 ; xor eax, eax ; pop rbx ; ret
0x000000000016db04 : sal dword ptr [rbp + 0xf], 0x48 ; shr ecx, 0x20 ; shr rax, 0x20 ; cmp ecx, eax ; jne 0x16db27 ; xor eax, eax ; ret
0x000000000013e7a4 : sal dword ptr [rbx + 9], 1 ; xor eax, eax ; ret
0x0000000000147063 : sal ebp, 0x27 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x000000000012fd51 : salc ; add byte ptr [rax], al ; test eax, eax ; jne 0x12fd77 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000048686 : salc ; jne 0x4867d ; xor eax, eax ; ret
0x00000000001307f1 : sar bh, 0xe1 ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000cd23b : sar byte ptr [rax + 0x12], 0x64 ; mov dword ptr [rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000002b02a : sar byte ptr [rax + 0x39], cl ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ce353 : sar byte ptr [rdi - 0xe], 0x48 ; lea esp, dword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x00000000001360a9 : sar dword ptr [rbp - 0x77c0001], cl ; add dword ptr [rsi + 0xe], edi ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000076efc : sar eax, 2 ; mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x0000000000116a33 : sar ebx, 0x2a ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x000000000003a8b4 : sar edx, 0x1f ; xor eax, edx ; sub eax, edx ; ret
0x000000000003a8c7 : sar edx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x0000000000076efb : sar rax, 2 ; mov qword ptr [rcx], rax ; xor eax, eax ; pop rbx ; ret
0x000000000003a8c6 : sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
0x00000000001a7168 : sbb al, 0 ; add byte ptr [rax], al ; adc al, 0xd8 ; add byte ptr [rax], al ; xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x000000000007921a : sbb al, 0 ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000001aa988 : sbb al, 0 ; add byte ptr [rax], al ; xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x00000000000795da : sbb al, 0 ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000114ebe : sbb al, 0x20 ; je 0x114f26 ; xor eax, eax ; pop rbx ; ret
0x0000000000114ebd : sbb al, 0x20 ; je 0x114f27 ; xor eax, eax ; pop rbx ; ret
0x00000000000aff3c : sbb al, 0x9d ; xor al, byte ptr [rax + rax] ; add cl, ch ; ret 0xfff3
0x000000000019867c : sbb al, 0xf4 ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000116b12 : sbb bh, ah ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116b2a ; xor eax, eax ; ret
0x0000000000116812 : sbb bh, bh ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x11682a ; xor eax, eax ; ret
0x000000000013e6c8 : sbb bl, al ; nop word ptr [rax + rax] ; xor eax, eax ; ret
0x00000000000aa19a : sbb bl, dh ; movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov byte ptr [rdi + 0x18], cl ; xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1fa : sbb bl, dh ; movq qword ptr [rdi], mm0 ; mov qword ptr [rdi + 0x10], rdx ; mov dword ptr [rdi + 0x18], ecx ; xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000001462b7 : sbb byte ptr [rax + 0xf247c], al ; jne 0x1462f6 ; xor eax, eax ; add rsp, 0x48 ; ret
0x000000000003a280 : sbb byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000007de67 : sbb byte ptr [rax - 0x75], cl ; add rsp, 0x20 ; mov ecx, edx ; pop rbx ; xor edx, edx ; jmp rax
0x0000000000139e4f : sbb byte ptr [rax - 0x75], cl ; and al, 8 ; mov qword ptr [rbx], rax ; xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000001b5c8d : sbb byte ptr [rcx + 0xe], al ; adc byte ptr [rcx + 0xe], al ; or byte ptr [rax + 0xb], cl ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret
0x00000000001b5bb0 : sbb byte ptr [rcx + 0xe], al ; adc byte ptr [rcx + 0xe], al ; or byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; ret 1
0x00000000000909ea : sbb ch, byte ptr [rdi] ; xor eax, dword ptr [rax] ; add rsp, 0x100 ; ret
0x00000000001374c3 : sbb dword ptr [rax + 0x3d8d4800], ebp ; xor eax, 0x748b0005 ; ret 0x4804
0x00000000000a07a6 : sbb dword ptr [rax - 0x7d], ecx ; mov dword ptr [rcx], 0x7be0f44 ; test r8b, r8b ; jne 0xa07a0 ; xor eax, eax ; ret
0x00000000000aadee : sbb dword ptr [rbx + 0xc7402f8], eax ; xor eax, eax ; ret
0x00000000000365a0 : sbb dword ptr [rbx - 0x367af7b1], ecx ; jne 0x365cb ; mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x00000000000a5a0d : sbb eax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x00000000000fe7f7 : sbb eax, 0x48002c7f ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000005646e : sbb eax, eax ; xor al, al ; add eax, 0x107 ; mov dword ptr [rdx], eax ; mov eax, 1 ; ret
0x0000000000116c73 : sbb edx, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000000a5a0c : sbb rax, -1 ; xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x0000000000100b7e : scasb al, byte ptr [rdi] ; xor al, 0x2c ; add byte ptr [rax - 0x76b7ffc8], al ; ret
0x0000000000075ef9 : scasd eax, dword ptr [rdi] ; xor al, 0 ; mov dword ptr fs:[rax], 9 ; mov eax, 0xffffffff ; ret
0x0000000000021458 : sete al ; xor r8d, r8d ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x000000000003552a : sete dh ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000035529 : sete sil ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000112a3e : shl dword ptr [rax + rcx*2 - 0x75], 1 ; xor byte ptr [rdi], cl ; mov esi, 0xbe0f48cb ; ret
0x00000000000363a3 : shl eax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000362ac : shl eax, cl ; shr rdx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x00000000000dff2a : shl edx, 2 ; xor esi, esi ; call 0x91819
0x000000000003628c : shl edx, cl ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x00000000000363a2 : shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x00000000000362ab : shl rax, cl ; shr rdx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x00000000000dff29 : shl rdx, 2 ; xor esi, esi ; call 0x9181a
0x000000000003628b : shl rdx, cl ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x0000000000103502 : shr al, 0x48 ; xor ebp, esi ; lcall ptr [rax + 0x48] ; mov eax, ebx ; pop rdx ; pop rbx ; ret
0x0000000000132ce2 : shr bl, 0xab ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000146a61 : shr bl, 0xe5 ; nop dword ptr [rax] ; xor eax, eax ; ret
0x0000000000090f9b : shr byte ptr [rcx], cl ; rol bl, 1 ; nop ; xor eax, eax ; ret
0x0000000000193938 : shr byte ptr [rip + 0x2f20fffc], 1 ; cld ; push qword ptr [rax + 0x30] ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x0000000000103a9d : shr dword ptr [rbx], cl ; add byte ptr [rdi + rax*8], ah ; or al, 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016db0c : shr eax, 0x20 ; cmp ecx, eax ; jne 0x16db1f ; xor eax, eax ; ret
0x000000000003b5d5 : shr eax, 0x20 ; shr rdx, 0x10 ; mov word ptr [rdi + 4], ax ; xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x0000000000108ec8 : shr eax, 0xc ; xor al, al ; or eax, edi ; ret
0x0000000000126730 : shr eax, 3 ; mov ecx, eax ; xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x000000000003628f : shr eax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x000000000003b22f : shr ecx, 0x10 ; and ecx, 0x3ff ; xor eax, ecx ; ret
0x000000000016db08 : shr ecx, 0x20 ; shr rax, 0x20 ; cmp ecx, eax ; jne 0x16db23 ; xor eax, eax ; ret
0x000000000003b5d9 : shr edx, 0x10 ; mov word ptr [rdi + 4], ax ; xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x0000000000033eee : shr edx, 0x18 ; and rax, rcx ; xor rax, rdx ; movzx edx, byte ptr [rdi] ; test dl, dl ; jne 0x33ee8 ; ret
0x00000000000aad94 : shr edx, 6 ; mov eax, edx ; xor edx, edx ; and eax, 0x3fffc00 ; div ecx ; pop rbx ; mov eax, eax ; ret
0x00000000000362af : shr edx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x000000000016db0b : shr rax, 0x20 ; cmp ecx, eax ; jne 0x16db20 ; xor eax, eax ; ret
0x0000000000108ec7 : shr rax, 0xc ; xor al, al ; or eax, edi ; ret
0x000000000003628e : shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
0x000000000016db07 : shr rcx, 0x20 ; shr rax, 0x20 ; cmp ecx, eax ; jne 0x16db24 ; xor eax, eax ; ret
0x000000000003b5d8 : shr rdx, 0x10 ; mov word ptr [rdi + 4], ax ; xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x00000000000362ae : shr rdx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
0x0000000000116b23 : stc ; cli ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000019867a : stc ; lcall ptr [rsp + rsi*8] ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000008b55b : stc ; pop rcx ; xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000116ca4 : stc ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x00000000001874fc : stc ; xor ah, 0xff ; add eax, dword ptr [rcx - 0x7ef2000c] ; hlt ; call qword ptr [rdi]
0x000000000007f247 : stc ; xor al, 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x00000000000d607c : stc ; xor eax, eax ; mov rdx, r8 ; jmp 0xd609f
0x000000000013a590 : std ; inc dword ptr [rax] ; add byte ptr [rax], al ; mov byte ptr [rax], 0 ; jle 0x13a5b8 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000116794 : std ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116933 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116949 ; xor eax, eax ; ret
0x0000000000116963 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116979 ; xor eax, eax ; ret
0x0000000000116993 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x1169a9 ; xor eax, eax ; ret
0x00000000001169c3 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x1169d9 ; xor eax, eax ; ret
0x00000000001169f3 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a09 ; xor eax, eax ; ret
0x0000000000116a23 : std ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a39 ; xor eax, eax ; ret
0x0000000000104ad0 : std ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000008fb05 : sti ; cmp eax, 0xc1480033 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002bbfe : sti ; or al, 0xf ; xchg edx, ebx ; add byte ptr [rax], al ; add byte ptr [rbx + 0x63], cl ; xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x000000000003b017 : sti ; push qword ptr [rbp - 0x13] ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000116b59 : sti ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000116a04 : sti ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116b73 : sti ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116b89 ; xor eax, eax ; ret
0x0000000000116ba3 : sti ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116bb9 ; xor eax, eax ; ret
0x0000000000116bd3 : sti ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116be9 ; xor eax, eax ; ret
0x0000000000116c03 : sti ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c19 ; xor eax, eax ; ret
0x00000000000b3307 : sti ; xor byte ptr [rax - 0x77], cl ; call 0x4ccdc826
0x00000000000b603f : sti ; xor byte ptr [rax - 0x77], cl ; call 0x4ccdf55e
0x000000000003c639 : sti ; xor dword ptr [rbp - 0x5f], 0xc6f7db31 ; add byte ptr [rax], al ; add byte ptr [rax], 0xf ; xchg eax, ebp ; ret
0x0000000000116a82 : stosb byte ptr [rdi], al ; cld ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a9a ; xor eax, eax ; ret
0x000000000002b052 : stosb byte ptr [rdi], al ; js 0x2b09f ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012c932 : stosb byte ptr [rdi], al ; xchg eax, ebx ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x0000000000132ce4 : stosd dword ptr [rdi], eax ; nop dword ptr [rax] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000fc509 : stosd dword ptr [rdi], eax ; xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000fcd45 : sub al, 0 ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000fe491 : sub al, 0 ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x00000000000fe469 : sub al, 0 ; mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4ad ; ret
0x00000000000fe789 : sub al, 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000011b0f2 : sub al, 0x24 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000010e413 : sub al, 0x24 ; je 0x10e434 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x00000000000983f4 : sub al, 0x24 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000f767c : sub al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000dfc5d : sub al, 0x89 ; xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000016c293 : sub al, 0xa ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000103097 : sub al, 0xff ; xor byte ptr [rdi], cl ; lahf ; ret 0xe883
0x0000000000116b5a : sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000116765 : sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000116784 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116798 ; xor eax, eax ; ret
0x00000000001167b4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1167c8 ; xor eax, eax ; ret
0x00000000001167e4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1167f8 ; xor eax, eax ; ret
0x0000000000116814 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116828 ; xor eax, eax ; ret
0x0000000000116844 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116858 ; xor eax, eax ; ret
0x0000000000116874 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116888 ; xor eax, eax ; ret
0x00000000001168a4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1168b8 ; xor eax, eax ; ret
0x00000000001168d4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1168e8 ; xor eax, eax ; ret
0x0000000000116904 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116918 ; xor eax, eax ; ret
0x0000000000116934 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116948 ; xor eax, eax ; ret
0x0000000000116964 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116978 ; xor eax, eax ; ret
0x0000000000116994 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1169a8 ; xor eax, eax ; ret
0x00000000001169c4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x1169d8 ; xor eax, eax ; ret
0x00000000001169f4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a08 ; xor eax, eax ; ret
0x0000000000116a24 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a38 ; xor eax, eax ; ret
0x0000000000116a54 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a68 ; xor eax, eax ; ret
0x0000000000116a84 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116a98 ; xor eax, eax ; ret
0x0000000000116ab4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116ac8 ; xor eax, eax ; ret
0x0000000000116ae4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116af8 ; xor eax, eax ; ret
0x0000000000116b14 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116b28 ; xor eax, eax ; ret
0x0000000000116b74 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116b88 ; xor eax, eax ; ret
0x0000000000116ba4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116bb8 ; xor eax, eax ; ret
0x0000000000116bd4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116be8 ; xor eax, eax ; ret
0x0000000000116c04 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c18 ; xor eax, eax ; ret
0x0000000000116c34 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c48 ; xor eax, eax ; ret
0x0000000000116c64 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c78 ; xor eax, eax ; ret
0x0000000000116c94 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116ca8 ; xor eax, eax ; ret
0x0000000000116cc4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116cd8 ; xor eax, eax ; ret
0x0000000000116cf4 : sub al, byte ptr [rax] ; test eax, eax ; jne 0x116d08 ; xor eax, eax ; ret
0x0000000000116c02 : sub bh, bl ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x116c1a ; xor eax, eax ; ret
0x000000000003004b : sub bh, byte ptr [rcx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000116902 : sub bh, dh ; sub al, byte ptr [rax] ; test eax, eax ; jne 0x11691a ; xor eax, eax ; ret
0x000000000013ea42 : sub bl, al ; nop ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x000000000012122f : sub bl, al ; nop dword ptr [rax] ; xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000048083 : sub byte ptr [r11 + r9*4 + 0x4f], r9b ; xor byte ptr [rax - 0x75], cl ; jg 0x48101 ; xor eax, eax ; ret
0x00000000000759df : sub byte ptr [r8 + 1], r9b ; ror dword ptr [rcx - 0x77], 0x47 ; and byte ptr [rcx - 0x77], cl ; xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x000000000013e7a1 : sub byte ptr [r9], r15b ; sal dword ptr [rbx + 9], 1 ; xor eax, eax ; ret
0x00000000000759e0 : sub byte ptr [rax + 1], cl ; ror dword ptr [rcx - 0x77], 0x47 ; and byte ptr [rcx - 0x77], cl ; xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x00000000000dfcea : sub byte ptr [rax - 0x75], cl ; xor eax, dword ptr [rcx] ; ret 0x6348
0x000000000013ab5b : sub byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000140914 : sub byte ptr [rax], al ; test eax, eax ; je 0x140928 ; xor eax, eax ; ret
0x0000000000104d94 : sub byte ptr [rax], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000000483b3 : sub byte ptr [rbx + r9*4 + 0x4e], r9b ; xor byte ptr [rax - 0x75], cl ; jbe 0x48439 ; xor eax, eax ; ret
0x00000000000483b4 : sub byte ptr [rbx + rcx*4 + 0x4e], cl ; xor byte ptr [rax - 0x75], cl ; jbe 0x48438 ; xor eax, eax ; ret
0x0000000000048084 : sub byte ptr [rbx + rcx*4 + 0x4f], cl ; xor byte ptr [rax - 0x75], cl ; jg 0x48100 ; xor eax, eax ; ret
0x0000000000030076 : sub byte ptr [rcx], bh ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000013e7a2 : sub byte ptr [rcx], bh ; sal dword ptr [rbx + 9], 1 ; xor eax, eax ; ret
0x00000000000fe490 : sub ch, byte ptr [rax + rax] ; mov qword ptr [rax], -1 ; xor eax, eax ; ret
0x00000000000fe468 : sub ch, byte ptr [rax + rax] ; mov qword ptr [rax], rdx ; xor eax, eax ; cmp rdi, rdx ; ja 0xfe4ae ; ret
0x000000000002b1d2 : sub dh, byte ptr [rdi + 0x39] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001726f3 : sub dword ptr [rax + 0x25], eax ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; jmp rax
0x0000000000125929 : sub dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; mov dword ptr [rdi + 0xc], edx ; mov qword ptr [rsi], rdi ; ret
0x000000000012e093 : sub dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000012aa43 : sub dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000012b794 : sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003059b : sub dword ptr [rcx + 0x39], esp ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003010e : sub dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ce52f : sub dword ptr [rdi], 0xc8c14800 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000016d8e9 : sub dword ptr [rdx], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000013ebe6 : sub dword ptr [rsp + 0x80], eax ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x0000000000193939 : sub eax, 0x2f20fffc ; cld ; push qword ptr [rax + 0x30] ; cld ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x00000000000e98d5 : sub eax, 0x36740000 ; xor eax, eax ; ret
0x000000000013084f : sub eax, 0x85fffff6 ; sal byte ptr [rbp + 9], 0x5b ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000f0773 : sub eax, 0xc8c14800 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000103aaf : sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x0000000000110585 : sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 0xc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000103a9e : sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x0000000000107745 : sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x0000000000077b74 : sub eax, dword ptr [rbx + 0x20] ; mov rdx, qword ptr [rbx + 0xf8] ; mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x000000000013e685 : sub eax, esi ; mov rdx, rax ; mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6af ; ret
0x0000000000130953 : sub eax, esi ; out dx, al ; dec dword ptr [rax - 0x7b] ; ror byte ptr [rax - 0x77], 0xc3 ; jne 0x130901 ; xor eax, eax ; pop rbx ; ret
0x0000000000116883 : sub ebp, edi ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000098cc4 : sub ecx, dword ptr [rax - 0x7d] ; rol byte ptr [rcx], 0x48 ; sub esi, 1 ; jne 0x98ccd ; xor eax, eax ; ret
0x000000000010c058 : sub edi, 0x30 ; xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x0000000000121a61 : sub edi, dword ptr [rbx - 0x77c000b] ; push qword ptr [rbp + 0xe] ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000003d174 : sub edx, eax ; lea rax, qword ptr [rdx + rdx*4] ; mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1cd
0x00000000000403bf : sub edx, eax ; lea rax, qword ptr [rdx + rdx*4] ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40416
0x0000000000098c0a : sub esi, 1 ; jne 0x98c0a ; xor edi, edi ; mov rax, rdi ; ret
0x0000000000098cca : sub esi, 1 ; jne 0x98cc7 ; xor eax, eax ; ret
0x000000000013ea41 : sub r11b, r8b ; nop ; nop word ptr cs:[rax + rax] ; xor eax, eax ; ret
0x0000000000077b73 : sub rax, qword ptr [rbx + 0x20] ; mov rdx, qword ptr [rbx + 0xf8] ; mov qword ptr [rdx], rax ; xor eax, eax ; pop rbx ; ret
0x000000000013e684 : sub rax, rsi ; mov rdx, rax ; mov ecx, eax ; xor eax, eax ; cmp rdx, rcx ; je 0x13e6b0 ; ret
0x00000000000403be : sub rdx, rax ; lea rax, qword ptr [rdx + rdx*4] ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40417
0x0000000000098c09 : sub rsi, 1 ; jne 0x98c0b ; xor edi, edi ; mov rax, rdi ; ret
0x0000000000098cc9 : sub rsi, 1 ; jne 0x98cc8 ; xor eax, eax ; ret
0x00000000000ce5ae : sub word ptr [rdi], 0x4800 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000047fef : syscall ; cmp rax, -0xfff ; jae 0x48008 ; xor eax, eax ; ret
0x00000000000c86ee : syscall ; xor edx, edx ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000000fd82e : test al, 0x20 ; je 0xfd84c ; xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x00000000000c80cf : test al, 0x2f ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000a07b0 : test al, al ; jne 0xa0796 ; xor eax, eax ; ret
0x00000000000a135a : test al, al ; jne 0xa1348 ; xor eax, eax ; sub eax, ecx ; ret
0x000000000008a928 : test bl, al ; add byte ptr [rax], al ; add bh, al ; add eax, 0x338eb1 ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000010518b : test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051ab : test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000006459f : test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003a5da : test byte ptr [rax - 0x3f], 0xca ; adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x00000000000fe33a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x98 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008d80a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013605a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; cmp dword ptr [rsi + 0x10], 0xc ; je 0x13607e ; xor eax, eax ; ret
0x00000000000a9efa : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov dl, byte ptr [rsi] ; mov byte ptr [rdi], dl ; xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000f736a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x00000000000f735a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x00000000000a9f3a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov edx, dword ptr [rsi] ; mov dword ptr [rdi], edx ; xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x000000000011b1ba : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr [rsi], rdi ; xor eax, eax ; ret
0x00000000000f7329 : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; nop ; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
0x000000000011765a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000000a9eea : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x000000000002de9a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x000000000013131a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000fd0aa : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; pop rbx ; ret
0x000000000003b02a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000078cca : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
0x000000000007c36a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; test rdx, rdx ; jne 0x7c38d ; ret
0x000000000006bc6a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x00000000000a0cca : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor rax, rax ; ret
0x0000000000035526 : test byte ptr [rbp - 0x6bf0bf40], 0xc6 ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000114ebc : test byte ptr [rbx + 0x1c], 0x20 ; je 0x114f28 ; xor eax, eax ; pop rbx ; ret
0x0000000000104e50 : test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052c0 : test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000000e25dd : test byte ptr [rcx], dh ; add al, byte ptr [rax] ; add byte ptr [rbx - 0x367afbb3], cl ; jle 0xe2670 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260f
0x0000000000104edc : test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104efc : test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001039f2 : test byte ptr [rdi], 0x84 ; mov cl, 0 ; add byte ptr [rax], al ; xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a18 ; ret
0x00000000000ce261 : test byte ptr [rdi], ch ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ce2d0 : test byte ptr [rdi], r13b ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000105429 : test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001050ff : test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf7 : test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000007f2b2 : test cl, 8 ; je 0x7f2d7 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x00000000000a0757 : test cl, cl ; jne 0xa074e ; xor eax, eax ; ret
0x00000000000746e2 : test dl, 8 ; je 0x74707 ; xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x00000000000a0509 : test dl, dl ; jne 0xa0502 ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x00000000000a0587 : test dl, dl ; jne 0xa0573 ; pop rbx ; xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x0000000000104ac9 : test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000065023 : test dword ptr [rax], ebx ; xor al, byte ptr [rax] ; add byte ptr [rbx - 0x4d76b], cl ; inc dword ptr [rbx - 0x78f0d006] ; ret
0x00000000000a0bde : test dword ptr [rbp], edi ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c577 : test dword ptr [rbx + 7], edx ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c9c6 : test dword ptr [rbx + rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000090d8a : test dword ptr [rcx + 0x48000000], esi ; xor eax, eax ; ret
0x000000000016c54d : test dword ptr [rcx + 7], esi ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c45d : test dword ptr [rcx + 8], esp ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c36d : test dword ptr [rcx + 9], edx ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016d8c2 : test dword ptr [rdx + rax], edi ; add byte ptr [rax], al ; xor eax, eax ; ret
0x000000000016c292 : test dword ptr [rdx + rcx], ebp ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000170592 : test dword ptr [rsi + 1], ebp ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000146467 : test eax, 0x90ff0027 ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x00000000000fdc8b : test eax, 0x90fffffe ; mov dword ptr fs:[r8], r12d ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000012d735 : test eax, eax ; je 0x12d72c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fef1 : test eax, eax ; je 0x12ff06 ; xor eax, eax ; ret
0x0000000000140916 : test eax, eax ; je 0x140926 ; xor eax, eax ; ret
0x00000000001462b4 : test eax, eax ; je 0x1462e1 ; cmp byte ptr [rsp + 0xf], 0 ; jne 0x1462f9 ; xor eax, eax ; add rsp, 0x48 ; ret
0x00000000000206fc : test eax, eax ; je 0x20721 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000c7c2e : test eax, eax ; je 0xc7c50 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f8102 : test eax, eax ; je 0xf815b ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000000ce352 : test eax, eax ; jg 0xce358 ; lea rsp, qword ptr [rbp - 0x18] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x0000000000116786 : test eax, eax ; jne 0x116796 ; xor eax, eax ; ret
0x00000000001167b6 : test eax, eax ; jne 0x1167c6 ; xor eax, eax ; ret
0x00000000001167e6 : test eax, eax ; jne 0x1167f6 ; xor eax, eax ; ret
0x0000000000116816 : test eax, eax ; jne 0x116826 ; xor eax, eax ; ret
0x0000000000116846 : test eax, eax ; jne 0x116856 ; xor eax, eax ; ret
0x0000000000116876 : test eax, eax ; jne 0x116886 ; xor eax, eax ; ret
0x00000000001168a6 : test eax, eax ; jne 0x1168b6 ; xor eax, eax ; ret
0x00000000001168d6 : test eax, eax ; jne 0x1168e6 ; xor eax, eax ; ret
0x0000000000116906 : test eax, eax ; jne 0x116916 ; xor eax, eax ; ret
0x0000000000116936 : test eax, eax ; jne 0x116946 ; xor eax, eax ; ret
0x0000000000116966 : test eax, eax ; jne 0x116976 ; xor eax, eax ; ret
0x0000000000116996 : test eax, eax ; jne 0x1169a6 ; xor eax, eax ; ret
0x00000000001169c6 : test eax, eax ; jne 0x1169d6 ; xor eax, eax ; ret
0x00000000001169f6 : test eax, eax ; jne 0x116a06 ; xor eax, eax ; ret
0x0000000000116a26 : test eax, eax ; jne 0x116a36 ; xor eax, eax ; ret
0x0000000000116a56 : test eax, eax ; jne 0x116a66 ; xor eax, eax ; ret
0x0000000000116a86 : test eax, eax ; jne 0x116a96 ; xor eax, eax ; ret
0x0000000000116ab6 : test eax, eax ; jne 0x116ac6 ; xor eax, eax ; ret
0x0000000000116ae6 : test eax, eax ; jne 0x116af6 ; xor eax, eax ; ret
0x0000000000116b16 : test eax, eax ; jne 0x116b26 ; xor eax, eax ; ret
0x0000000000116b76 : test eax, eax ; jne 0x116b86 ; xor eax, eax ; ret
0x0000000000116ba6 : test eax, eax ; jne 0x116bb6 ; xor eax, eax ; ret
0x0000000000116bd6 : test eax, eax ; jne 0x116be6 ; xor eax, eax ; ret
0x0000000000116c06 : test eax, eax ; jne 0x116c16 ; xor eax, eax ; ret
0x0000000000116c36 : test eax, eax ; jne 0x116c46 ; xor eax, eax ; ret
0x0000000000116c66 : test eax, eax ; jne 0x116c76 ; xor eax, eax ; ret
0x0000000000116c96 : test eax, eax ; jne 0x116ca6 ; xor eax, eax ; ret
0x0000000000116cc6 : test eax, eax ; jne 0x116cd6 ; xor eax, eax ; ret
0x0000000000116cf6 : test eax, eax ; jne 0x116d06 ; xor eax, eax ; ret
0x000000000012e0d1 : test eax, eax ; jne 0x12e0ec ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012f2c1 : test eax, eax ; jne 0x12f2dc ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012f37e : test eax, eax ; jne 0x12f350 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012f42a : test eax, eax ; jne 0x12f44c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd54 : test eax, eax ; jne 0x12fd74 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fd91 : test eax, eax ; jne 0x12fdac ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000012fe41 : test eax, eax ; jne 0x12fe5c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012fe91 : test eax, eax ; jne 0x12feac ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000012ff11 : test eax, eax ; jne 0x12ff2c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130853 : test eax, eax ; jne 0x13086a ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000130dcb : test eax, eax ; jne 0x130e2e ; add rsp, 0x10 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000131c81 : test eax, eax ; jne 0x131c9c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132a86 : test eax, eax ; jne 0x132aa4 ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132b21 : test eax, eax ; jne 0x132b3c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000132bbc : test eax, eax ; jne 0x132bdc ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000132c3b : test eax, eax ; jne 0x132c5c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013dd90 : test eax, eax ; jne 0x13de10 ; xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013e144 : test eax, eax ; jne 0x13e1ac ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e143 : test eax, eax ; jne 0x13e1ad ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e214 : test eax, eax ; jne 0x13e27c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e213 : test eax, eax ; jne 0x13e27d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e4 : test eax, eax ; jne 0x13e34c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e2e3 : test eax, eax ; jne 0x13e34d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a4 : test eax, eax ; jne 0x13e40c ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000013e3a3 : test eax, eax ; jne 0x13e40d ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000143aaa : test eax, eax ; jne 0x143abf ; xor eax, eax ; pop rbx ; ret
0x0000000000147056 : test eax, eax ; jne 0x147066 ; xor eax, eax ; ret
0x0000000000147086 : test eax, eax ; jne 0x147096 ; xor eax, eax ; ret
0x00000000001470b6 : test eax, eax ; jne 0x1470c6 ; xor eax, eax ; ret
0x00000000001470e6 : test eax, eax ; jne 0x1470f6 ; xor eax, eax ; ret
0x0000000000147116 : test eax, eax ; jne 0x147126 ; xor eax, eax ; ret
0x0000000000147146 : test eax, eax ; jne 0x147156 ; xor eax, eax ; ret
0x0000000000076a00 : test eax, eax ; jne 0x769e7 ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000801d5 : test eax, eax ; jne 0x8020a ; xor edi, edi ; call qword ptr [r15]
0x0000000000090dc7 : test eax, eax ; jne 0x90e27 ; xor rax, rax ; ret
0x0000000000090d87 : test eax, eax ; jne 0x90e4b ; xor rax, rax ; ret
0x00000000000a0bdb : test eax, eax ; jne 0xa0c6a ; xor eax, eax ; ret
0x00000000000a0c18 : test eax, eax ; jne 0xa0c96 ; xor eax, eax ; ret
0x00000000000ac79a : test eax, eax ; jne 0xac796 ; xor eax, eax ; ret
0x00000000000ff6b0 : test eax, eax ; jne 0xff692 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff881 : test eax, eax ; jne 0xff862 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000cd23a : test eax, eax ; js 0xcd25f ; mov dword ptr fs:[rbx], ebp ; add rsp, 0x18 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000130958 : test eax, eax ; mov rbx, rax ; jne 0x1308fc ; xor eax, eax ; pop rbx ; ret
0x0000000000035527 : test eax, eax ; sete sil ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x000000000010e40f : test ebp, ebp ; mov qword ptr [r12], rbp ; je 0x10e438 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x000000000013e862 : test ebx, ebx ; je 0x13e899 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x000000000008a856 : test ebx, ebx ; je 0x8a875 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x0000000000104636 : test ebx, ebx ; jne 0x104622 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ac22b : test ecx, ecx ; je 0xac23e ; xor eax, eax ; ret
0x00000000000e25e5 : test ecx, ecx ; jle 0xe2668 ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe2607
0x00000000000365a4 : test ecx, ecx ; jne 0x365c7 ; mov edx, dword ptr [rdi] ; xor eax, eax ; test edx, edx ; sete al ; ret
0x0000000000036399 : test edi, edi ; je 0x363c1 ; mov eax, 1 ; shl rax, cl ; or qword ptr [rdi], rax ; xor eax, eax ; ret
0x000000000003aa0c : test edi, edi ; je 0x3aa7d ; mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x000000000003a931 : test edi, edi ; push rbx ; je 0x3a97d ; xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a94d ; pop rbx ; ret
0x0000000000116741 : test edx, edx ; cmove rdx, rax ; xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x00000000000db19c : test edx, edx ; jne 0xdb16c ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x0000000000065169 : test edx, esi ; xor dword ptr [rax], eax ; add byte ptr [rbx - 0x4d76b], cl ; inc dword ptr [rbx - 0x78f0d006] ; ret 0x58
0x00000000001039f1 : test esi, esi ; je 0x103abb ; xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a19 ; ret
0x000000000008dbd1 : test esi, esi ; jne 0x8dbe0 ; xor rax, rax ; ret
0x00000000000fda20 : test esi, esi ; mov dword ptr [rdi + 0x34], esi ; jne 0xfda15 ; or dword ptr [rdi], 0x80000000 ; xor eax, eax ; ret
0x00000000000a07af : test r8b, r8b ; jne 0xa0797 ; xor eax, eax ; ret
0x000000000012d734 : test rax, rax ; je 0x12d72d ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000c7c2d : test rax, rax ; je 0xc7c51 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f8101 : test rax, rax ; je 0xf815c ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000000801d4 : test rax, rax ; jne 0x8020b ; xor edi, edi ; call qword ptr [r15]
0x00000000000ff6af : test rax, rax ; jne 0xff693 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x00000000000ff880 : test rax, rax ; jne 0xff863 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x0000000000130957 : test rax, rax ; mov rbx, rax ; jne 0x1308fd ; xor eax, eax ; pop rbx ; ret
0x000000000010e40e : test rbp, rbp ; mov qword ptr [r12], rbp ; je 0x10e439 ; xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x0000000000104635 : test rbx, rbx ; jne 0x104623 ; pop rbx ; xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000003aa0b : test rdi, rdi ; je 0x3aa7e ; mov dword ptr [rdi], 0 ; xor eax, eax ; pop rbx ; ret
0x000000000003a930 : test rdi, rdi ; push rbx ; je 0x3a97e ; xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a94e ; pop rbx ; ret
0x0000000000116740 : test rdx, rdx ; cmove rdx, rax ; xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x00000000000db19b : test rdx, rdx ; jne 0xdb16d ; add rsp, 8 ; xor eax, eax ; pop rbx ; pop rbp ; ret
0x000000000008dbd0 : test rsi, rsi ; jne 0x8dbe1 ; xor rax, rax ; ret
0x0000000000047c09 : wait ; mov edx, 0xc1480037 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000087dd1 : wait ; nop ; xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87deb ; call rax
0x00000000000f7289 : xchg dword ptr [rax + 0x48000000], eax ; mov dword ptr [rsi + 0x78], eax ; xor eax, eax ; ret
0x0000000000030075 : xchg dword ptr [rax], ebp ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000f7e21 : xchg dword ptr [rcx + rax], ecx ; add byte ptr [rax], al ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
0x000000000007951f : xchg eax, ebp ; cli ; dec dword ptr [rax - 0x77] ; fucompi st(0) ; lea esp, dword ptr [rdx + rdi*8 - 1] ; xor eax, eax ; pop rbx ; ret
0x000000000013626e : xchg eax, ebp ; ror byte ptr [rax - 0x7d], 0xc4 ; xor byte ptr [rbx + 0xf], bl ; mov dh, 0xc0 ; pop rbp ; pop r12 ; ret
0x0000000000003675 : xchg eax, ebp ; xor al, 0x71 ; cmp eax, 0x6e510fa3 ; stosb byte ptr [rdi], al ; stc ; insb byte ptr [rdi], dx ; mov ebx, 0x952a6c41 ; ret
0x00000000000fe881 : xchg eax, ebx ; jle 0xfe8c1 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012c933 : xchg eax, ebx ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000013095e : xchg eax, ebx ; xor eax, eax ; pop rbx ; ret
0x0000000000116be3 : xchg eax, ecx ; cli ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; jmp rax
0x000000000006eeb2 : xchg eax, ecx ; xor byte ptr [rcx], al ; add byte ptr [rax], al ; ret
0x00000000000c38fb : xchg eax, ecx ; xor cl, byte ptr [rax + rax] ; movzx edx, sil ; movsxd rax, dword ptr [rcx + rdx*4] ; add rax, rcx ; jmp rax
0x0000000000103a98 : xchg eax, edi ; mov rax, qword ptr [rip + 0x2bd3d8] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x0000000000117656 : xchg eax, edi ; nop word ptr [rax + rax] ; push rbp ; xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x0000000000107744 : xchg eax, edi ; sub eax, dword ptr [rax] ; mov dword ptr fs:[rax], 2 ; xor eax, eax ; ret
0x00000000000c04a5 : xchg eax, edi ; xor byte ptr ss:[rax], al ; jne 0xc04c5 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000dff24 : xchg eax, edx ; lea rdi, qword ptr [rax + rsi*4] ; shl rdx, 2 ; xor esi, esi ; call 0x9181f
0x000000000003d179 : xchg eax, edx ; mov rdx, r14 ; xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c8
0x00000000000403c4 : xchg eax, edx ; mov rdx, rbp ; xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x40411
0x0000000000122cea : xchg eax, edx ; xor al, 2 ; add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x00000000000bd25a : xchg eax, edx ; xor byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000365af : xchg eax, esp ; rol bl, 0x66 ; nop dword ptr [rax + rax] ; xor eax, eax ; ret
0x0000000000021459 : xchg eax, esp ; rol byte ptr [rbp + 0x31], 0xc0 ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x000000000002bc01 : xchg edx, ebx ; add byte ptr [rax], al ; add byte ptr [rbx + 0x63], cl ; xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x00000000000a0bd9 : xlatb ; rol dword ptr [rbp + 0x7d850fc0], 0 ; add byte ptr [rax], al ; xor eax, eax ; ret
0x0000000000090d85 : xlatb ; rol dword ptr [rbp - 0x4e7af040], 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x00000000001471a0 : xlatb ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000362b8 : xlatb ; xor eax, eax ; ret
0x00000000001874fd : xor ah, 0xff ; add eax, dword ptr [rcx - 0x7ef2000c] ; hlt ; call qword ptr [rdi]
0x00000000001877b1 : xor ah, 0xff ; sar byte ptr [rdi - 0xc], 1 ; call rax
0x00000000001874f9 : xor ah, 0xff ; stc ; xor ah, 0xff ; add eax, dword ptr [rcx - 0x7ef2000c] ; hlt ; call qword ptr [rdi]
0x00000000000a5b98 : xor ah, ah ; mov byte ptr [rdx + 0x10], ah ; mov rax, rdi ; ret
0x00000000000a2dc0 : xor ah, ah ; mov byte ptr [rdx + 1], ah ; mov al, byte ptr [rcx] ; mov byte ptr [rdx], al ; mov rax, rdi ; ret
0x00000000000a2dd0 : xor ah, ah ; mov byte ptr [rdx + 2], ah ; mov ax, word ptr [rcx] ; mov word ptr [rdx], ax ; mov rax, rdi ; ret
0x00000000000a2e00 : xor ah, ah ; mov byte ptr [rdx + 4], ah ; mov eax, dword ptr [rcx] ; mov dword ptr [rdx], eax ; mov rax, rdi ; ret
0x00000000000a5b2e : xor ah, ah ; mov byte ptr [rdx + 8], ah ; mov rax, rdi ; ret
0x00000000000a2e70 : xor ah, ah ; mov byte ptr [rdx + 8], ah ; movlpd xmm0, qword ptr [rcx] ; movlpd qword ptr [rdx], xmm0 ; mov rax, rdi ; ret
0x0000000000193941 : xor ah, bh ; inc eax ; xor esp, edi ; call qword ptr [rax]
0x0000000000193981 : xor ah, bh ; push qword ptr [rax] ; xor bh, ah ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x00000000000301ca : xor ah, byte ptr [rdi] ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000c82ca : xor ah, byte ptr [rsi - 0x3eb7ffd1] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000025e8 : xor ah, byte ptr [rsi] ; sahf ; jl 0x2581 ; loop 0x25cc ; ret 0x23cb
0x000000000007f23e : xor al, 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr [rip + 0x3444f9], 0 ; ret
0x000000000007f249 : xor al, 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x000000000019ed10 : xor al, 0 ; add byte ptr [rax], al ; cld ; add byte ptr [rax], al ; add byte ptr [rax], ch ; fsub st(4), st(0) ; jmp qword ptr [rcx]
0x00000000001a0df0 : xor al, 0 ; add byte ptr [rax], al ; fsub qword ptr [rcx] ; add byte ptr [rax], al ; call 0x2719fb72
0x00000000001a70c8 : xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b0 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a7100 : xor al, 0 ; add byte ptr [rax], al ; lodsb al, byte ptr [rsi] ; xlatb ; add byte ptr [rax], al ; cmp byte ptr [rdx - 0xf], cl ; jmp rcx
0x00000000001a11c8 : xor al, 0 ; add byte ptr [rax], al ; mov ah, 0x25 ; add byte ptr [rax], al ; add byte ptr [rbp - 0x13], dh ; jmp qword ptr [rcx]
0x00000000001b5bf0 : xor al, 0 ; add byte ptr [rax], al ; pushfq ; ret 1
0x00000000001b5c98 : xor al, 0 ; add byte ptr [rax], al ; ret
0x00000000001b5bb8 : xor al, 0 ; add byte ptr [rax], al ; ret 1
0x00000000001a1740 : xor al, 0 ; add byte ptr [rax], al ; sub al, 0x2b ; add byte ptr [rax], al ; call 0x281a04da
0x0000000000109ae1 : xor al, 0 ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109afe ; ret
0x000000000019eed8 : xor al, 0 ; add byte ptr [rax], al ; test byte ptr [rbp], dl ; add al, dh ; in al, dx ; jmp qword ptr [rax]
0x00000000001a74e8 : xor al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x000000000019cde5 : xor al, 0 ; add byte ptr [rax], bl ; out 0xe9, al ; call qword ptr [rsi]
0x000000000008194d : xor al, 0 ; add dword ptr [r12 + 0x18], r9d ; cmp rbx, rax ; je 0x8196e ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000007f1d6 : xor al, 0 ; add dword ptr [rip + 0x344565], 1 ; ret
0x000000000008040d : xor al, 0 ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x0000000000080bfd : xor al, 0 ; jae 0x80bb8 ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000007fe5b : xor al, 0 ; jne 0x7fe59 ; add rsp, 8 ; mov rax, rdi ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000079135 : xor al, 0 ; mov dword ptr fs:[rax], 0x16 ; mov eax, 0xffffffff ; ret
0x00000000000795d5 : xor al, 0 ; mov dword ptr fs:[rax], 0x1c ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000753c2 : xor al, 0 ; mov dword ptr fs:[rax], 9 ; mov eax, 0xffffffff ; ret
0x0000000000079ffb : xor al, 0 ; mov qword ptr [rbx + 0xd8], rcx ; mov qword ptr [rdx + 0x130], rdi ; pop rbx ; ret
0x0000000000080a37 : xor al, 0 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a4d ; call rax
0x00000000000801cf : xor al, 0 ; mov rax, qword ptr [rax] ; test rax, rax ; jne 0x80210 ; xor edi, edi ; call qword ptr [r15]
0x00000000000801a5 : xor al, 0 ; mov rbp, rsi ; xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x000000000007a625 : xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; pop rbx ; ret
0x0000000000079f6d : xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x000000000007b007 : xor al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov rax, -1 ; ret
0x000000000007f145 : xor al, 0 ; ret
0x00000000001aa98c : xor al, 0x10 ; add dword ptr [rax], eax ; adc byte ptr [rsi], dl ; hlt ; call qword ptr [rsi]
0x000000000004862d : xor al, 0x13 ; je 0x48648 ; mov rax, qword ptr [rax + rsi*8] ; mov qword ptr [rcx + rsi*8], rax ; xor eax, eax ; pop rbx ; ret
0x000000000018102a : xor al, 0x19 ; xchg dword ptr [rcx + 0x79], ecx ; xchg eax, edx ; ret 0xf869
0x0000000000198c00 : xor al, 0x1c ; cli ; call rsp
0x000000000009833b : xor al, 0x24 ; test rsi, rsi ; jne 0x98354 ; jmp 0x9830e
0x00000000001abe8c : xor al, 0x25 ; add dword ptr [rax], eax ; xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x0000000000198638 : xor al, 0x25 ; stc ; push qword ptr [rdx + rsi*8 + 0x25840001] ; stc ; jmp rsp
0x00000000000e0bba : xor al, 0x2b ; call 0x913b8
0x0000000000100b7f : xor al, 0x2c ; add byte ptr [rax - 0x76b7ffc8], al ; ret
0x0000000000100c65 : xor al, 0x2c ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fcomp dword ptr [rbx + 0x5d] ; pop r12 ; ret
0x0000000000100b43 : xor al, 0x2c ; add byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000002055 : xor al, 0x39 ; push rbx ; cmp byte ptr [rdi - 0x19ade7f3], dl ; ret
0x000000000011d0f3 : xor al, 0x48 ; add esp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000034c34 : xor al, 0x48 ; and edx, eax ; or rdi, rdx ; movq xmm1, rdi ; movapd xmm0, xmm1 ; ret
0x00000000000a0c9b : xor al, 0x48 ; lea eax, dword ptr [rdi + rax + 0x20] ; ret
0x000000000006da6e : xor al, 0x48 ; lea ecx, dword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x00000000001ae68c : xor al, 0x4d ; add dword ptr [rax], eax ; push rax ; lodsb al, byte ptr [rsi] ; cmc ; jmp qword ptr [rcx]
0x00000000000d2a8c : xor al, 0x4d ; or eax, dword ptr [rax] ; movsxd rax, dword ptr [rdx + rax*4] ; add rax, rdx ; jmp rax
0x00000000001ae98c : xor al, 0x50 ; add dword ptr [rax], eax ; mov al, 0xf5 ; call qword ptr [rsi]
0x0000000000199394 : xor al, 0x53 ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x00000000001aec8c : xor al, 0x53 ; add dword ptr [rax], eax ; nop ; mov ch, 0xf5 ; jmp qword ptr [rbx]
0x0000000000195d20 : xor al, 0x64 ; out dx, eax ; push qword ptr [rdi + rsi*8 + 0x65240000] ; out dx, eax ; jmp rsp
0x0000000000196ca8 : xor al, 0x68 ; cmc ; call rsp
0x0000000000003676 : xor al, 0x71 ; cmp eax, 0x6e510fa3 ; stosb byte ptr [rdi], al ; stc ; insb byte ptr [rdi], dx ; mov ebx, 0x952a6c41 ; ret
0x00000000000fda24 : xor al, 0x75 ; fild word ptr [rcx + 0xf] ; xor byte ptr [rcx], 0xc0 ; ret
0x00000000001a1b8c : xor al, 0x82 ; add byte ptr [rax], al ; nop ; xchg eax, esp ; in eax, dx ; call qword ptr [rcx]
0x00000000000b73e2 : xor al, 0x83 ; sub r10, rax ; jmp 0xb7406
0x00000000000adf7b : xor al, 0x85 ; ror byte ptr [rax - 0x48], 0 ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; or byte ptr [rax + 0xf], 0x44 ; ret 0x8348
0x000000000002bc08 : xor al, 0x88 ; add rsi, r8 ; jmp rsi
0x00000000001963b0 : xor al, 0x9d ; int1 ; dec esp ; and dword ptr [rcx], eax ; add byte ptr [rbp + rbx*4 - 0xf], al ; jmp rsp
0x0000000000199708 : xor al, 0x9e ; cld ; dec esp ; adc eax, dword ptr [rcx] ; add byte ptr [rdi + rdi*4 - 4], dh ; jmp rsp
0x00000000001990a0 : xor al, 0xa3 ; cli ; call rsp
0x00000000001a458c : xor al, 0xac ; add byte ptr [rax], al ; push rax ; ret
0x00000000001a498c : xor al, 0xb0 ; add byte ptr [rax], al ; shr byte ptr [rcx - 6], 1 ; call qword ptr [rax]
0x0000000000195e78 : xor al, 0xb3 ; out dx, eax ; jmp rsp
0x000000000006d76b : xor al, 0xbe ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x00000000000c3961 : xor al, 0xc ; add byte ptr [rdi], cl ; mov dh, 0xfa ; movsxd rax, dword ptr [r8 + rdi*4] ; add rax, r8 ; jmp rax
0x0000000000195ed0 : xor al, 0xc5 ; out dx, eax ; inc esp ; add dword ptr [rcx], eax ; add byte ptr [rsi + rax*8], dh ; out dx, eax ; jmp rsp
0x0000000000195ed8 : xor al, 0xc6 ; out dx, eax ; jmp rsp
0x00000000000c5185 : xor al, 0xc7 ; mov rdi, rbp ; call 0x913b7
0x0000000000198488 : xor al, 0xcf ; clc ; jmp rsp
0x000000000018220a : xor al, 0xd8 ; ret
0x0000000000045cff : xor al, 0xe ; mov ecx, esi ; shl ecx, 0x1e ; or edx, ecx ; cmp esi, 0x40 ; cmovne rax, rdx ; ret
0x0000000000194ed1 : xor al, 0xeb ; call rsp
0x00000000000907b7 : xor al, 0xf ; mov dh, 0x75 ; add byte ptr [rax - 0x39], cl ; ret 0xffff
0x00000000000fc50a : xor al, 0xf2 ; push qword ptr [rcx] ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000fa601 : xor al, 0xf9 ; dec dword ptr [rbp + rcx*4 + 0x24] ; sub byte ptr [rax - 0x77], cl ; ret 0x8d49
0x0000000000198681 : xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a1 : xor al, 0xfb ; call rsp
0x000000000019398d : xor al, 0xfc ; jmp qword ptr [rax]
0x0000000000104c9c : xor al, 0xff ; dec dword ptr [rcx + rcx*4 - 1] ; mov edx, 4 ; mov esi, 1 ; call rbx
0x00000000001acd7d : xor al, 1 ; add byte ptr [rax + 0x2c], ah ; cmc ; jmp qword ptr [rsi]
0x00000000000abbe8 : xor al, 1 ; add byte ptr [rax], al ; ret
0x0000000000109941 : xor al, 1 ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x10995e ; ret
0x0000000000196665 : xor al, 1 ; add byte ptr [rbx + rsi*8 - 0xe], ah ; call rsp
0x0000000000198ed5 : xor al, 2 ; add ah, al ; jbe 0x198ee3 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000122ceb : xor al, 2 ; add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x0000000000198edd : xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x0000000000056470 : xor al, al ; add eax, 0x107 ; mov dword ptr [rdx], eax ; mov eax, 1 ; ret
0x0000000000108ecb : xor al, al ; or eax, edi ; ret
0x00000000000aff3e : xor al, byte ptr [rax + rax] ; add cl, ch ; ret 0xfff3
0x0000000000109b71 : xor al, byte ptr [rax] ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109b8e ; ret
0x0000000000065025 : xor al, byte ptr [rax] ; add byte ptr [rbx - 0x4d76b], cl ; inc dword ptr [rbx - 0x78f0d006] ; ret
0x000000000002e54a : xor al, byte ptr [rbp + 0x39] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000016a1ca : xor al, byte ptr [rbx] ; add byte ptr [rax], al ; cmp byte ptr [rax], 1 ; sbb rax, -1 ; ret
0x00000000001acb75 : xor al, byte ptr [rcx] ; add byte ptr [rax + 0x26], cl ; cmc ; jmp qword ptr [rcx]
0x00000000000fedf1 : xor al, byte ptr [rcx] ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0xfee0e ; ret
0x00000000001acb5d : xor al, byte ptr [rcx] ; add byte ptr [rax], dh ; cmc ; jmp qword ptr [rcx]
0x0000000000053c9d : xor al, ch ; int 0x6e
0x00000000001141ac : xor al, ch ; out dx, al ; ret
0x00000000000fcb9b : xor al, ch ; outsd dx, dword ptr [rsi] ; ret
0x00000000001242fa : xor al, ch ; xor byte ptr [rbp - 2], bl ; inc dword ptr [rbp - 0x769b8740] ; ret
0x00000000000fcbe8 : xor ax, ax ; ret
0x0000000000193985 : xor bh, ah ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x00000000001a5480 : xor bh, bl ; cld ; call qword ptr [rax]
0x000000000000318f : xor bh, byte ptr [rsi - 0xd] ; add ebp, esi ; mov eax, 0xa1a3e95a ; ret 0xba88
0x00000000001b35e9 : xor bh, dh ; call rcx
0x00000000001abe90 : xor bl, ah ; hlt ; jmp qword ptr [rcx]
0x0000000000090e4c : xor bl, al ; nop ; xor rax, rax ; ret
0x00000000000ca2c9 : xor bl, bh ; lcall ptr [rcx + 0x2404f741] ; add byte ptr [rax - 0x7af10000], al ; ret
0x00000000001441ea : xor bl, byte ptr [rdi] ; sub byte ptr [rax], al ; mov eax, 1 ; add rsp, 8 ; ret
0x000000000012b618 : xor byte ptr [eax - 0x7b], cl ; ror byte ptr [rax + 0xf], 0x44 ; ret 0x8b4c
0x00000000000eaad9 : xor byte ptr [r11 + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000abcdc : xor byte ptr [r11], r15b ; xor byte ptr [rbp + 0x3d], r14b ; ret
0x0000000000090d0d : xor byte ptr [r14 + 0xf], r12b ; xlatb ; ret
0x0000000000090d81 : xor byte ptr [r14 + 0xf], r12b ; xlatb ; rol dword ptr [rbp - 0x4e7af040], 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x0000000000122096 : xor byte ptr [r8 + 1], dil ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000759ea : xor byte ptr [r8 + 1], r9b ; ret 0x8b49
0x0000000000048087 : xor byte ptr [r8 - 0x75], r9b ; jg 0x480fd ; xor eax, eax ; ret
0x000000000007d2cc : xor byte ptr [r8 - 0x77], cl ; and byte ptr [r9 + 0x48c03113], cl ; add esp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000130f72 : xor byte ptr [r8 - 0x77], cl ; ret 0x8b48
0x0000000000138191 : xor byte ptr [r8 - 0x77], r9b ; push rdi ; cmp byte ptr [rax + 1], bh ; ret
0x00000000000bf1eb : xor byte ptr [r8], al ; lea rcx, qword ptr [rax + r9] ; mov rdx, rax ; jmp 0xbf204
0x00000000000577d6 : xor byte ptr [r8], r8b ; add byte ptr [rax], al ; add cl, ch ; ret
0x00000000000bc914 : xor byte ptr [r8], r8b ; neg eax ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x000000000008b5a4 : xor byte ptr [r9 + r9*4 + 0x4b], cl ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x00000000000dfc5f : xor byte ptr [r9], sil ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x00000000000908ef : xor byte ptr [rax + 0x10000000], 0x48 ; lea eax, dword ptr [rip + 0x19ab4] ; cmove rax, rdx ; ret
0x000000000007802b : xor byte ptr [rax + 0x29], cl ; ret
0x000000000007854d : xor byte ptr [rax + 0x29], cl ; ret 0x3949
0x000000000008a4d6 : xor byte ptr [rax + 0x31], cl ; ret 0x3949
0x00000000000790ff : xor byte ptr [rax + 0x39], cl ; adc byte ptr [r10 + 0x2a], r14b ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rsi], rax ; xor eax, eax ; ret
0x00000000000ff2ee : xor byte ptr [rax + 0x42], al ; sldt word ptr [rbx] ; push rsp ; and al, 0x38 ; mov eax, edx ; add rsp, 0x48 ; ret
0x0000000000107b92 : xor byte ptr [rax + 0x48000000], 0x89 ; mov edx, dword ptr [rax - 0x77000000] ; ret 0xe8c1
0x00000000000e4c4f : xor byte ptr [rax + 0x63], cl ; add al, 0x82 ; mov rbp, rsi ; mov qword ptr [rsp + 0x28], rdi ; add rax, rdx ; jmp rax
0x00000000000c4a38 : xor byte ptr [rax + 0x63], cl ; ret 0x894c
0x00000000000f70cf : xor byte ptr [rax + 0x63], cl ; ret 0xc283
0x000000000008be11 : xor byte ptr [rax + 0xf], cl ; ret 0x90c3
0x0000000000122097 : xor byte ptr [rax + 1], bh ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000a0c76 : xor byte ptr [rax + 1], cl ; ret 0x547c
0x00000000000759eb : xor byte ptr [rax + 1], cl ; ret 0x8b49
0x0000000000101046 : xor byte ptr [rax + rax], ch ; add byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; ret
0x0000000000101003 : xor byte ptr [rax + rax], ch ; add rsp, 8 ; ret
0x00000000000fde04 : xor byte ptr [rax + rax], ch ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000842b8 : xor byte ptr [rax + rcx*4 + 0x5c], al ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x0000000000078c78 : xor byte ptr [rax - 0x3f], cl ; clc ; add al, bl ; nop ; mov rax, qword ptr [rdi + 0x40] ; sub rax, qword ptr [rdi + 0x38] ; ret
0x00000000000f4bc5 : xor byte ptr [rax - 0x73], cl ; adc eax, 0x93c9b ; movsxd rax, dword ptr [rdx + rax*4] ; add rax, rdx ; jmp rax
0x00000000000f36c5 : xor byte ptr [rax - 0x73], cl ; adc eax, 0x94f5b ; movsxd rax, dword ptr [rdx + rax*4] ; add rax, rdx ; jmp rax
0x000000000012e0a7 : xor byte ptr [rax - 0x73], cl ; add eax, 0x297c91 ; pop rbx ; ret
0x000000000012e06f : xor byte ptr [rax - 0x73], cl ; add eax, 0x297cc9 ; pop rbx ; ret
0x000000000012dfb0 : xor byte ptr [rax - 0x73], cl ; add eax, 0x297d88 ; pop rbx ; ret
0x00000000000299d5 : xor byte ptr [rax - 0x73], cl ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000a8a77 : xor byte ptr [rax - 0x73], cl ; ret
0x000000000008681d : xor byte ptr [rax - 0x75], cl ; add eax, 0x33a6bb ; mov qword ptr [rax], rdi ; ret
0x00000000000483b8 : xor byte ptr [rax - 0x75], cl ; jbe 0x48434 ; xor eax, eax ; ret
0x0000000000023f7b : xor byte ptr [rax - 0x75], cl ; je 0x23fb0 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024fb2 : xor byte ptr [rax - 0x75], cl ; je 0x24fe7 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1e : xor byte ptr [rax - 0x75], cl ; je 0x26c53 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000001381a3 : xor byte ptr [rax - 0x75], cl ; jg 0x1381f1 ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
0x0000000000048088 : xor byte ptr [rax - 0x75], cl ; jg 0x480fc ; xor eax, eax ; ret
0x00000000001046aa : xor byte ptr [rax - 0x75], cl ; jge 0x10467b ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000238b3 : xor byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x38 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000023c38 : xor byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000000483b7 : xor byte ptr [rax - 0x75], r9b ; jbe 0x48435 ; xor eax, eax ; ret
0x000000000008bd3f : xor byte ptr [rax - 0x77], cl ; add cl, byte ptr [rax - 0x7d] ; ret 0x4808
0x000000000007d2cd : xor byte ptr [rax - 0x77], cl ; and byte ptr [r9 + 0x48c03113], cl ; add esp, 8 ; pop rbx ; pop rbp ; ret
0x0000000000089d87 : xor byte ptr [rax - 0x77], cl ; and byte ptr [rax + 0x31], cl ; ret 0x93be
0x00000000000b3308 : xor byte ptr [rax - 0x77], cl ; call 0x4ccdc825
0x00000000000b6040 : xor byte ptr [rax - 0x77], cl ; call 0x4ccdf55d
0x000000000004ab32 : xor byte ptr [rax - 0x77], cl ; fucompi st(0) ; xor eax, 0x48000565 ; add esp, 0x440 ; pop rbx ; ret
0x000000000013846e : xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000783d2 : xor byte ptr [rax - 0x77], cl ; pop rbp ; sbb byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000073812 : xor byte ptr [rax - 0x77], cl ; push rax ; mov rdx, rdi ; jbe 0x73751 ; mov eax, dword ptr [rsi] ; jmp 0x737f7
0x0000000000078483 : xor byte ptr [rax - 0x77], cl ; push rbx ; sbb byte ptr [rbx + 0x5d], bl ; pop r12 ; ret
0x0000000000138192 : xor byte ptr [rax - 0x77], cl ; push rdi ; cmp byte ptr [rax + 1], bh ; ret
0x0000000000032c7a : xor byte ptr [rax - 0x77], cl ; ret
0x00000000000d08ce : xor byte ptr [rax - 0x77], cl ; ret 0x8040
0x0000000000130f73 : xor byte ptr [rax - 0x77], cl ; ret 0x8b48
0x00000000000d80be : xor byte ptr [rax - 0x77], cl ; ret 0xc148
0x000000000012be61 : xor byte ptr [rax - 0x77], cl ; ror byte ptr gs:[rcx + rcx*4 - 0x19], 0xe8 ; ret 0xf61b
0x00000000000c0cca : xor byte ptr [rax - 0x78f0f606], al ; ret 0xfff9
0x0000000000074192 : xor byte ptr [rax - 0x7b], cl ; push qword ptr [rbp + rax - 0xa] ; ret 0x7408
0x000000000012b619 : xor byte ptr [rax - 0x7b], cl ; ror byte ptr [rax + 0xf], 0x44 ; ret 0x8b4c
0x00000000000e1bd9 : xor byte ptr [rax - 0x7d], cl ; ret 0x4108
0x0000000000099c8f : xor byte ptr [rax - 0x7d], cl ; ret 0x4801
0x000000000005536a : xor byte ptr [rax - 0x7d], cl ; ret 0xe920
0x0000000000193298 : xor byte ptr [rax - 5], ah ; jmp qword ptr [rax]
0x0000000000075f5d : xor byte ptr [rax], 1 ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x20] ; jmp rax
0x000000000019c97d : xor byte ptr [rax], al ; add al, dl ; fucomp st(1) ; call qword ptr [rcx]
0x00000000000577d7 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add cl, ch ; ret
0x00000000000c5506 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add rbp, r14 ; call 0x91819
0x0000000000020749 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 0x28 ; jmp rax
0x000000000008fb68 : xor byte ptr [rax], al ; add byte ptr [rax], al ; add rsp, 8 ; jmp rax
0x00000000000645a9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003a242 : xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x0000000000035623 : xor byte ptr [rax], al ; add byte ptr [rax], al ; jmp rax
0x0000000000122edc : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453ea : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87f : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3f : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707af : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd25 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf95 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76b2 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bc5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a874 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000000645d2 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c93a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31e : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x000000000005969a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f6 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db1a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000000aad6d : xor byte ptr [rax], al ; add byte ptr [rax], al ; pop rbx ; ret
0x0000000000109f51 : xor byte ptr [rax], al ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109f6e ; ret
0x00000000001174fb : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x117539 ; call rax
0x000000000006efa0 : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x6efc8 ; mov rdi, qword ptr [rdi + 0xe0] ; jmp rax
0x000000000006f070 : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x6f098 ; mov rdi, qword ptr [rdi + 0xe0] ; jmp rax
0x00000000000c7c29 : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xc7c55 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f80fd : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xf8160 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000004dae9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x000000000003af1a : xor byte ptr [rax], al ; add byte ptr [rcx - 0x1e], al ; jg 0x3af73 ; mov dword ptr [rax], edx ; mov dword ptr [rsi], edx ; ret
0x0000000000060933 : xor byte ptr [rax], al ; add byte ptr [rcx - 0x7afcb730], cl ; push -0x7c000006 ; ret 0x8908
0x00000000000bd25b : xor byte ptr [rax], al ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000bd49a : xor byte ptr [rax], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbd1 : xor byte ptr [rax], al ; add rsp, 8 ; ret
0x00000000000740da : xor byte ptr [rax], al ; je 0x740e4 ; ret
0x00000000000798c1 : xor byte ptr [rax], al ; je 0x798d2 ; add rsp, 0x38 ; ret
0x00000000000c04a7 : xor byte ptr [rax], al ; jne 0xc04c3 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000000bf1ec : xor byte ptr [rax], al ; lea rcx, qword ptr [rax + r9] ; mov rdx, rax ; jmp 0xbf203
0x00000000000c04bd : xor byte ptr [rax], al ; mov dword ptr [rdx], eax ; xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000bfd05 : xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x16 ; mov eax, 0xffffffff ; ret
0x00000000000bbc15 : xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x16 ; xor eax, eax ; ret
0x00000000000bbbf5 : xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; add rsp, 8 ; ret
0x00000000000bb97c : xor byte ptr [rax], al ; mov dword ptr fs:[rax], 0x4b ; xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x00000000000bc915 : xor byte ptr [rax], al ; neg eax ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x00000000000bc83d : xor byte ptr [rax], al ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000bd062 : xor byte ptr [rax], al ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000ba58f : xor byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000bbb05 : xor byte ptr [rax], al ; xor ebx, ebx ; mov dword ptr fs:[rax], 0x4b ; mov rax, rbx ; pop rbx ; ret
0x00000000000aa2f7 : xor byte ptr [rax], dh ; in eax, dx ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000bc83c : xor byte ptr [rax], r8b ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000abce0 : xor byte ptr [rbp + 0x3d], dh ; ret
0x00000000000abcdf : xor byte ptr [rbp + 0x3d], r14b ; ret
0x000000000007e120 : xor byte ptr [rbp + 0xd], 0x48 ; add esp, 0x28 ; pop rbx ; pop rbp ; ret
0x0000000000091675 : xor byte ptr [rbp + 0xf], al ; adc dword ptr [rbx], eax ; ret
0x00000000000fdbf7 : xor byte ptr [rbp + rax*2 - 0x77], ah ; and byte ptr [rbx + 0x5d], bl ; pop r12 ; ret
0x00000000000a996c : xor byte ptr [rbp + rcx*4 + 0x1d], cl ; adc dl, cl ; or eax, 0xc634900 ; xchg eax, ebx ; lea rcx, qword ptr [r11 + rcx] ; jmp rcx
0x00000000000a9001 : xor byte ptr [rbp + rcx*4 + 0x1d], cl ; sti ; ror byte ptr [rip + 0xc634900], cl ; xchg eax, ebx ; lea rcx, qword ptr [r11 + rcx] ; jmp rcx
0x000000000004004c : xor byte ptr [rbp - 0x57f2faa], cl ; or cl, byte ptr [rdi] ; xchg eax, edx ; ret 0xb60f
0x00000000001942d8 : xor byte ptr [rbp - 0x6b4f0004], dl ; cld ; push qword ptr [rax] ; xchg eax, esp ; cld ; jmp qword ptr [rax + 0x10fffc93]
0x00000000001932f4 : xor byte ptr [rbp - 0x78ef0005], al ; sti ; jmp rax
0x0000000000171bcb : xor byte ptr [rbp - 0x7b], cl ; test byte ptr [rdi], 0x84 ; ret
0x00000000001a8f40 : xor byte ptr [rbp - 0xe], dl ; jmp qword ptr [rcx]
0x00000000001242fc : xor byte ptr [rbp - 2], bl ; inc dword ptr [rbp - 0x769b8740] ; ret
0x0000000000074306 : xor byte ptr [rbx + 0x374fff8], al ; and dword ptr [rbx], 0xffffffef ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000eaada : xor byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000793bd : xor byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000012433c : xor byte ptr [rbx + 0x5d], bl ; pop r12 ; ret
0x0000000000136273 : xor byte ptr [rbx + 0xf], bl ; mov dh, 0xc0 ; pop rbp ; pop r12 ; ret
0x0000000000193370 : xor byte ptr [rbx + rdi*8 - 0x4424f01], bh ; push qword ptr [rax] ; mov edi, 0xc0b0fffb ; sti ; push qword ptr [rax] ; ret 0xfffb
0x0000000000193344 : xor byte ptr [rbx + rdi*8 - 0x4527f01], ch ; call rax
0x000000000008fcd0 : xor byte ptr [rbx + rsi], bh ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012df7d : xor byte ptr [rbx - 0x3d], bl ; ret
0x000000000007e4ed : xor byte ptr [rbx - 0x438a0008], al ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000d6bbc : xor byte ptr [rbx - 0x47fefbb9], al ; add dword ptr [rax], eax ; add byte ptr [rax], al ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000001a5cb6 : xor byte ptr [rbx - 0x73fb79fb], al ; add ecx, dword ptr [rbp + 0x4c0002] ; add byte ptr [rax], al ; insb byte ptr [rdi], dx ; ret
0x00000000001035b7 : xor byte ptr [rbx - 0x78f0f606], al ; out dx, eax ; add byte ptr [rax], al ; add byte ptr [rax - 0x7d], cl ; ret
0x000000000006d1b4 : xor byte ptr [rbx - 0x78f0f608], al ; ret 1
0x00000000001a71f0 : xor byte ptr [rbx - 0xf], cl ; call qword ptr [rcx]
0x00000000001a7170 : xor byte ptr [rbx - 0xf], cl ; jmp qword ptr [rcx]
0x0000000000193988 : xor byte ptr [rbx], 0xfc ; call rax
0x0000000000072ce7 : xor byte ptr [rbx], al ; add byte ptr [rax], al ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000abcdd : xor byte ptr [rbx], bh ; xor byte ptr [rbp + 0x3d], r14b ; ret
0x0000000000001b24 : xor byte ptr [rcx + 0x3a6d4813], ah ; ret
0x00000000001304fc : xor byte ptr [rcx + 0x415d5bd8], cl ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000d8f7c : xor byte ptr [rcx + 0x63], cl ; add r9b, r13b ; ret
0x000000000008d6e1 : xor byte ptr [rcx + 0xf], al ; xchg eax, esp ; ret 0xb60f
0x000000000010b865 : xor byte ptr [rcx + 0xfd829f0], cl ; test dword ptr [rax], esp ; add dword ptr [rax], eax ; add byte ptr [rax + 0x63], cl ; ret
0x000000000008b5a5 : xor byte ptr [rcx + rcx*4 + 0x4b], cl ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x0000000000074103 : xor byte ptr [rcx + rcx*4 + 0x60], cl ; cmp byte ptr [rcx + 0x5d5b7453], cl ; pop r12 ; ret
0x00000000000741a3 : xor byte ptr [rcx + rcx*4 + 0x61], cl ; cmp byte ptr [rax + 1], bh ; mov dword ptr [rbx + 0x74], edx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000089270 : xor byte ptr [rcx + rcx*4 - 0x10], cl ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000001808bc : xor byte ptr [rcx - 0x14], bh ; call qword ptr [rax]
0x00000000001942f8 : xor byte ptr [rcx - 0x675f0004], bl ; cld ; jmp qword ptr [rax]
0x0000000000111c7e : xor byte ptr [rcx - 0x75], al ; or byte ptr [r13 - 0x7c968b40], r8b ; call 0xffffffffc39a689c
0x000000000005f07d : xor byte ptr [rcx - 0x77], cl ; ret
0x000000000005dc35 : xor byte ptr [rcx - 0x7d], cl ; ret
0x00000000001932b4 : xor byte ptr [rcx - 5], ch ; call rax
0x0000000000193258 : xor byte ptr [rcx - 5], dl ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x00000000000fda2c : xor byte ptr [rcx], 0xc0 ; ret
0x00000000001b3600 : xor byte ptr [rcx], 0xf7 ; jmp qword ptr [rsi]
0x00000000001ac9a5 : xor byte ptr [rcx], al ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001aca35 : xor byte ptr [rcx], al ; add byte ptr [rax + 0x22], ch ; cmc ; jmp qword ptr [rcx]
0x0000000000146241 : xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx + 0x10], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x000000000014646c : xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov qword ptr [rbx], rax ; pop rax ; pop rdx ; pop rbx ; ret
0x0000000000075f5e : xor byte ptr [rcx], al ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x20] ; jmp rax
0x0000000000078332 : xor byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000007a007 : xor byte ptr [rcx], al ; add byte ptr [rax], al ; pop rbx ; ret
0x000000000006eeb3 : xor byte ptr [rcx], al ; add byte ptr [rax], al ; ret
0x00000000001098ea : xor byte ptr [rcx], al ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109937 ; ret
0x000000000005431d : xor byte ptr [rcx], ch ; ret
0x0000000000079809 : xor byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; pop r13 ; pop r14 ; ret
0x00000000000dfc60 : xor byte ptr [rcx], dh ; rcr byte ptr [rbx + 0x5d], 0x41 ; pop rsp ; ret
0x000000000010c05a : xor byte ptr [rcx], dh ; rol byte ptr [rbx - 0x69f0f601], 0xc0 ; ret
0x00000000000d72cf : xor byte ptr [rcx], dh ; ror byte ptr [rax - 0x7d], 0xc4 ; push 0x5c415d5b ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000013e98f : xor byte ptr [rcx], dh ; sar byte ptr [rdx - 1], 0x4c ; mov esi, esi ; mov rdi, rbp ; call r12
0x00000000001ac9a4 : xor byte ptr [rcx], r8b ; add byte ptr [rax + 0x21], ch ; cmc ; jmp qword ptr [rcx]
0x00000000001a6440 : xor byte ptr [rdi - 0x10], dh ; call qword ptr [rax]
0x0000000000193378 : xor byte ptr [rdi - 0x3f4f0005], bh ; sti ; push qword ptr [rax] ; ret 0xfffb
0x00000000000cddac : xor byte ptr [rdi], ch ; add byte ptr [rdi + rax*8], ah ; add al, byte ptr [rax] ; add byte ptr [rax], al ; mov eax, 0xffffffff ; ret
0x0000000000187b90 : xor byte ptr [rdi], ch ; cmc ; call rax
0x0000000000103099 : xor byte ptr [rdi], cl ; lahf ; ret 0xe883
0x0000000000112a42 : xor byte ptr [rdi], cl ; mov esi, 0xbe0f48cb ; ret
0x0000000000073130 : xor byte ptr [rdi], cl ; ret 0x4389
0x00000000000af297 : xor byte ptr [rdi], cl ; xchg eax, esp ; ret 0xf883
0x00000000001aab40 : xor byte ptr [rdi], dl ; hlt ; call qword ptr [rdx]
0x00000000000009e8 : xor byte ptr [rdx + 0x310e2046], ch ; rol qword ptr [rax + 0x4260a120], cl ; ret 0x4021
0x0000000000097582 : xor byte ptr [rdx + 0xd], 0x2a ; cmp rdi, 0xd ; je 0x975a6 ; xor byte ptr [rdx + 0xe], 0x2a ; ret
0x000000000009758c : xor byte ptr [rdx + 0xe], 0x2a ; ret
0x0000000000003189 : xor byte ptr [rdx + rsi + 0x32ac30f7], ch ; jle 0x3195 ; add ebp, esi ; mov eax, 0xa1a3e95a ; ret 0xba88
0x000000000000318d : xor byte ptr [rdx + rsi - 0x11fc0c82], ch ; mov eax, 0xa1a3e95a ; ret 0xba88
0x00000000001b0730 : xor byte ptr [rdx - 0xa], ah ; jmp qword ptr [rsi]
0x00000000001938b0 : xor byte ptr [rdx - 4], al ; push rax ; cld ; call rax
0x0000000000193860 : xor byte ptr [rdx - 4], cl ; call qword ptr [rax]
0x00000000001a3997 : xor byte ptr [rdx], al ; ret
0x000000000003e92c : xor byte ptr [rdx], dh ; adc eax, 0x358d4800 ; sti ; ret 0x14
0x0000000000193984 : xor byte ptr [rdx], dh ; cld ; inc dword ptr [rax - 0x2f0003cd] ; xor al, 0xfc ; jmp qword ptr [rax]
0x0000000000193738 : xor byte ptr [rip + 0x1f10fffc], bl ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x00000000000579a7 : xor byte ptr [rip - 0x76b40000], dl ; ret 0x894c
0x0000000000002d77 : xor byte ptr [rsi + 0x385bcaa9], cl ; call 0x306b3dd6
0x0000000000184096 : xor byte ptr [rsi + 0x4ce2e5dd], 0x67 ; add ch, byte ptr [rbp + rbp*2 + 0x5b] ; ret 0x6f9
0x000000000008b8d7 : xor byte ptr [rsi + 0xe], dh ; mov rax, qword ptr [rax + 8] ; test rax, rax ; jne 0x8b8dd ; ret
0x000000000016b78f : xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000016b78a : xor byte ptr [rsi + 0xf], ah ; out dx, eax ; push rsi ; xor byte ptr [rsi + 0xf], ah ; cmp byte ptr [rdi], dl ; ret 0x830f
0x000000000008f83c : xor byte ptr [rsi + 0xf], ah ; outsd dx, dword ptr [rsi] ; ret
0x0000000000090d0e : xor byte ptr [rsi + 0xf], ah ; xlatb ; ret
0x0000000000090d82 : xor byte ptr [rsi + 0xf], ah ; xlatb ; rol dword ptr [rbp - 0x4e7af040], 0 ; add byte ptr [rax], al ; xor rax, rax ; ret
0x0000000000007b18 : xor byte ptr [rsi + 3], dh ; add byte ptr [rax], al ; adc al, byte ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret 0x26
0x000000000003763d : xor byte ptr [rsi - 0x70], ah ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x000000000003927a : xor byte ptr [rsi - 0x73], cl ; cmp al, 0x33 ; call rax
0x00000000001932d4 : xor byte ptr [rsi - 5], dh ; call rax
0x00000000001acb60 : xor byte ptr [rsi], ah ; cmc ; jmp qword ptr [rcx]
0x00000000001937b8 : xor byte ptr [rsi], al ; cld ; inc dword ptr [rax - 0x2f0003f9] ; or ah, bh ; jmp qword ptr [rax]
0x00000000001936b8 : xor byte ptr [rsi], bl ; cld ; call qword ptr [rax]
0x00000000001942e0 : xor byte ptr [rsp + rdi*8 - 0x36c5f01], dl ; call qword ptr [rax]
0x0000000000193894 : xor byte ptr [rsp + rdi*8 - 1], al ; adc byte ptr [rsi - 4], al ; push rax ; cld ; call rax
0x00000000000c04a6 : xor byte ptr ss:[rax], al ; jne 0xc04c4 ; mov rax, rdx ; add rsp, 8 ; ret
0x00000000001a49f0 : xor ch, 0xee ; call qword ptr [rax]
0x0000000000090e8a : xor ch, byte ptr [rax + 0x48c3000d] ; lea eax, dword ptr [rip + 0xde11a] ; ret
0x0000000000100e55 : xor ch, byte ptr [rax + rax] ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003024a : xor ch, byte ptr [rax] ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003004a : xor ch, byte ptr [rdx] ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000aa088 : xor ch, ch ; mov byte ptr [rdi + 0x10], ch ; ret
0x00000000000aa09e : xor ch, ch ; mov byte ptr [rdi + 0x11], ch ; ret
0x00000000000aa0c0 : xor ch, ch ; mov byte ptr [rdi + 0x12], ch ; ret
0x00000000000aa0de : xor ch, ch ; mov byte ptr [rdi + 0x13], ch ; ret
0x00000000000aa0fe : xor ch, ch ; mov byte ptr [rdi + 0x14], ch ; ret
0x00000000000aa124 : xor ch, ch ; mov byte ptr [rdi + 0x15], ch ; ret
0x00000000000aa140 : xor ch, ch ; mov byte ptr [rdi + 0x16], ch ; ret
0x00000000000aa160 : xor ch, ch ; mov byte ptr [rdi + 0x17], ch ; ret
0x00000000000aa180 : xor ch, ch ; mov byte ptr [rdi + 0x18], ch ; ret
0x00000000000aa1a6 : xor ch, ch ; mov byte ptr [rdi + 0x19], ch ; ret
0x00000000000aa1c8 : xor ch, ch ; mov byte ptr [rdi + 0x1a], ch ; ret
0x00000000000aa1e6 : xor ch, ch ; mov byte ptr [rdi + 0x1b], ch ; ret
0x00000000000aa206 : xor ch, ch ; mov byte ptr [rdi + 0x1c], ch ; ret
0x00000000000aa222 : xor ch, ch ; mov byte ptr [rdi + 0x1d], ch ; ret
0x00000000000aa242 : xor ch, ch ; mov byte ptr [rdi + 0x1e], ch ; ret
0x00000000000aa262 : xor ch, ch ; mov byte ptr [rdi + 0x1f], ch ; ret
0x00000000000aa282 : xor ch, ch ; mov byte ptr [rdi + 0x20], ch ; ret
0x00000000000aa2a8 : xor ch, ch ; mov byte ptr [rdi + 0x21], ch ; ret
0x00000000000aa2f8 : xor ch, ch ; mov byte ptr [rdi + 0x40], ch ; ret
0x00000000000a9fce : xor ch, ch ; mov byte ptr [rdi + 0xa], ch ; ret
0x00000000000a9fec : xor ch, ch ; mov byte ptr [rdi + 0xb], ch ; ret
0x00000000000aa00c : xor ch, ch ; mov byte ptr [rdi + 0xc], ch ; ret
0x00000000000aa02e : xor ch, ch ; mov byte ptr [rdi + 0xd], ch ; ret
0x00000000000aa04e : xor ch, ch ; mov byte ptr [rdi + 0xe], ch ; ret
0x00000000000aa06e : xor ch, ch ; mov byte ptr [rdi + 0xf], ch ; ret
0x00000000000a9f04 : xor ch, ch ; mov byte ptr [rdi + 1], ch ; ret
0x00000000000a9f16 : xor ch, ch ; mov byte ptr [rdi + 2], ch ; ret
0x00000000000a9f2c : xor ch, ch ; mov byte ptr [rdi + 3], ch ; ret
0x00000000000a9f44 : xor ch, ch ; mov byte ptr [rdi + 4], ch ; ret
0x00000000000a9f5a : xor ch, ch ; mov byte ptr [rdi + 5], ch ; ret
0x00000000000a9f6c : xor ch, ch ; mov byte ptr [rdi + 6], ch ; ret
0x00000000000a9f8a : xor ch, ch ; mov byte ptr [rdi + 7], ch ; ret
0x00000000000a9f96 : xor ch, ch ; mov byte ptr [rdi + 8], ch ; ret
0x00000000000a9fac : xor ch, ch ; mov byte ptr [rdi + 9], ch ; ret
0x00000000000a9ef0 : xor ch, ch ; mov byte ptr [rdi], ch ; ret
0x00000000001ab810 : xor ch, cl ; hlt ; jmp qword ptr [rcx]
0x00000000000bc226 : xor cl, al ; call 0xffffffff89cdeb51
0x00000000000c38fc : xor cl, byte ptr [rax + rax] ; movzx edx, sil ; movsxd rax, dword ptr [rcx + rdx*4] ; add rax, rcx ; jmp rax
0x000000000006da05 : xor cl, byte ptr [rax - 0x73] ; cmp eax, 0x118013 ; movsxd rcx, dword ptr [rdi + rcx*4] ; add rcx, rdi ; jmp rcx
0x0000000000126c6d : xor cl, byte ptr [rax - 0x73] ; fcomp dword ptr gs:[rbx + 0x41] ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x000000000016b63d : xor cl, byte ptr [rax - 0x75] ; add dword ptr [rax - 0x77], ecx ; add cl, byte ptr [rax - 0x77] ; clc ; ret
0x0000000000087dcd : xor cl, byte ptr [rax - 0x75] ; add eax, 0x33909b ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87def ; call rax
0x000000000014391d : xor cl, byte ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x18 ; ret
0x0000000000134b8f : xor cl, byte ptr [rax - 0x77] ; jp 0x134ba1 ; ret
0x000000000013791f : xor cl, byte ptr [rax - 0x77] ; jp 0x137931 ; ret
0x0000000000137937 : xor cl, byte ptr [rax - 0x77] ; jp 0x137949 ; ret
0x00000000001381af : xor cl, byte ptr [rax - 0x77] ; jp 0x1381c1 ; ret
0x00000000001381c7 : xor cl, byte ptr [rax - 0x77] ; jp 0x1381d9 ; ret
0x00000000001381f7 : xor cl, byte ptr [rax - 0x77] ; jp 0x138209 ; ret
0x000000000008ff72 : xor cl, byte ptr [rax - 0x7d] ; ret 0x4801
0x000000000013345c : xor cl, byte ptr [rax - 0x7d] ; ret 0x8d04
0x000000000004eb32 : xor cl, byte ptr [rcx + 0x63] ; ret
0x000000000019b2e9 : xor cl, ch ; call qword ptr [rax]
0x0000000000112581 : xor cl, ch ; ret
0x00000000000a5a10 : xor cl, cl ; mov byte ptr [rax], cl ; mov rax, rdi ; ret
0x00000000001933a8 : xor cl, dl ; sti ; jmp rax
0x00000000001a58e9 : xor dh, al ; jmp rbx
0x000000000000318b : xor dh, bh ; xor byte ptr [rdx + rsi - 0x11fc0c82], ch ; mov eax, 0xa1a3e95a ; ret 0xba88
0x00000000001933a0 : xor dh, cl ; sti ; push qword ptr [rax + 0x30fffbcf] ; sar ebx, 1 ; jmp rax
0x0000000000131e84 : xor dh, dh ; ret 0xc707
0x0000000000034b50 : xor dl, 0xf ; adc dword ptr [rdi], eax ; and rax, rdx ; movq xmm0, rax ; ret
0x00000000000bead2 : xor dl, byte ptr [rax + 0x30] ; add byte ptr [rax - 0x77], cl ; jmp 0xffffffffbece742e
0x000000000000087b : xor dl, byte ptr [rcx] ; out 0xc, eax ; movabs eax, dword ptr [0x10c0449000e] ; ret 0x440c
0x000000000003e92d : xor dl, byte ptr [rip + 0x358d4800] ; sti ; ret 0x14
0x0000000000194b81 : xor dl, ch ; jmp rsp
0x000000000010a643 : xor dword ptr [rax + 0x2b], ebp ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x0000000000109e43 : xor dword ptr [rax + 0x2b], esi ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 2] ; mov rax, -1 ; ret
0x000000000002d86f : xor dword ptr [rax + 0x39], ecx ; ror byte ptr [rax - 0x39], 1 ; ret 0xffff
0x000000000008457e : xor dword ptr [rax + 0x39], ecx ; ror byte ptr [rax - 0x77], 1 ; ret
0x0000000000106ba6 : xor dword ptr [rax + 0x88], edi ; syscall ; cmp rax, -0x1000 ; ja 0x106bd1 ; ret
0x0000000000134cb1 : xor dword ptr [rax + rax - 0x37f10000], 0x8948c089 ; add bh, byte ptr [rax + 1] ; ret
0x0000000000100f8e : xor dword ptr [rax + rax], ebp ; add rsp, 0x98 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000100fdc : xor dword ptr [rax + rax], ebp ; ret
0x00000000000f8643 : xor dword ptr [rax - 0x2708ffd4], ecx ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x000000000009ee6b : xor dword ptr [rax - 0x39], ecx ; ret 0xffff
0x0000000000104183 : xor dword ptr [rax - 0x74b6000f], edi ; call rbx
0x000000000016cc91 : xor dword ptr [rax - 0x75], ecx ; clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16ccd3 ; xor eax, eax ; ret
0x000000000016dad1 : xor dword ptr [rax - 0x75], ecx ; clc ; mov rcx, qword ptr [rsi - 8] ; cmp rcx, rax ; jne 0x16db13 ; xor eax, eax ; ret
0x000000000005364d : xor dword ptr [rax - 0x77], ecx ; ror dword ptr [rax - 0x77], 1 ; ret 0x27e9
0x0000000000089d17 : xor dword ptr [rax - 0x7b], ecx ; ror byte ptr [rax - 0x77], 3 ; je 0x89e30 ; mov rsi, r14 ; call rax
0x00000000000a045b : xor dword ptr [rax - 0x7c], eax ; div byte ptr [rbp - 0x11] ; mov qword ptr [rdx], rcx ; ret
0x000000000009eaf0 : xor dword ptr [rax - 0x7d], ecx ; ret
0x00000000000ba58e : xor dword ptr [rax], 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000109a51 : xor dword ptr [rax], eax ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109a6e ; ret
0x000000000019cab5 : xor dword ptr [rax], eax ; add byte ptr [rax], bl ; fucompi st(1) ; jmp qword ptr [rsi]
0x000000000006516b : xor dword ptr [rax], eax ; add byte ptr [rbx - 0x4d76b], cl ; inc dword ptr [rbx - 0x78f0d006] ; ret 0x58
0x00000000000aade5 : xor dword ptr [rax], eax ; mov eax, dword ptr [rdx + 0x70] ; cmp eax, 1 ; je 0xaae19 ; cmp eax, 2 ; je 0xaae11 ; xor eax, eax ; ret
0x00000000000fee43 : xor dword ptr [rax], esp ; sub al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000fa143 : xor dword ptr [rbp + 0x2c], ebp ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x00000000000ec143 : xor dword ptr [rbp + 0x2d], ecx ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x000000000003c63a : xor dword ptr [rbp - 0x5f], 0xc6f7db31 ; add byte ptr [rax], al ; add byte ptr [rax], 0xf ; xchg eax, ebp ; ret
0x0000000000109af3 : xor dword ptr [rbx + 0x2b], 0x64d8f700 ; mov dword ptr [rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x00000000000025af : xor dword ptr [rbx + 0x6e], 0x70 ; in al, dx ; scasd eax, dword ptr [rdi] ; xchg eax, esi ; add byte ptr [rdx], al ; xchg dh, ch ; ret 0x88ad
0x00000000000865db : xor dword ptr [rbx + rdi*8], ecx ; call qword ptr [rax - 0x72b71077]
0x00000000000aae84 : xor dword ptr [rcx + rbx*8 - 0xd], 0x801f0fc3 ; add byte ptr [rax], al ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000f207f : xor dword ptr [rcx - 0x75], ecx ; add byte ptr [r8 - 0x7b], r9b ; sal byte ptr [rsi + rbp + 0x48], 0x83 ; call 0xffffffffc29868a1
0x000000000009e62c : xor dword ptr [rcx - 0x7d], ecx ; ret
0x00000000001aca7d : xor dword ptr [rcx], eax ; add al, ah ; and dh, ch ; jmp qword ptr [rcx]
0x00000000001acaad : xor dword ptr [rcx], eax ; add byte ptr [rax + 0x23], al ; cmc ; jmp qword ptr [rcx]
0x0000000000109221 : xor dword ptr [rcx], eax ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x10923e ; ret
0x00000000001acb45 : xor dword ptr [rcx], eax ; add byte ptr [rax], bl ; cmc ; jmp qword ptr [rcx]
0x0000000000108f43 : xor dword ptr [rdi + 0x2b], edi ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 2] ; mov eax, 0xffffffff ; ret
0x0000000000109743 : xor dword ptr [rdi + 0x2b], esi ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x0000000000147aa9 : xor dword ptr [rdi + 0x634f0004], 0xc ; mov ah, byte ptr [rsi + 0xf] ; je 0x147a87 ; lea r10, qword ptr [r10 + r9] ; jmp r10
0x000000000013764b : xor dword ptr [rdi - 0x11], ebp ; dec dword ptr [rax - 0x77] ; ret 0xc6eb
0x0000000000109443 : xor dword ptr [rdx + 0x2b], edi ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x00000000000c9bf3 : xor dword ptr [rdx + 0x2f], 0x64d8f700 ; mov dword ptr [rdx], eax ; mov eax, 0xffffffff ; ret
0x0000000000198e55 : xor dword ptr [rdx], eax ; add ah, al ; insd dword ptr [rdi], dx ; cli ; call rsp
0x00000000000e25de : xor dword ptr [rdx], eax ; add byte ptr [rax], al ; mov ecx, dword ptr [rbp + 4] ; test ecx, ecx ; jle 0xe266f ; xor ebx, ebx ; mov rdx, rax ; jmp 0xe260e
0x00000000000ff143 : xor dword ptr [rip - 0x389bffd4], ebx ; add byte ptr [rsi], ah ; add byte ptr [rax], al ; add byte ptr [rax - 1], bh ; ret
0x000000000019362c : xor dword ptr [rsi + 0x1b08fffd], esp ; cld ; call rax
0x00000000000f9043 : xor dword ptr [rsi + 0x2c], edi ; add bh, dh ; fsub dword ptr [rcx + rcx*4 + 1] ; or rax, 0xffffffffffffffff ; ret
0x0000000000193548 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; call rcx
0x0000000000193628 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193518 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; jmp rax
0x0000000000193544 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193624 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193514 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; jmp rax
0x00000000000fe843 : xor dword ptr [rsi], esp ; sub al, 0 ; neg eax ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x000000000006d27f : xor eax, 0x118558 ; movzx eax, al ; movsxd rax, dword ptr [rsi + rax*4] ; add rax, rsi ; jmp rax
0x00000000000453f0 : xor eax, 0x1cb ; call rax
0x00000000000fd833 : xor eax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x000000000007b0bd : xor eax, 0x294d0034 ; dec byte ptr [rax - 0x77] ; ret 0x294c
0x0000000000100895 : xor eax, 0x2c3836 ; mov rax, rdi ; mov byte ptr [r9 - 1], 0 ; ret
0x00000000000704cb : xor eax, 0x30 ; call rax
0x00000000000857c1 : xor eax, 0x33c33a ; jne 0x857e0 ; jmp 0x857fa
0x000000000008691b : xor eax, 0x33ceb8 ; xor eax, eax ; ret
0x00000000000645d8 : xor eax, 0x35c993 ; call rax
0x000000000005c940 : xor eax, 0x36462b ; call rax
0x000000000005c324 : xor eax, 0x364c47 ; call rax
0x00000000000596a0 : xor eax, 0x3678cb ; call rax
0x00000000000509fc : xor eax, 0x37056f ; call rax
0x000000000004db20 : xor eax, 0x37344b ; call rax
0x00000000001800f9 : xor eax, 0x39e1ffeb ; jmp 0x180105
0x0000000000180121 : xor eax, 0x39e1ffeb ; jmp 0x18012d
0x00000000001801e5 : xor eax, 0x3b57ffeb ; jmp 0x1801f1
0x00000000001821ba : xor eax, 0x444be0a8 ; sar byte ptr [rsi + rax*2], 0xf8 ; mov ch, 0x36 ; push rcx ; call qword ptr [rsi]
0x000000000016e613 : xor eax, 0x48000002 ; mov ecx, edx ; rep movsb byte ptr [rdi], byte ptr [rsi] ; ret
0x000000000004ab37 : xor eax, 0x48000565 ; add esp, 0x440 ; pop rbx ; ret
0x00000000000fe48f : xor eax, 0x48002c2a ; mov dword ptr [rax], 0xffffffff ; xor eax, eax ; ret
0x000000000013a3b1 : xor eax, 0x53a7b ; mov r8, rbx ; mov ecx, r12d ; mov rdi, rbp ; call 0x56660
0x000000000006c315 : xor eax, 0x64d8f700 ; mov dword ptr [rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x00000000001995a9 : xor eax, 0x65cfffb ; add al, byte ptr [rax] ; je 0x1995f1 ; sti ; jmp rsp
0x0000000000122d45 : xor eax, 0x6ab80 ; call 0x14782c
0x00000000001374cb : xor eax, 0x748b0005 ; ret 0x4804
0x000000000016ec35 : xor eax, 0x7701fa80 ; cmp dh, byte ptr [rdx + 2] ; mov byte ptr [rdi], cl ; vzeroupper ; ret
0x00000000001142a1 : xor eax, 0x7910c ; mov rdx, rax ; mov rdi, r14 ; xor eax, eax ; call 0x1105af
0x0000000000025ee7 : xor eax, 0x89410000 ; ret
0x00000000000da730 : xor eax, 0xad38b ; movzx ebp, bpl ; movsxd rax, dword ptr [rsi + rbp*4] ; add rax, rsi ; jmp rax
0x00000000000c59f3 : xor eax, 0xc1570 ; mov edx, ecx ; movsxd rax, dword ptr [rsi + rdx*4] ; add rax, rsi ; jmp rax
0x00000000000ca1bc : xor eax, 0xc1f5f ; mov rdi, r12 ; cmove rcx, rax ; xor eax, eax ; call 0x56490
0x00000000000c073d : xor eax, 0xc6152 ; add rax, rsi ; jmp rax
0x00000000000fd8b3 : xor eax, 0xd8f7002c ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x00000000000fd8ec : xor eax, 0xd8f7002c ; mov dword ptr fs:[rdx], eax ; mov eax, 0xffffffff ; ret
0x00000000000aac62 : xor eax, 0xdb859 ; movsxd rax, dword ptr [rsi + rdi*4] ; add rax, rsi ; jmp rax
0x0000000000002481 : xor eax, 0xdd410018 ; out 0xa9, al ; ret 0xbd07
0x000000000005cc6f : xor eax, 0xf001280 ; mov dh, 0xdb ; movsxd rax, dword ptr [rcx + rbx*4] ; add rax, rcx ; jmp rax
0x000000000007ed45 : xor eax, 0xffffdcd6 ; call rax
0x000000000007e885 : xor eax, 0xffffe196 ; call rax
0x000000000007e3cb : xor eax, 0xffffe650 ; call rax
0x000000000007cf9b : xor eax, 0xfffffa80 ; call rax
0x000000000007cd2b : xor eax, 0xfffffcf0 ; call rax
0x00000000000707b5 : xor eax, 0xfffffd46 ; call rax
0x0000000000020746 : xor eax, dword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb65 : xor eax, dword ptr [0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a6 : xor eax, dword ptr [0x30] ; call rax
0x0000000000035620 : xor eax, dword ptr [0x30] ; jmp rax
0x0000000000122ed9 : xor eax, dword ptr [0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e7 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c2 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c2 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87c : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3c : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ac : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd22 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf92 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76af : xor eax, dword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bc2 : xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a871 : xor eax, dword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f6 : xor eax, dword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000000645cf : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c937 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31b : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059697 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f3 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db17 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f8 : xor eax, dword ptr [0x30] ; test rax, rax ; je 0x11753c ; call rax
0x00000000000c7c26 : xor eax, dword ptr [0x30] ; test rax, rax ; je 0xc7c58 ; mov rsi, rdi ; xor edi, edi ; call rax
0x000000000004dae6 : xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x00000000001507d0 : xor eax, dword ptr [rax + 0x3b7701fa] ; jb 0x1507ea ; movzx ecx, byte ptr [rsi] ; mov byte ptr [rdi], cl ; ret
0x000000000005dbaf : xor eax, dword ptr [rax] ; add byte ptr [rax - 0x7d], cl ; ret
0x00000000000867ba : xor eax, dword ptr [rax] ; add byte ptr [rax], al ; add byte ptr [rax], al ; ret
0x0000000000109b11 : xor eax, dword ptr [rax] ; add byte ptr [rax], al ; syscall ; cmp rax, -0xfff ; jae 0x109b2e ; ret
0x0000000000032bc2 : xor eax, dword ptr [rax] ; add cl, al ; cli ; add al, byte ptr [rcx - 0xccc1e] ; inc dword ptr [rcx] ; ret 0xd089
0x000000000008aa4b : xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov eax, ebx ; pop rbx ; ret
0x000000000008a75e : xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; pop rbp ; pop r12 ; ret
0x000000000008a774 : xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; ret
0x000000000008a931 : xor eax, dword ptr [rax] ; add dword ptr [rax], eax ; add byte ptr [rax], al ; xor eax, eax ; ret
0x00000000000909ec : xor eax, dword ptr [rax] ; add rsp, 0x100 ; ret
0x000000000008a9e4 : xor eax, dword ptr [rax] ; add rsp, 0x18 ; ret
0x000000000008fb28 : xor eax, dword ptr [rax] ; add rsp, 8 ; ret
0x0000000000087913 : xor eax, dword ptr [rax] ; jb 0x87931 ; cmp rcx, qword ptr [rip + 0x33beba] ; jb 0x87944 ; sub rax, 0x10 ; ret
0x000000000008791c : xor eax, dword ptr [rax] ; jb 0x8793b ; sub rax, 0x10 ; ret
0x00000000000857c4 : xor eax, dword ptr [rax] ; jne 0x857dd ; jmp 0x857f7
0x000000000008aa45 : xor eax, dword ptr [rax] ; mov dword ptr [rip + 0x338d9b], 1 ; mov eax, ebx ; pop rbx ; ret
0x0000000000085765 : xor eax, dword ptr [rax] ; mov dword ptr fs:[rax], 0xc ; xor eax, eax ; ret
0x0000000000086823 : xor eax, dword ptr [rax] ; mov qword ptr [rax], rdi ; ret
0x0000000000086819 : xor eax, dword ptr [rax] ; mov qword ptr [rax], rsi ; mov rax, qword ptr [rip + 0x33a6bb] ; mov qword ptr [rax], rdi ; ret
0x000000000008fb21 : xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x333d5e], rax ; add rsp, 8 ; ret
0x000000000008fadf : xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x333da0], rax ; ret
0x0000000000086917 : xor eax, dword ptr [rax] ; mov qword ptr [rip + 0x33ceb8], rsi ; xor eax, eax ; ret
0x000000000008426e : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], r8 ; xor edi, edi ; call qword ptr [rax]
0x000000000008b55d : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call qword ptr [rdx]
0x0000000000084176 : xor eax, dword ptr [rax] ; mov qword ptr [rsp + 8], rcx ; mov rdi, r14 ; mov qword ptr [rsp + 0x10], r14 ; call qword ptr [rax]
0x0000000000087dd3 : xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87de9 ; call rax
0x000000000008fae6 : xor eax, dword ptr [rax] ; ret
0x000000000008fb07 : xor eax, dword ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000008fb3d : xor eax, dword ptr [rax] ; test eax, eax ; jne 0x8fb5a ; add rsp, 8 ; ret
0x0000000000088084 : xor eax, dword ptr [rax] ; test eax, eax ; js 0x88097 ; ret
0x000000000008a854 : xor eax, dword ptr [rax] ; test ebx, ebx ; je 0x8a877 ; xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x000000000008691e : xor eax, dword ptr [rax] ; xor eax, eax ; ret
0x00000000000843e6 : xor eax, dword ptr [rax] ; xor edi, edi ; call qword ptr [rax]
0x00000000000858d5 : xor eax, dword ptr [rax] ; xor esi, esi ; mov dword ptr fs:[rax], 0xc ; mov rax, rsi ; ret
0x000000000014ee39 : xor eax, dword ptr [rbp + 4] ; add byte ptr [rdi + 0x63], cl ; or al, 0x8a ; vpcmpeqb xmm0, xmm0, xmm1 ; lea r10, qword ptr [r10 + r9] ; jmp r10
0x000000000013e124 : xor eax, dword ptr [rbx - 0x6bf0fd08] ; ror byte ptr [rdi], 0xb6 ; ror byte ptr [rax - 0x7d], 0xc4 ; sbb byte ptr [rbx + 0x5d], bl ; ret
0x000000000010a3b3 : xor eax, dword ptr [rcx] ; add byte ptr [rax], al ; syscall ; cmp rax, -0x1000 ; ja 0x10a3d6 ; ret
0x0000000000196635 : xor eax, dword ptr [rcx] ; add byte ptr [rdx + rdi*4 - 0xe], al ; jmp rsp
0x00000000000dfced : xor eax, dword ptr [rcx] ; ret 0x6348
0x000000000012a71d : xor eax, dword ptr [rsi] ; add byte ptr [rax - 0x77], cl ; ret 0x1be
0x0000000000086719 : xor eax, dword ptr [rsi] ; or dword ptr [rax], eax ; add rsp, 0x80 ; ret
0x00000000000bcd00 : xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000074e1e : xor eax, eax ; add rsp, 0x10 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000c7f58 : xor eax, eax ; add rsp, 0x10 ; pop rbx ; ret
0x0000000000139f3c : xor eax, eax ; add rsp, 0x100 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000360cb : xor eax, eax ; add rsp, 0x140 ; pop rbx ; ret
0x0000000000097be0 : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000cca4c : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000124b12 : xor eax, eax ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x00000000000feae8 : xor eax, eax ; add rsp, 0x190 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000f9c20 : xor eax, eax ; add rsp, 0x198 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000013daa9 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000013dbf0 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; pop rbp ; pop r12 ; ret
0x00000000000bfdf5 : xor eax, eax ; add rsp, 0x20 ; pop rbx ; ret
0x000000000003b846 : xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000879fb : xor eax, eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x0000000000121238 : xor eax, eax ; add rsp, 0x28 ; ret
0x0000000000029cf9 : xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001399a7 : xor eax, eax ; add rsp, 0x38 ; pop rbx ; pop rbp ; ret
0x0000000000146a58 : xor eax, eax ; add rsp, 0x38 ; ret
0x000000000007059b : xor eax, eax ; add rsp, 0x48 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000001462bf : xor eax, eax ; add rsp, 0x48 ; ret
0x0000000000090410 : xor eax, eax ; add rsp, 0x58 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000d72d0 : xor eax, eax ; add rsp, 0x68 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000fe32c : xor eax, eax ; add rsp, 0x98 ; pop rbx ; pop rbp ; ret
0x00000000000fa330 : xor eax, eax ; add rsp, 0xa0 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000008018b : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000003b0c0 : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000003a30c : xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbbfe : xor eax, eax ; add rsp, 8 ; ret
0x000000000002dea0 : xor eax, eax ; and edi, 0xffffff80 ; sete al ; ret
0x00000000000d820f : xor eax, eax ; bt r8, rcx ; jb 0xd8196 ; ret
0x00000000001142ac : xor eax, eax ; call 0x1105a4
0x00000000000ca1c8 : xor eax, eax ; call 0x56484
0x000000000013a407 : xor eax, eax ; call 0x56654
0x000000000008b4a8 : xor eax, eax ; call 0x6e17a
0x000000000013ddb8 : xor eax, eax ; call r8
0x0000000000076b8a : xor eax, eax ; call rbx
0x000000000013dd6c : xor eax, eax ; call rcx
0x00000000000d80dc : xor eax, eax ; cmp byte ptr [rdi + 0x65], 0 ; setne al ; add eax, eax ; ret
0x000000000003a936 : xor eax, eax ; cmp byte ptr [rdi], 0 ; jne 0x3a948 ; pop rbx ; ret
0x00000000000d81f4 : xor eax, eax ; cmp cl, byte ptr [rsi] ; je 0xd8190 ; ret
0x00000000000d808d : xor eax, eax ; cmp ebx, 0xa ; je 0xd80fe ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x000000000010c05b : xor eax, eax ; cmp edi, 9 ; setbe al ; ret
0x00000000000746e7 : xor eax, eax ; cmp esi, 0xff ; setne al ; neg eax ; ret
0x00000000000d25d9 : xor eax, eax ; cmp esi, 1 ; sete al ; ret
0x0000000000078ca1 : xor eax, eax ; cmp qword ptr [rdi + 0x18], 0 ; setne al ; ret
0x00000000001039f9 : xor eax, eax ; cmp qword ptr [rsi], 0 ; je 0x103a11 ; ret
0x00000000000fa240 : xor eax, eax ; cmp rcx, rdx ; setb dl ; seta al ; movzx edx, dl ; sub eax, edx ; ret
0x00000000000fe46e : xor eax, eax ; cmp rdi, rdx ; ja 0xfe4a8 ; ret
0x000000000013e68c : xor eax, eax ; cmp rdx, rcx ; je 0x13e6a8 ; ret
0x0000000000116747 : xor eax, eax ; cmp rdx, rdi ; setae al ; ret
0x00000000000d093c : xor eax, eax ; jmp 0xd04eb
0x00000000001307f0 : xor eax, eax ; jmp rcx
0x00000000000769a6 : xor eax, eax ; lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x0000000000039d34 : xor eax, eax ; lea rsp, qword ptr [rbp - 0x28] ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x0000000000117805 : xor eax, eax ; leave ; ret
0x00000000001725a5 : xor eax, eax ; lock cmpxchg qword ptr [rip + 0x2512b0], rdx ; je 0x1725c0 ; ret
0x000000000011f8f6 : xor eax, eax ; mov byte ptr [rdx], 0 ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000012592d : xor eax, eax ; mov dword ptr [rdi + 0xc], edx ; mov qword ptr [rsi], rdi ; ret
0x00000000000fd9c0 : xor eax, eax ; mov dword ptr [rdi + 8], esi ; ret
0x000000000013d247 : xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000013e990 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, r14 ; mov rdi, rbp ; call r12
0x000000000013d143 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000013e866 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x000000000004dd7c : xor eax, eax ; mov edx, 1 ; jmp rax
0x00000000000f16c0 : xor eax, eax ; mov qword ptr [r8], rsi ; add rsp, 0x28 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008ba06 : xor eax, eax ; mov qword ptr [rbx + 8], rbp ; mov qword ptr [rbx], rdx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000003aef2 : xor eax, eax ; mov qword ptr [rdi + 8], rdx ; ret
0x00000000000559c3 : xor eax, eax ; mov qword ptr [rdi], r13 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000558f1 : xor eax, eax ; mov qword ptr [rdi], r14 ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x00000000000a0478 : xor eax, eax ; mov qword ptr [rdx], rcx ; ret
0x000000000008a9dd : xor eax, eax ; mov qword ptr [rip + 0x338e1a], rdx ; add rsp, 0x18 ; ret
0x000000000010af86 : xor eax, eax ; mov rbp, rsp ; lock cmpxchg qword ptr [rip + 0x2b628c], rdx ; je 0x10afa9 ; pop rbp ; ret
0x0000000000117661 : xor eax, eax ; mov rbp, rsp ; pop rbp ; ret
0x00000000000bb419 : xor eax, eax ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000768ca : xor eax, eax ; mov rcx, r14 ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012caa7 : xor eax, eax ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000ad318 : xor eax, eax ; mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000d607d : xor eax, eax ; mov rdx, r8 ; jmp 0xd609e
0x000000000012e715 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x000000000012fbd5 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x0000000000138468 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134df0 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500a : xor eax, eax ; mov rsi, qword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x00000000000acd89 : xor eax, eax ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x0000000000135657 : xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; jmp rcx
0x0000000000135677 : xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x10], 2 ; add rdi, 0x10 ; jmp rcx
0x0000000000138127 : xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x58], 2 ; add rdi, 0x58 ; jmp rcx
0x0000000000137847 : xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x68], 2 ; add rdi, 0x68 ; jmp rcx
0x000000000012f1c9 : xor eax, eax ; mov word ptr [rbx + 2], ax ; mov rax, qword ptr [rsp + 8] ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x000000000003b5e0 : xor eax, eax ; mov word ptr [rdi + 2], dx ; ret
0x00000000000d6dae : xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x00000000000e0a8e : xor eax, eax ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x0000000000096607 : xor eax, eax ; pop rbp ; pop r12 ; ret
0x000000000002b49c : xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
0x00000000000ce35a : xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret
0x000000000012e652 : xor eax, eax ; pop rbx ; pop rbp ; jmp rcx
0x000000000012fe0f : xor eax, eax ; pop rbx ; pop rbp ; jmp rdx
0x000000000002bba2 : xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000076940 : xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002268b : xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x00000000000bb985 : xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret
0x000000000003a4ed : xor eax, eax ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000079674 : xor eax, eax ; pop rbx ; pop rbp ; ret
0x00000000000341d6 : xor eax, eax ; pop rbx ; ret
0x00000000000ad198 : xor eax, eax ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000144b47 : xor eax, eax ; rep movsq qword ptr [rdi], qword ptr [rsi] ; mov qword ptr [rbp], rbx ; add rsp, 0x18 ; pop rbx ; pop rbp ; ret
0x0000000000126735 : xor eax, eax ; rep stosq qword ptr [rdi], rax ; mov eax, r8d ; ret
0x0000000000036296 : xor eax, eax ; ret
0x00000000000a135e : xor eax, eax ; sub eax, ecx ; ret
0x00000000000f849d : xor eax, eax ; sub rsp, -0x80 ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000119338 : xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x11935d ; ret
0x000000000007aff4 : xor eax, eax ; syscall ; cmp rax, -0x1000 ; ja 0x7b00f ; ret
0x00000000000d8234 : xor eax, eax ; test byte ptr [rcx + 0xc8], 0x40 ; jne 0xd8199 ; ret
0x0000000000078cd0 : xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
0x0000000000078ce0 : xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
0x0000000000139c73 : xor eax, eax ; test ebp, ebp ; setne al ; neg eax ; add rsp, 0x28 ; pop rbx ; pop rbp ; ret
0x00000000001166e3 : xor eax, eax ; test ecx, ecx ; jne 0x1166fc ; cmp qword ptr [rdi], 0 ; je 0x116705 ; ret
0x00000000000365aa : xor eax, eax ; test edx, edx ; sete al ; ret
0x0000000000139628 : xor eax, eax ; test edx, edx ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
0x000000000007c370 : xor eax, eax ; test rdx, rdx ; jne 0x7c387 ; ret
0x000000000002145c : xor eax, eax ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10c : xor eax, eax ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000003b238 : xor eax, ecx ; ret
0x0000000000033ef5 : xor eax, edx ; movzx edx, byte ptr [rdi] ; test dl, dl ; jne 0x33ee1 ; ret
0x000000000003a8b7 : xor eax, edx ; sub eax, edx ; ret
0x000000000003a8cb : xor eax, edx ; sub rax, rdx ; ret
0x0000000000100d7c : xor ebp, dword ptr [rax + rax] ; add byte ptr [rax], al ; add byte ptr [rax], al ; setne al ; add rsp, 8 ; movzx eax, al ; ret
0x00000000000403c8 : xor ebp, ebp ; add rax, rax ; sub rdx, rax ; jmp 0x4040d
0x000000000013bca7 : xor ebp, ebp ; add rsp, 0x20 ; mov rax, rbp ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000006bbf0 : xor ebp, ebp ; add rsp, 0x28 ; mov rax, rbp ; pop rbx ; pop rbp ; ret
0x0000000000103505 : xor ebp, esi ; lcall ptr [rax + 0x48] ; mov eax, ebx ; pop rdx ; pop rbx ; ret
0x000000000006f14c : xor ebx, dword ptr [rbx + 0x5d] ; pop r12 ; ret
0x00000000000f0ffa : xor ebx, dword ptr [rbx - 0x48] ; add eax, 0x5d000000 ; pop r12 ; ret
0x0000000000194ec9 : xor ebx, ebp ; push qword ptr [rsp + rdx*4] ; add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x000000000008a85a : xor ebx, ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x000000000006bb78 : xor ebx, ebx ; add rsp, 0x1008 ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x0000000000135e05 : xor ebx, ebx ; call 0x1f9c0
0x0000000000100ca6 : xor ebx, ebx ; jmp 0x100c6f
0x0000000000103345 : xor ebx, ebx ; mov dword ptr [rdx], eax ; add dword ptr [rbp], ebx ; xor eax, eax ; add rsp, 8 ; pop rbx ; pop rbp ; ret
0x00000000000bbb07 : xor ebx, ebx ; mov dword ptr fs:[rax], 0x4b ; mov rax, rbx ; pop rbx ; ret
0x0000000000143407 : xor ebx, ebx ; mov dword ptr fs:[rdx], eax ; add rsp, 0x510 ; mov rax, rbx ; pop rbx ; ret
0x000000000013ae36 : xor ebx, ebx ; mov r13, rax ; mov r12d, dword ptr [rax] ; jmp 0x13ae50
0x00000000000be4e4 : xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000002a696 : xor ebx, ebx ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x000000000006bc70 : xor ebx, ebx ; mov rax, rbx ; pop rbx ; ret
0x00000000000e25e9 : xor ebx, ebx ; mov rdx, rax ; jmp 0xe2603
0x000000000002aefe : xor ebx, ebx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000008a83a : xor ebx, ebx ; test eax, eax ; sete bl ; neg ebx ; add rsp, 0x10 ; mov eax, ebx ; pop rbx ; ret
0x00000000001177d1 : xor ecx, dword ptr [rax - 0x73] ; jne 0x1177c2 ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x00000000000ba402 : xor ecx, dword ptr [rax - 0x75] ; and al, 8 ; add rsp, 0x10 ; pop rbx ; ret
0x000000000010431d : xor ecx, dword ptr [rax - 0x75] ; jl 0x104351 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x00000000000c8564 : xor ecx, dword ptr [rax - 0x77] ; jnp 0xc8582 ; mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
0x00000000000f4549 : xor ecx, dword ptr [rax - 0x7d] ; ret
0x00000000000986f5 : xor ecx, dword ptr [rax - 0x7d] ; ret 0x4801
0x00000000001327f0 : xor ecx, dword ptr [rbp + 0x31] ; ret 0xc149
0x000000000008b5ac : xor ecx, dword ptr [rcx + rcx*4 - 0x31] ; call rcx
0x000000000008db01 : xor ecx, eax ; and rax, 0xffffffffffffffc0 ; sar rdx, cl ; test rdx, rdx ; je 0x8db31 ; bsf rax, rdx ; ret
0x0000000000034d80 : xor ecx, ecx ; addsd xmm0, xmm0 ; mov dword ptr [rdi], ecx ; ret
0x0000000000029873 : xor ecx, ecx ; call r15
0x000000000002145e : xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10e : xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000102d43 : xor ecx, esp ; sub eax, dword ptr [rax] ; neg eax ; mov dword ptr fs:[rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x000000000012b79c : xor edi, dword ptr [0x30] ; call rax
0x00000000000ee102 : xor edi, dword ptr [rcx] ; ret 0x894d
0x0000000000197fe9 : xor edi, eax ; jmp rsp
0x0000000000197fe1 : xor edi, eax ; lcall ptr [rax + rcx*8 + 0x33b40001] ; clc ; jmp rsp
0x0000000000195c69 : xor edi, ebp ; call rsp
0x00000000000801d9 : xor edi, edi ; call qword ptr [r15]
0x0000000000084275 : xor edi, edi ; call qword ptr [rax]
0x00000000000c7c35 : xor edi, edi ; call rax
0x00000000000d6503 : xor edi, edi ; jmp 0xd64cc
0x00000000000801aa : xor edi, edi ; mov r13, rdx ; call qword ptr [r15]
0x0000000000098c0f : xor edi, edi ; mov rax, rdi ; ret
0x0000000000020d8f : xor edi, edi ; test eax, eax ; setne dil ; add rsp, 8 ; mov eax, edi ; neg eax ; ret
0x000000000008b4a6 : xor edi, edi ; xor eax, eax ; call 0x6e17c
0x00000000001b3601 : xor edi, esi ; jmp qword ptr [rsi]
0x0000000000193989 : xor edi, esp ; call rax
0x000000000003a23f : xor edx, dword ptr [0x30] ; call rdx
0x0000000000001b10 : xor edx, dword ptr [rdx - 0x7b] ; mov bl, 0xee ; enter 0x59e7, 0x5b ; ret 0x2a63
0x000000000003f78c : xor edx, dword ptr [rip + 0x590ff200] ; shl byte ptr [rdi + rax*8], 0x22 ; add byte ptr [rax], al ; add byte ptr [rax - 0x39], cl ; ret
0x000000000003f715 : xor edx, dword ptr [rip - 0x3b7cb800] ; sub byte ptr [rbx + 0x5d], bl ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x0000000000021463 : xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000001196e5 : xor edx, edx ; add rsp, 0x18 ; div rbp ; mov rbx, rax ; mov rax, rbx ; pop rbx ; pop rbp ; ret
0x00000000000c86f0 : xor edx, edx ; add rsp, 0x98 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x00000000000f6f4f : xor edx, edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x00000000000c04c1 : xor edx, edx ; add rsp, 8 ; mov rax, rdx ; ret
0x00000000000aad99 : xor edx, edx ; and eax, 0x3fffc00 ; div ecx ; pop rbx ; mov eax, eax ; ret
0x0000000000139725 : xor edx, edx ; cmp byte ptr [rsp + 8], 0 ; setne dl ; add rsp, 0x70 ; mov eax, edx ; pop rbx ; ret
0x00000000000d6ab0 : xor edx, edx ; cmp dword ptr [rbx + 0xa4], 1 ; setg dl ; jmp 0xd6a58
0x0000000000050e6b : xor edx, edx ; div ecx ; add r8d, eax ; mov eax, r8d ; ret
0x0000000000079b99 : xor edx, edx ; div rbp ; mov rbx, rax ; mov rax, rbx ; pop rbx ; pop rbp ; pop r12 ; ret
0x0000000000060edc : xor edx, edx ; jmp 0x5d0f2
0x000000000007de73 : xor edx, edx ; jmp rax
0x00000000000ad110 : xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000c8707 : xor edx, edx ; mov dword ptr fs:[rax], 2 ; mov rax, rdx ; ret
0x00000000000cd051 : xor edx, edx ; mov eax, 0x3d ; syscall ; cmp rax, -0x1000 ; ja 0xcd079 ; ret
0x00000000000f704d : xor edx, edx ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000104ff8 : xor edx, edx ; mov esi, 1 ; mov rdi, rbp ; call rbx
0x00000000000a050d : xor edx, edx ; mov qword ptr [rdi], rdx ; ret
0x0000000000080454 : xor edx, edx ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000006ee20 : xor edx, edx ; mov rax, rdx ; ret
0x000000000012cdd0 : xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000000f77f1 : xor edx, edx ; mov rsi, r13 ; mov edi, ebx ; call 0x3580d
0x000000000012ccbe : xor edx, edx ; mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x000000000008fac3 : xor edx, edx ; or cl, cl ; cmove rax, rdx ; ret
0x00000000000aadb1 : xor edx, edx ; pop rbx ; and eax, 0x7ff80000 ; div ecx ; mov eax, eax ; ret
0x00000000000ca278 : xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret
0x000000000010e417 : xor edx, edx ; pop rbx ; mov eax, edx ; pop rbp ; pop r12 ; ret
0x0000000000070ec4 : xor edx, edx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; jmp rax
0x0000000000045f0a : xor edx, edx ; test eax, eax ; setne dl ; neg edx ; add rsp, 8 ; mov eax, edx ; pop rbx ; pop rbp ; ret
0x0000000000104ad1 : xor edx, edx ; xor esi, esi ; call rbx
0x00000000000f8106 : xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000008040c : xor esi, dword ptr [rax + rax] ; add rsp, 0x18 ; mov rax, rdx ; pop rbx ; pop rbp ; ret
0x000000000007f144 : xor esi, dword ptr [rax + rax] ; ret
0x00000000001327ee : xor esi, dword ptr [rbx] ; xor ecx, dword ptr [rbp + 0x31] ; ret 0xc149
0x00000000001537fb : xor esi, edi ; add eax, dword ptr [rax] ; movsxd rdx, dword ptr [r11 + rdx*4] ; lea rdx, qword ptr [r11 + rdx] ; jmp rdx
0x00000000001b3751 : xor esi, edi ; jmp rbx
0x000000000003d17e : xor esi, esi ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c3
0x00000000000dff2d : xor esi, esi ; call 0x91816
0x000000000004daed : xor esi, esi ; call rax
0x0000000000104ad3 : xor esi, esi ; call rbx
0x00000000000858d7 : xor esi, esi ; mov dword ptr fs:[rax], 0xc ; mov rax, rsi ; ret
0x0000000000119218 : xor esi, esi ; mov rax, rsi ; ret
0x0000000000104af5 : xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104b1a : xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b3e : xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104b5e : xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000000f8108 : xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001109fd : xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000000ea51e : xor esi, esi ; ret
0x000000000004540c : xor esi, esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003a5d9 : xor esi, esi ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000035525 : xor esi, esi ; test eax, eax ; sete sil ; mov dword ptr [rbx + 0x40], esi ; xor eax, eax ; pop rbx ; ret
0x0000000000187501 : xor esp, 0xf4810dff ; call qword ptr [rdi]
0x0000000000187505 : xor esp, 0xf48117ff ; jmp qword ptr [rcx]
0x0000000000193945 : xor esp, edi ; call qword ptr [rax]
0x00000000000f40eb : xor esp, esp ; jmp 0xf3f9a
0x00000000000f40ea : xor r12d, r12d ; jmp 0xf3f9b
0x000000000003d17d : xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c4
0x000000000003d17c : xor r14d, r14d ; add rax, rax ; sub rdx, rax ; jmp 0x3d1c5
0x0000000000076b89 : xor r8d, r8d ; call rbx
0x000000000004dd7b : xor r8d, r8d ; mov edx, 1 ; jmp rax
0x00000000000bb418 : xor r8d, r8d ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e0 : xor r8d, r8d ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c0 : xor r8d, r8d ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012caa6 : xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000ad317 : xor r8d, r8d ; mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000acd88 : xor r8d, r8d ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad197 : xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000002145b : xor r8d, r8d ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10b : xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000112580 : xor r9b, bpl ; ret
0x0000000000029872 : xor r9d, r9d ; call r15
0x00000000000fd832 : xor rax, 0x20 ; mov qword ptr [rsi + 0x48], rax ; ret
0x000000000006c314 : xor rax, 0x64d8f700 ; mov dword ptr [rcx], eax ; or rax, 0xffffffffffffffff ; ret
0x0000000000020745 : xor rax, qword ptr [0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb64 : xor rax, qword ptr [0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a5 : xor rax, qword ptr [0x30] ; call rax
0x000000000003561f : xor rax, qword ptr [0x30] ; jmp rax
0x0000000000122ed8 : xor rax, qword ptr [0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e6 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c1 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c1 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87b : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3b : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ab : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd21 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf91 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76ae : xor rax, qword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bc1 : xor rax, qword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a870 : xor rax, qword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f5 : xor rax, qword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000000645ce : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c936 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31a : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059696 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f2 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db16 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f7 : xor rax, qword ptr [0x30] ; test rax, rax ; je 0x11753d ; call rax
0x000000000004dae5 : xor rax, qword ptr [0x30] ; xor esi, esi ; call rax
0x0000000000020744 : xor rax, qword ptr fs:[0x30] ; add rsp, 0x28 ; jmp rax
0x000000000008fb63 : xor rax, qword ptr fs:[0x30] ; add rsp, 8 ; jmp rax
0x00000000000645a4 : xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003561e : xor rax, qword ptr fs:[0x30] ; jmp rax
0x0000000000122ed7 : xor rax, qword ptr fs:[0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e5 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c0 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c0 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87a : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3a : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707aa : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd20 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf90 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76ad : xor rax, qword ptr fs:[0x30] ; mov edi, 1 ; call rax
0x0000000000047bc0 : xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86f : xor rax, qword ptr fs:[0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f4 : xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x00000000000645cd : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c935 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c319 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059695 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f1 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db15 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f6 : xor rax, qword ptr fs:[0x30] ; test rax, rax ; je 0x11753e ; call rax
0x000000000004dae4 : xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000007610e : xor rax, rax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
0x000000000012f0fe : xor rax, rax ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret
0x000000000008dbd5 : xor rax, rax ; ret
0x0000000000033ef4 : xor rax, rdx ; movzx edx, byte ptr [rdi] ; test dl, dl ; jne 0x33ee2 ; ret
0x000000000003a8ca : xor rax, rdx ; sub rax, rdx ; ret
0x0000000000103504 : xor rbp, rsi ; lcall ptr [rax + 0x48] ; mov eax, ebx ; pop rdx ; pop rbx ; ret
0x000000000012b79b : xor rdi, qword ptr [0x30] ; call rax
0x000000000012b79a : xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a23e : xor rdx, qword ptr [0x30] ; call rdx
0x000000000003a23d : xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000f8105 : xor rdx, rdx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001a58e8 : xor sil, al ; jmp rbx
0x00000000001877b0 : xor spl, 0xff ; sar byte ptr [rdi - 0xc], 1 ; call rax
