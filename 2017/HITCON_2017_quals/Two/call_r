0x00000000001b35e0 : adc al, 0 ; add byte ptr [rax], al ; mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x00000000001a92b0 : adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9257 ; call rbx
0x00000000001a47f0 : adc al, 0 ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001a9298 : adc al, 0 ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x0000000000198bb8 : adc al, 0x13 ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x000000000003a240 : adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x00000000000203e6 : adc al, 0x48 ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000196b00 : adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198188 : adc al, 0x57 ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000196b50 : adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b80 : adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000122628 : adc al, 0x97 ; add byte ptr [rax], al ; test rax, rax ; je 0x12264a ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x0000000000186d2c : adc al, 0xe0 ; call rax
0x00000000001720a1 : adc al, 0xe8 ; test rdx, rdx ; je 0x1720b1 ; call rdx
0x0000000000198bc1 : adc al, 0xfa ; call rsp
0x00000000001993c9 : adc al, 0xfb ; call rsp
0x00000000001961e5 : adc al, 1 ; add byte ptr [rdi + rbp - 0xf], al ; call rsp
0x0000000000021dcd : adc al, byte ptr [r8] ; mov rdi, r12 ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000021dce : adc al, byte ptr [rax] ; mov rdi, r12 ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000021764 : adc al, byte ptr [rax] ; mov rdi, rbx ; call r14
0x00000000000206ff : adc byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000203e9 : adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x00000000001226d7 : adc byte ptr [rax - 0x75], cl ; je 0x12270a ; or byte ptr [rcx + rcx*4 - 0x11], cl ; call r12
0x00000000000ad45b : adc byte ptr [rax - 0x75], cl ; je 0xad490 ; sbb byte ptr [rcx + rcx*4 - 0x16], cl ; mov rdi, rbp ; call rbx
0x00000000000ad71b : adc byte ptr [rax - 0x75], cl ; je 0xad750 ; sbb byte ptr [rcx + rcx*4 - 0xe], cl ; mov rdi, rbp ; call rbx
0x00000000000ad9fb : adc byte ptr [rax - 0x75], cl ; je 0xada30 ; sbb byte ptr [rcx + rcx*4 - 0xe], cl ; mov rdi, rbp ; call rbx
0x00000000000843bb : adc byte ptr [rax - 0x77], cl ; and al, 8 ; call rsi
0x000000000012e71b : adc byte ptr [rax - 0x77], cl ; out dx, eax ; call r14
0x00000000001721b1 : adc byte ptr [rax - 0x7b], cl ; push qword ptr [rbp + rdx + 0x48] ; mov eax, dword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d6 ; call rax
0x000000000019380c : adc byte ptr [rax - 4], 0xff ; adc byte ptr [rbx - 4], al ; call rax
0x00000000001936bc : adc byte ptr [rax], ah ; cld ; push rax ; and esp, edi ; call rax
0x00000000001a3a0b : adc byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x0000000000105584 : adc byte ptr [rax], al ; jne 0x104b05 ; mov esi, 3 ; mov rdi, r12 ; call rbx
0x0000000000105603 : adc byte ptr [rax], al ; jne 0x104b2a ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105643 : adc byte ptr [rax], al ; jne 0x104b4e ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105883 : adc byte ptr [rax], al ; jne 0x104b6e ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001058e3 : adc byte ptr [rax], al ; jne 0x104be7 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001056a3 : adc byte ptr [rax], al ; jne 0x104c73 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105923 : adc byte ptr [rax], al ; jne 0x104c93 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105903 : adc byte ptr [rax], al ; jne 0x104d0c ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001055c3 : adc byte ptr [rax], al ; jne 0x104da8 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105683 : adc byte ptr [rax], al ; jne 0x104dcc ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001058c3 : adc byte ptr [rax], al ; jne 0x104dec ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001058a3 : adc byte ptr [rax], al ; jne 0x104e65 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105663 : adc byte ptr [rax], al ; jne 0x104ef1 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105863 : adc byte ptr [rax], al ; jne 0x104f11 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105843 : adc byte ptr [rax], al ; jne 0x104f8a ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105564 : adc byte ptr [rax], al ; jne 0x105032 ; mov esi, 3 ; mov rdi, r12 ; call rbx
0x00000000001055e3 : adc byte ptr [rax], al ; jne 0x105057 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105723 : adc byte ptr [rax], al ; jne 0x10507b ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105763 : adc byte ptr [rax], al ; jne 0x10509b ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105743 : adc byte ptr [rax], al ; jne 0x105114 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105703 : adc byte ptr [rax], al ; jne 0x1051a0 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105823 : adc byte ptr [rax], al ; jne 0x1051c0 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105803 : adc byte ptr [rax], al ; jne 0x105239 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105623 : adc byte ptr [rax], al ; jne 0x1052d5 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x00000000001056e3 : adc byte ptr [rax], al ; jne 0x1052f9 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001057e3 : adc byte ptr [rax], al ; jne 0x105319 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001057c3 : adc byte ptr [rax], al ; jne 0x105392 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001056c3 : adc byte ptr [rax], al ; jne 0x10541e ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001057a3 : adc byte ptr [rax], al ; jne 0x10543e ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105783 : adc byte ptr [rax], al ; jne 0x1054b7 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000029869 : adc byte ptr [rbp + rcx*4 - 0x7c], cl ; and al, 0x98 ; add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x00000000001a1460 : adc byte ptr [rbp - 0x13], bh ; call rsi
0x0000000000193810 : adc byte ptr [rbx - 4], al ; call rax
0x0000000000038652 : adc byte ptr [rcx + rcx*4 - 0x19], cl ; call r15
0x00000000000768d7 : adc byte ptr [rcx + rcx*4 - 0x19], cl ; call rbx
0x00000000001a8360 : adc byte ptr [rcx], ah ; call rsi
0x000000000004540b : adc byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000110a03 : adc byte ptr [rdi + 0x2000004], bh ; call rax
0x000000000019373c : adc byte ptr [rdi], bl ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000193898 : adc byte ptr [rsi - 4], al ; push rax ; cld ; call rax
0x000000000003a23c : adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x00000000000645a3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000000f76ac : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bbf : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86e : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000001174f5 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x11753f ; call rax
0x000000000004dae3 : adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x000000000012b799 : adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000000299b4 : adc dword ptr [rax], eax ; mov rdi, rbx ; call r12
0x000000000013ebf2 : adc dword ptr [rsp + 0x28], eax ; call rdx
0x00000000001721b6 : adc eax, 0x20478b48 ; test rax, rax ; je 0x1721d1 ; call rax
0x0000000000103f9f : adc eax, 0x49fff1ba ; mov edi, dword ptr [rsi] ; call rbx
0x0000000000198bb9 : adc edi, edx ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x00000000001949c1 : adc edx, ebp ; call rsp
0x0000000000198097 : add ah, ah ; clc ; call rsp
0x0000000000195d7f : add ah, ah ; jo 0x195d7e ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000019572f : add ah, ah ; out dx, al ; call rsp
0x000000000019584f : add ah, ah ; push rdi ; out dx, al ; call rsp
0x0000000000194b3f : add ah, ah ; sub ebp, edx ; call rsp
0x0000000000196767 : add ah, al ; dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x0000000000198e57 : add ah, al ; insd dword ptr [rdi], dx ; cli ; call rsp
0x0000000000198ed7 : add ah, al ; jbe 0x198ee1 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000019565f : add ah, al ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000187e04 : add ah, bl ; cmc ; call rsp
0x0000000000196a8f : add ah, dh ; and al, 0xf4 ; call rsp
0x00000000001988d7 : add ah, dh ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019676f : add ah, dl ; call rsp
0x0000000000199327 : add ah, dl ; clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000195157 : add ah, dl ; jg 0x19514b ; call rsp
0x000000000019592f : add ah, dl ; jle 0x195925 ; call rsp
0x00000000001b3f2b : add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x0000000000197f87 : add ah, dl ; sub bh, al ; call rsp
0x000000000019837f : add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000195e3f : add ah, dl ; xchg eax, esp ; out dx, eax ; call rsp
0x00000000001050fa : add al, 0 ; add byte ptr [rax], al ; je 0x10574f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105081 : add al, 0 ; add byte ptr [rax], al ; je 0x10576f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549d : add al, 0 ; add byte ptr [rax], al ; je 0x10578f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105424 : add al, 0 ; add byte ptr [rax], al ; je 0x1057af ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105378 : add al, 0 ; add byte ptr [rax], al ; je 0x1057cf ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052ff : add al, 0 ; add byte ptr [rax], al ; je 0x1057ef ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010521f : add al, 0 ; add byte ptr [rax], al ; je 0x10580f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a6 : add al, 0 ; add byte ptr [rax], al ; je 0x10582f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f70 : add al, 0 ; add byte ptr [rax], al ; je 0x10584f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef7 : add al, 0 ; add byte ptr [rax], al ; je 0x10586f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b54 : add al, 0 ; add byte ptr [rax], al ; je 0x10588f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4b : add al, 0 ; add byte ptr [rax], al ; je 0x1058af ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd2 : add al, 0 ; add byte ptr [rax], al ; je 0x1058cf ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcd : add al, 0 ; add byte ptr [rax], al ; je 0x1058ef ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf2 : add al, 0 ; add byte ptr [rax], al ; je 0x10590f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c79 : add al, 0 ; add byte ptr [rax], al ; je 0x10592f ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b7f : add al, 0 ; add byte ptr [rax], al ; mov esi, 1 ; call rbx
0x0000000000104ba1 : add al, 0 ; add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r15 ; call rbx
0x000000000011f6bb : add al, 0 ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x00000000000204a3 : add al, 0 ; add byte ptr [rcx - 0x75], cl ; sbb byte ptr [r8 - 0x7b], r9b ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x0000000000110a05 : add al, 0 ; add byte ptr [rdx], al ; call rax
0x000000000013d24a : add al, 0x24 ; add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x000000000008a18a : add al, 0x24 ; je 0x8a26e ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008aeac : add al, 0x24 ; je 0x8af9e ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000011f6b7 : add al, 0x24 ; mov ecx, 0x400 ; mov rdx, r15 ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000012ccc8 : add al, 0x24 ; mov rcx, rax ; call r12
0x0000000000108d75 : add al, 0x25 ; rol byte ptr [rdx], 1 ; add byte ptr [rax], al ; pop rax ; pop rdi ; call rax
0x00000000000645a7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000122eda : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e8 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87d : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3d : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ad : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd23 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf93 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76b0 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bc3 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a872 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000000645d0 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c938 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31c : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059698 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f4 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db18 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f9 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x11753b ; call rax
0x00000000000c7c27 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xc7c57 ; mov rsi, rdi ; xor edi, edi ; call rax
0x000000000004dae7 : add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x00000000001986a8 : add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000022462 : add al, 0x3a ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000106964 : add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000196718 : add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x00000000000ad19f : add al, 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x0000000000196b4c : add al, 0x57 ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198190 : add al, 0x58 ; clc ; call rsp
0x0000000000198708 : add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000195898 : add al, 0x62 ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x00000000001a145c : add al, 0x7b ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x0000000000198f90 : add al, 0x8f ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000196380 : add al, 0x98 ; int1 ; call rsp
0x0000000000198950 : add al, 0xbb ; stc ; call rsp
0x0000000000104cf8 : add al, 0xc ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000002adfa : add al, 0xe0 ; test rax, rax ; je 0x2ae0a ; call rax
0x00000000001a835c : add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b9a5c : add al, 1 ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000195fcd : add al, 1 ; add byte ptr [rax + rbx*8 - 0x11], al ; call rsp
0x00000000001a13d7 : add al, bh ; jns 0x1a13cc ; call rcx
0x00000000001b7497 : add al, bl ; cmp eax, edi ; call rax
0x000000000019909d : add al, byte ptr [r8] ; xor al, 0xa3 ; cli ; call rsp
0x0000000000198bb6 : add al, byte ptr [rax] ; adc al, 0x13 ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x00000000001993c6 : add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x0000000000198f8e : add al, byte ptr [rax] ; add al, 0x8f ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x000000000019894e : add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000108d78 : add al, byte ptr [rax] ; add byte ptr [rax + 0x5f], bl ; call rax
0x0000000000104318 : add al, byte ptr [rax] ; add byte ptr [rax - 0x75], cl ; xor ecx, dword ptr [rax - 0x75] ; jl 0x104356 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000104d8e : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x1055cf ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503d : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x1055ef ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b10 : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x10560f ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bb : add al, byte ptr [rax] ; add byte ptr [rax], al ; je 0x10562f ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104c38 : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104d5d : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r13 ; call rbx
0x0000000000104fef : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x0000000000104d62 : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x0000000000104c2e : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000104ba6 : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x000000000013d24c : add al, byte ptr [rax] ; add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x0000000000108d70 : add al, byte ptr [rax] ; add byte ptr [rcx + rcx*4 + 4], ah ; and eax, 0x2d0 ; pop rax ; pop rdi ; call rax
0x000000000019947e : add al, byte ptr [rax] ; and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000198ede : add al, byte ptr [rax] ; and al, 0x77 ; cli ; call rsp
0x00000000001988d6 : add al, byte ptr [rax] ; hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019939e : add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000198f96 : add al, byte ptr [rax] ; je 0x198f2e ; cli ; call rsp
0x000000000019932e : add al, byte ptr [rax] ; je 0x199330 ; cli ; call rsp
0x0000000000198bbe : add al, byte ptr [rax] ; mov ah, 0x14 ; cli ; call rsp
0x00000000001993fe : add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000199396 : add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x00000000001b9bae : add al, byte ptr [rax] ; mov al, 0x8f ; sti ; call rcx
0x0000000000122cec : add al, byte ptr [rax] ; mov rdi, r14 ; call rbx
0x0000000000198946 : add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x000000000019959e : add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x0000000000198bf6 : add al, byte ptr [rax] ; push rsp ; sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001b9a5e : add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x00000000001991ae : add al, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x0000000000198bfe : add al, byte ptr [rax] ; xor al, 0x1c ; cli ; call rsp
0x000000000019909e : add al, byte ptr [rax] ; xor al, 0xa3 ; cli ; call rsp
0x0000000000122516 : add al, ch ; and al, 0x98 ; add byte ptr [rax], al ; test rax, rax ; je 0x122534 ; mov rdi, rbx ; call rax
0x000000000012221e : add al, ch ; sbb al, 0x9b ; add byte ptr [rax], al ; test rax, rax ; je 0x12223c ; mov rdi, rbx ; call rax
0x0000000000199fd7 : add al, ch ; test eax, ebp ; call rsp
0x00000000001a632f : add al, dh ; jno 0x1a6327 ; call rdi
0x00000000001af7df : add al, dh ; jrcxz 0x1af7dc ; call rsi
0x00000000001a5a7f : add al, dh ; lodsb al, byte ptr [rsi] ; cli ; call rsp
0x0000000000089ae4 : add bl, al ; mov rsi, rbx ; mov rdi, rax ; call rcx
0x0000000000089f1d : add byte ptr [r15], r9b ; test bl, ch ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x1e], cl ; mov rdi, r15 ; call rax
0x000000000008a43d : add byte ptr [r15], r9b ; test bl, cl ; add dword ptr [rax], eax ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x000000000008b038 : add byte ptr [r15], r9b ; test byte ptr [rax + 0x48000000], cl ; mov esi, ebp ; mov rdi, r12 ; call rax
0x0000000000115a04 : add byte ptr [r8], 0 ; add byte ptr [rax], al ; mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x0000000000108d7a : add byte ptr [rax + 0x5f], bl ; call rax
0x00000000001a3a13 : add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x00000000001ad66f : add byte ptr [rax + rax + 0x3d1c0000], cl ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x000000000019804f : add byte ptr [rax + rax*2], ah ; clc ; call rsp
0x000000000019f1ff : add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x000000000011f6ba : add byte ptr [rax + rax], al ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x0000000000199fcf : add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a8357 : add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b2f8f : add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001a885f : add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x00000000001af7d7 : add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7e4 ; call rsi
0x00000000001b40e7 : add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f6 ; call rcx
0x00000000001a13cf : add byte ptr [rax + rax], ch ; add byte ptr [rax], al ; jl 0x1a145c ; add byte ptr [rax], al ; clc ; jns 0x1a13d4 ; call rcx
0x000000000019f8f7 : add byte ptr [rax + rax], ch ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001b3f27 : add byte ptr [rax + rax], cl ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a3a0f : add byte ptr [rax + rax], cl ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x00000000001a2977 : add byte ptr [rax + rax], cl ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b748f : add byte ptr [rax + rax], cl ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1457 : add byte ptr [rax + rax], cl ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a57 : add byte ptr [rax + rax], cl ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x00000000001a70c7 : add byte ptr [rax + rax], dh ; add byte ptr [rax], al ; je 0x1a70b1 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a74e7 : add byte ptr [rax + rax], dh ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x00000000001a92af : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9258 ; call rbx
0x00000000001a47ef : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001a9297 : add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x00000000001b7ca7 : add byte ptr [rax + rax], dl ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000195027 : add byte ptr [rax + rbp*2 - 0x15], ah ; call rsp
0x000000000019710f : add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197124 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000196ca7 : add byte ptr [rax + rbp*2], dh ; cmc ; call rsp
0x000000000019f203 : add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001967a7 : add byte ptr [rax + rbx*2 - 0xd], ah ; call rsp
0x000000000019818f : add byte ptr [rax + rbx*2], al ; clc ; call rsp
0x000000000019637f : add byte ptr [rax + rbx*4], al ; int1 ; call rsp
0x0000000000195fcf : add byte ptr [rax + rbx*8 - 0x11], al ; call rsp
0x0000000000196b57 : add byte ptr [rax + rdi*2 - 0xc], ah ; call rsp
0x0000000000196b87 : add byte ptr [rax + rdx*4 - 0xc], al ; call rsp
0x00000000001a297b : add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001a47f7 : add byte ptr [rax - 0x2f], bl ; out dx, al ; call rcx
0x00000000001a4647 : add byte ptr [rax - 0x34], bl ; out dx, al ; call rcx
0x0000000000020405 : add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012b795 : add byte ptr [rax - 0x3f], cl ; iretd ; adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000001a92b7 : add byte ptr [rax - 0x6e], bh ; call rbx
0x00000000000ad19b : add byte ptr [rax - 0x73], cl ; add al, 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x0000000000122edf : add byte ptr [rax - 0x73], cl ; cmp eax, 0x2a2815 ; call rax
0x00000000000453ed : add byte ptr [rax - 0x73], cl ; xor eax, 0x1cb ; call rax
0x00000000000704c8 : add byte ptr [rax - 0x73], cl ; xor eax, 0x30 ; call rax
0x000000000007ed42 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffdcd6 ; call rax
0x000000000007e882 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe196 ; call rax
0x000000000007e3c8 : add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe650 ; call rax
0x000000000007cf98 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffa80 ; call rax
0x000000000007cd28 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffcf0 ; call rax
0x00000000000707b2 : add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffd46 ; call rax
0x0000000000080a31 : add byte ptr [rax - 0x75], cl ; add eax, 0x340477 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a53 ; call rax
0x0000000000136db0 : add byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x0000000000086dff : add byte ptr [rax - 0x75], cl ; je 0x86e2e ; call rax
0x00000000000877ef : add byte ptr [rax - 0x75], cl ; je 0x87821 ; sub byte ptr [rcx + rcx*4 - 0x19], cl ; call rax
0x00000000000877ee : add byte ptr [rax - 0x75], cl ; je 0x87822 ; sub byte ptr [rcx + rcx*4 - 0x19], cl ; call rax
0x00000000000bc19e : add byte ptr [rax - 0x75], cl ; je 0xbc1d3 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc1d8 ; call r15
0x00000000000bc691 : add byte ptr [rax - 0x75], cl ; je 0xbc6c6 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc6cb ; call r15
0x00000000000d024f : add byte ptr [rax - 0x75], cl ; mov ebp, 0xfffffcf8 ; call r12
0x0000000000088477 : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391ef : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000003946f : add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x00000000001046a7 : add byte ptr [rax - 0x75], cl ; xor byte ptr [rax - 0x75], cl ; jge 0x10467e ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000645d5 : add byte ptr [rax - 0x75], cl ; xor eax, 0x35c993 ; call rax
0x000000000005c93d : add byte ptr [rax - 0x75], cl ; xor eax, 0x36462b ; call rax
0x000000000005c321 : add byte ptr [rax - 0x75], cl ; xor eax, 0x364c47 ; call rax
0x000000000005969d : add byte ptr [rax - 0x75], cl ; xor eax, 0x3678cb ; call rax
0x00000000000509f9 : add byte ptr [rax - 0x75], cl ; xor eax, 0x37056f ; call rax
0x000000000004db1d : add byte ptr [rax - 0x75], cl ; xor eax, 0x37344b ; call rax
0x000000000010431a : add byte ptr [rax - 0x75], cl ; xor ecx, dword ptr [rax - 0x75] ; jl 0x104354 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000145d19 : add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; and al, 0x10 ; call rax
0x000000000012fbde : add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; or al, 0x24 ; call rcx
0x000000000008b03f : add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, r12 ; call rax
0x000000000008a191 : add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x0000000000104ffe : add byte ptr [rax - 0x77], cl ; out dx, eax ; call rbx
0x0000000000116289 : add byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115a09 : add byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov rdx, r13 ; call rax
0x0000000000104acd : add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000114ead : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rbx + 0x48], 0x8b ; jp 0x114f14 ; mov rsi, rdx ; call rax
0x000000000012262b : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rcx + rcx + 0x48], 0x8d ; cmp eax, 0x2a3068 ; call rax
0x00000000000f8100 : add byte ptr [rax - 0x7b], cl ; sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000019f207 : add byte ptr [rax - 1], bl ; in al, dx ; call rsp
0x0000000000115a05 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x0000000000088473 : add byte ptr [rax], 0 ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000013ebe9 : add byte ptr [rax], 0 ; add byte ptr [rsi + 0xf], ah ; out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x00000000001a74ef : add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x00000000001b7caf : add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x00000000001a92ae : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9259 ; call rbx
0x00000000001a47ee : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001a9296 : add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x00000000001a145e : add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001a835e : add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001949be : add byte ptr [rax], al ; adc edx, ebp ; call rsp
0x00000000001b3f29 : add byte ptr [rax], al ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x0000000000195896 : add byte ptr [rax], al ; add al, 0x62 ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x00000000001a145a : add byte ptr [rax], al ; add al, 0x7b ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001a835a : add byte ptr [rax], al ; add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b9a5a : add byte ptr [rax], al ; add al, 1 ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000089ae2 : add byte ptr [rax], al ; add bl, al ; mov rsi, rbx ; mov rdi, rax ; call rcx
0x00000000001a3a11 : add byte ptr [rax], al ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x00000000001ad66d : add byte ptr [rax], al ; add byte ptr [rax + rax + 0x3d1c0000], cl ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x000000000019f1fd : add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fcd : add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001b40e5 : add byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f8 ; call rcx
0x000000000019f8f5 : add byte ptr [rax], al ; add byte ptr [rax + rax], ch ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001b3f25 : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a3a0d : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x00000000001a2975 : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b748d : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1455 : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a55 : add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x00000000001a70c5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dh ; add byte ptr [rax], al ; je 0x1a70b3 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a74e5 : add byte ptr [rax], al ; add byte ptr [rax + rax], dh ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x00000000001a92ad : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925a ; call rbx
0x00000000001a47ed : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001a9295 : add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x000000000019f201 : add byte ptr [rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001a2979 : add byte ptr [rax], al ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x000000000002db60 : add byte ptr [rax], al ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000122edd : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; cmp eax, 0x2a2815 ; call rax
0x00000000000453eb : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0x1cb ; call rax
0x00000000000704c6 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0x30 ; call rax
0x000000000007ed40 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffdcd6 ; call rax
0x000000000007e880 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe196 ; call rax
0x000000000007e3c6 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xffffe650 ; call rax
0x000000000007cf96 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffa80 ; call rax
0x000000000007cd26 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffcf0 ; call rax
0x00000000000707b0 : add byte ptr [rax], al ; add byte ptr [rax - 0x73], cl ; xor eax, 0xfffffd46 ; call rax
0x0000000000136dae : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x0000000000086dfd : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0x86e30 ; call rax
0x00000000000bc19c : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0xbc1d5 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc1da ; call r15
0x00000000000bc68f : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0xbc6c8 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc6cd ; call r15
0x00000000000d024d : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; mov ebp, 0xfffffcf8 ; call r12
0x0000000000088475 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000003946d : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x00000000000645d3 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x35c993 ; call rax
0x000000000005c93b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x36462b ; call rax
0x000000000005c31f : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x364c47 ; call rax
0x000000000005969b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x3678cb ; call rax
0x00000000000509f7 : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x37056f ; call rax
0x000000000004db1b : add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; xor eax, 0x37344b ; call rax
0x0000000000145d17 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; and al, 0x10 ; call rax
0x000000000008b03d : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, r12 ; call rax
0x000000000008a18f : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x0000000000104ffc : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, eax ; call rbx
0x0000000000116287 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115a07 : add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov rdx, r13 ; call rax
0x00000000000f80fe : add byte ptr [rax], al ; add byte ptr [rax - 0x7b], cl ; sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001a92ac : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925b ; call rbx
0x00000000001a47ec : add byte ptr [rax], al ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001ad66b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax + 0x3d1c0000], cl ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x000000000019f1fb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x0000000000199fcb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001b40e3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40fa ; call rcx
0x000000000019f8f3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], ch ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001b3f23 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a2973 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b748b : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1453 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a53 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], cl ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x00000000001a70c3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dh ; add byte ptr [rax], al ; je 0x1a70b5 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a92ab : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a925c ; call rbx
0x00000000001a47eb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x0000000000086dfb : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0x86e32 ; call rax
0x00000000001b3f24 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a3a0c : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x000000000019f1fc : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001a2974 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b748c : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1454 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a54 : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000199fcc : add byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x000000000017e4d3 : add byte ptr [rax], al ; add byte ptr [rax], al ; add dh, bh ; xlatb ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x000000000014663c : add byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000017e4dc : add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x000000000017d68c : add byte ptr [rax], al ; add byte ptr [rax], al ; call rsp
0x00000000001b40e4 : add byte ptr [rax], al ; add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f9 ; call rcx
0x0000000000115a06 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x0000000000088474 : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000003946c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000086dfc : add byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x00000000001ad66c : add byte ptr [rax], al ; add byte ptr [rax], al ; mov word ptr [rax], es ; add byte ptr [rax], al ; sbb al, 0x3d ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x000000000019f8f4 : add byte ptr [rax], al ; add byte ptr [rax], al ; sub al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001a70c4 : add byte ptr [rax], al ; add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b4 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001b3f26 : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a3a0e : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x000000000019f1fe : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001a2976 : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b748e : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1456 : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a56 : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000199fce : add byte ptr [rax], al ; add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x000000000002986f : add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x0000000000076a8f : add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov rdi, r12 ; call rbx
0x00000000000769ac : add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x18 ; mov rdi, r12 ; call rbx
0x00000000001b7ca9 : add byte ptr [rax], al ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x00000000001a74e9 : add byte ptr [rax], al ; add byte ptr [rbx + rbx*8 + 0x5f200000], dl ; int1 ; call rbx
0x00000000001b7491 : add byte ptr [rax], al ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1459 : add byte ptr [rax], al ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a59 : add byte ptr [rax], al ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x000000000002f5fa : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x11], cl ; call rax
0x0000000000104c3e : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x11], cl ; call rbx
0x000000000008b192 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x11], cl ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x00000000000c9129 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x13], cl ; mov rdi, rbx ; call r12
0x0000000000104d72 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x19], cl ; call rbx
0x0000000000089f22 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x1e], cl ; mov rdi, r15 ; call rax
0x0000000000089d21 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0xa], cl ; call rax
0x0000000000104ba7 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; call rbx
0x0000000000104bb6 : add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x00000000001a92b1 : add byte ptr [rax], al ; add byte ptr [rcx + rdi*8], bl ; add byte ptr [rax - 0x6e], bh ; call rbx
0x000000000012e712 : add byte ptr [rax], al ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x10 ; mov rdi, rbp ; call r14
0x00000000001109fa : add byte ptr [rax], al ; add byte ptr [rcx], dh ; test byte ptr [rax - 0x75], 0x54 ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000001ad671 : add byte ptr [rax], al ; add byte ptr [rdi + 0x59280001], bl ; cmc ; call rdx
0x00000000000f76b3 : add byte ptr [rax], al ; add byte ptr [rdi + 1], bh ; call rax
0x00000000001a8861 : add byte ptr [rax], al ; add byte ptr [rdi + rbp*8], cl ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x000000000019f8f9 : add byte ptr [rax], al ; add byte ptr [rdi + rbx*2 + 0x1b900000], ah ; in eax, dx ; call rbx
0x0000000000105220 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test bh, dl ; add eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000105187 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051a7 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4c : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052bc : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104bce : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rcx], cl ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000104ed8 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ef8 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105425 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b55 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rdx], ah ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x00000000001050fb : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105019 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsi], bh ; add eax, 0xf6310000 ; mov rdi, r12 ; call rbx
0x0000000000104cf3 : add byte ptr [rax], al ; add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001a8359 : add byte ptr [rax], al ; add byte ptr [rdx + rbp*8], al ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001a13d1 : add byte ptr [rax], al ; add byte ptr [rdx + rdi*2], bh ; add al, bh ; jns 0x1a13d2 ; call rcx
0x000000000013ebea : add byte ptr [rax], al ; add byte ptr [rsi + 0xf], ah ; out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x0000000000104b80 : add byte ptr [rax], al ; add byte ptr [rsi + 1], bh ; call rbx
0x0000000000104d6d : add byte ptr [rax], al ; add byte ptr [rsi + 1], bh ; mov rdi, r12 ; call rbx
0x0000000000104c39 : add byte ptr [rax], al ; add byte ptr [rsi + 1], bh ; mov rdi, r13 ; call rbx
0x0000000000104bb1 : add byte ptr [rax], al ; add byte ptr [rsi + 1], bh ; mov rdi, r14 ; call rbx
0x0000000000104feb : add byte ptr [rax], al ; add byte ptr [rsi + 2], bh ; mov rdi, r12 ; call rbx
0x0000000000104d5e : add byte ptr [rax], al ; add byte ptr [rsi + 2], bh ; mov rdi, r13 ; call rbx
0x0000000000104c2a : add byte ptr [rax], al ; add byte ptr [rsi + 2], bh ; mov rdi, r14 ; call rbx
0x0000000000104ba2 : add byte ptr [rax], al ; add byte ptr [rsi + 2], bh ; mov rdi, r15 ; call rbx
0x0000000000199fd1 : add byte ptr [rax], al ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a47f1 : add byte ptr [rax], al ; add byte ptr [rsi + rbp*4 - 0x2ea80000], bl ; out dx, al ; call rcx
0x00000000001af7d9 : add byte ptr [rax], al ; add byte ptr [rsi + rbx*2 - 0x1c0fffff], al ; cmc ; call rsi
0x00000000001b2f91 : add byte ptr [rax], al ; add byte ptr [rsi + rdx*4], bh ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001108f8 : add byte ptr [rax], al ; add cl, byte ptr [rax - 0x75] ; push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x000000000017e4d5 : add byte ptr [rax], al ; add dh, bh ; xlatb ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x00000000001a297a : add byte ptr [rax], al ; and al, 0x90 ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001a74ee : add byte ptr [rax], al ; and byte ptr [rdi - 0xf], bl ; call rbx
0x00000000000bc657 : add byte ptr [rax], al ; call r15
0x00000000000645ab : add byte ptr [rax], al ; call rax
0x0000000000104b86 : add byte ptr [rax], al ; call rbx
0x000000000017e4de : add byte ptr [rax], al ; call rdi
0x000000000003a244 : add byte ptr [rax], al ; call rdx
0x000000000017d68e : add byte ptr [rax], al ; call rsp
0x00000000001a13d6 : add byte ptr [rax], al ; clc ; jns 0x1a13cd ; call rcx
0x00000000001a8356 : add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b2f8e : add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001a885e : add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x00000000001af7d6 : add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7e5 ; call rsi
0x00000000001b40e6 : add byte ptr [rax], al ; cmp al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f7 ; call rcx
0x00000000001b2f92 : add byte ptr [rax], al ; cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001b7492 : add byte ptr [rax], al ; cmp al, 0xdb ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x0000000000194ee6 : add byte ptr [rax], al ; cmp ebp, ebx ; call rsp
0x000000000019d23a : add byte ptr [rax], al ; in al, 0x38 ; add byte ptr [rax], al ; push rax ; and dl, ch ; call rcx
0x000000000019572e : add byte ptr [rax], al ; in al, 0x42 ; out dx, al ; call rsp
0x000000000019584e : add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000195d7e : add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000195926 : add byte ptr [rax], al ; ja 0x195926 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x000000000010501a : add byte ptr [rax], al ; je 0x10556d ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aed : add byte ptr [rax], al ; je 0x10558d ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d90 : add byte ptr [rax], al ; je 0x1055cd ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503f : add byte ptr [rax], al ; je 0x1055ed ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b12 : add byte ptr [rax], al ; je 0x10560d ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bd : add byte ptr [rax], al ; je 0x10562d ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b36 : add byte ptr [rax], al ; je 0x10564d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed9 : add byte ptr [rax], al ; je 0x10566d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db4 : add byte ptr [rax], al ; je 0x10568d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c5b : add byte ptr [rax], al ; je 0x1056ad ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105406 : add byte ptr [rax], al ; je 0x1056cd ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052e1 : add byte ptr [rax], al ; je 0x1056ed ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105188 : add byte ptr [rax], al ; je 0x10570d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105063 : add byte ptr [rax], al ; je 0x10572d ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050fc : add byte ptr [rax], al ; je 0x10574d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105083 : add byte ptr [rax], al ; je 0x10576d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549f : add byte ptr [rax], al ; je 0x10578d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105426 : add byte ptr [rax], al ; je 0x1057ad ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010537a : add byte ptr [rax], al ; je 0x1057cd ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105301 : add byte ptr [rax], al ; je 0x1057ed ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105221 : add byte ptr [rax], al ; je 0x10580d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a8 : add byte ptr [rax], al ; je 0x10582d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f72 : add byte ptr [rax], al ; je 0x10584d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef9 : add byte ptr [rax], al ; je 0x10586d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b56 : add byte ptr [rax], al ; je 0x10588d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4d : add byte ptr [rax], al ; je 0x1058ad ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd4 : add byte ptr [rax], al ; je 0x1058cd ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcf : add byte ptr [rax], al ; je 0x1058ed ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf4 : add byte ptr [rax], al ; je 0x10590d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c7b : add byte ptr [rax], al ; je 0x10592d ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000019514e : add byte ptr [rax], al ; je 0x1951de ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195c66 : add byte ptr [rax], al ; je 0x195ca0 ; out dx, eax ; call rsp
0x000000000019e3f6 : add byte ptr [rax], al ; je 0x19e3eb ; call rdi
0x000000000019e3f5 : add byte ptr [rax], al ; je 0x19e3ec ; call rdi
0x00000000001a70ca : add byte ptr [rax], al ; je 0x1a70ae ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a13d2 : add byte ptr [rax], al ; jl 0x1a1459 ; add byte ptr [rax], al ; clc ; jns 0x1a13d1 ; call rcx
0x00000000001a92b6 : add byte ptr [rax], al ; js 0x1a9251 ; call rbx
0x0000000000076a90 : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769ad : add byte ptr [rax], al ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x0000000000122ede : add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453ec : add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c7 : add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c7 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e881 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed41 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707b1 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd27 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf97 : add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x0000000000195666 : add byte ptr [rax], al ; mov ah, 0x2d ; out dx, al ; call rsp
0x00000000001a80be : add byte ptr [rax], al ; mov al, 0x16 ; call rcx
0x00000000001a929e : add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x00000000001a5f16 : add byte ptr [rax], al ; mov byte ptr [rcx - 0x10], ah ; call rdx
0x0000000000108d71 : add byte ptr [rax], al ; mov dword ptr fs:[0x2d0], eax ; pop rax ; pop rdi ; call rax
0x00000000000f76b4 : add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bc7 : add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000104b81 : add byte ptr [rax], al ; mov esi, 1 ; call rbx
0x0000000000104d6e : add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r12 ; call rbx
0x0000000000104c3a : add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104bb2 : add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r14 ; call rbx
0x0000000000104fec : add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r12 ; call rbx
0x0000000000104d5f : add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r13 ; call rbx
0x0000000000104c2b : add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r14 ; call rbx
0x0000000000104ba3 : add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r15 ; call rbx
0x0000000000116288 : add byte ptr [rax], al ; mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115a08 : add byte ptr [rax], al ; mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x000000000003a876 : add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x00000000000204a4 : add byte ptr [rax], al ; mov rax, qword ptr [r13 + 0x18] ; test rax, rax ; je 0x204c2 ; mov rdi, rbp ; call rax
0x000000000012f973 : add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12f991 ; mov rdi, rbx ; call rax
0x000000000012fce5 : add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12fd03 ; mov rdi, rbx ; call rax
0x00000000001354e1 : add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1354ff ; mov rdi, r12 ; call rax
0x0000000000136daf : add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136dcd ; mov rdi, rbp ; call rax
0x00000000000cd4d6 : add byte ptr [rax], al ; mov rax, qword ptr [rbx] ; mov rdx, qword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f7 ; call rdx
0x00000000000c912a : add byte ptr [rax], al ; mov rbp, r13 ; mov rdi, rbx ; call r12
0x0000000000104acc : add byte ptr [rax], al ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000000d024e : add byte ptr [rax], al ; mov rdi, qword ptr [rbp - 0x308] ; call r12
0x0000000000104d73 : add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x000000000002f5fb : add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x0000000000104c3f : add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x000000000008b193 : add byte ptr [rax], al ; mov rdi, r13 ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x0000000000104bb7 : add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000104ba8 : add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000104ffd : add byte ptr [rax], al ; mov rdi, rbp ; call rbx
0x000000000006da76 : add byte ptr [rax], al ; mov rdi, rbx ; call r8
0x000000000006d76f : add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x0000000000145d18 : add byte ptr [rax], al ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbdd : add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013d24e : add byte ptr [rax], al ; mov rdi, rsp ; call rdx
0x0000000000088476 : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391ee : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000003946e : add byte ptr [rax], al ; mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000089f23 : add byte ptr [rax], al ; mov rdx, r12 ; mov rdi, r15 ; call rax
0x0000000000037614 : add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x000000000008a443 : add byte ptr [rax], al ; mov rdx, r15 ; mov rdi, r8 ; call rax
0x000000000011f6bc : add byte ptr [rax], al ; mov rdx, r15 ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000008ac74 : add byte ptr [rax], al ; mov rdx, rbp ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x00000000001046a6 : add byte ptr [rax], al ; mov rsi, qword ptr [rax] ; mov rdi, qword ptr [rbp - 0x40] ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x0000000000104319 : add byte ptr [rax], al ; mov rsi, qword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000645d4 : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c93c : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c320 : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x000000000005969c : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f8 : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db1c : add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000000bc19d : add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000086dfe : add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000089d22 : add byte ptr [rax], al ; mov rsi, r14 ; call rax
0x000000000008b03e : add byte ptr [rax], al ; mov rsi, rbp ; mov rdi, r12 ; call rax
0x000000000008a190 : add byte ptr [rax], al ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x00000000001ad66e : add byte ptr [rax], al ; mov word ptr [rax], es ; add byte ptr [rax], al ; sbb al, 0x3d ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x00000000001b35e2 : add byte ptr [rax], al ; mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x0000000000194d9e : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d92 ; call rsp
0x000000000019491e : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; or ch, dl ; call rsp
0x000000000019f8fa : add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001a70ce : add byte ptr [rax], al ; nop ; int1 ; call rdx
0x000000000019f8fe : add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000001a8862 : add byte ptr [rax], al ; or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x0000000000108d79 : add byte ptr [rax], al ; pop rax ; pop rdi ; call rax
0x00000000001a47f6 : add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x00000000001a92b2 : add byte ptr [rax], al ; pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9255 ; call rbx
0x000000000019d23e : add byte ptr [rax], al ; push rax ; and dl, ch ; call rcx
0x00000000001b7ca6 : add byte ptr [rax], al ; push rsp ; add byte ptr [rax], al ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000195206 : add byte ptr [rax], al ; push rsp ; jg 0x1951fd ; call rsp
0x00000000001b7caa : add byte ptr [rax], al ; push rsp ; jrcxz 0x1b7cb9 ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000195726 : add byte ptr [rax], al ; push rsp ; out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x000000000019e3f2 : add byte ptr [rax], al ; pushfq ; add byte ptr [rax], al ; je 0x19e3ef ; call rdi
0x00000000001a47f2 : add byte ptr [rax], al ; pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x000000000013ebeb : add byte ptr [rax], al ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000001a297e : add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x000000000002db61 : add byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001ad672 : add byte ptr [rax], al ; sbb al, 0x3d ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x00000000001a8866 : add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x00000000001a929a : add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x00000000001a13ce : add byte ptr [rax], al ; sub al, 0 ; add byte ptr [rax], al ; jl 0x1a145d ; add byte ptr [rax], al ; clc ; jns 0x1a13d5 ; call rcx
0x000000000019f8f6 : add byte ptr [rax], al ; sub al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x0000000000195846 : add byte ptr [rax], al ; test byte ptr [rdi - 0x12], dl ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x00000000001af7da : add byte ptr [rax], al ; test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7e1 ; call rsi
0x00000000001174fd : add byte ptr [rax], al ; test rax, rax ; je 0x117537 ; call rax
0x0000000000122222 : add byte ptr [rax], al ; test rax, rax ; je 0x122238 ; mov rdi, rbx ; call rax
0x000000000012251a : add byte ptr [rax], al ; test rax, rax ; je 0x122530 ; mov rdi, rbx ; call rax
0x000000000012262a : add byte ptr [rax], al ; test rax, rax ; je 0x122648 ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x00000000000c7c2b : add byte ptr [rax], al ; test rax, rax ; je 0xc7c53 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f80ff : add byte ptr [rax], al ; test rax, rax ; je 0xf815e ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001b40ea : add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f3 ; call rcx
0x00000000001a74ea : add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x0000000000195d86 : add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d7f ; call rsp
0x0000000000195e36 : add byte ptr [rax], al ; xchg eax, esp ; out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x00000000001a70c6 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b2 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a74e6 : add byte ptr [rax], al ; xor al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x000000000012e713 : add byte ptr [rax], al ; xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x000000000004daeb : add byte ptr [rax], al ; xor esi, esi ; call rax
0x0000000000104af3 : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104b18 : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b3c : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104b5c : add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001109fb : add byte ptr [rax], al ; xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x0000000000029870 : add byte ptr [rax], al ; xor r9d, r9d ; call r15
0x00000000001a8867 : add byte ptr [rax], bl ; cmp edx, esi ; call rsi
0x00000000001ad677 : add byte ptr [rax], ch ; pop rcx ; cmc ; call rdx
0x00000000001a835f : add byte ptr [rax], dl ; and edx, esi ; call rsi
0x00000000001a145f : add byte ptr [rax], dl ; jge 0x1a1454 ; call rsi
0x00000000001b3f28 : add byte ptr [rax], r8b ; add ah, dl ; movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001a3a10 : add byte ptr [rax], r8b ; add byte ptr [rax + 0x62c80000], bh ; out dx, al ; call rsi
0x000000000019f200 : add byte ptr [rax], r8b ; add byte ptr [rax + rbx*2 - 0xa80000], ch ; in al, dx ; call rsp
0x00000000001a2978 : add byte ptr [rax], r8b ; add byte ptr [rax + rdx*4], ah ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001b7490 : add byte ptr [rax], r8b ; add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001a1458 : add byte ptr [rax], r8b ; add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x00000000001b9a58 : add byte ptr [rax], r8b ; add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000199fd0 : add byte ptr [rax], r8b ; add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000000cd4d5 : add byte ptr [rax], r8b ; mov rax, qword ptr [rbx] ; mov rdx, qword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f8 ; call rdx
0x0000000000029871 : add byte ptr [rbp + 0x31], al ; leave ; call r15
0x00000000000acd87 : add byte ptr [rbp + 0x31], al ; ror byte ptr [rcx + rcx*4 - 0x12], 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000001986af : add byte ptr [rbp + rax*2 - 7], dh ; call rsp
0x0000000000197117 : add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000199397 : add byte ptr [rbp + rcx + 0x5384fffb], dh ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000197857 : add byte ptr [rbp + rcx*2 - 9], dh ; call rsp
0x0000000000076a91 : add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov rdi, r12 ; call rbx
0x00000000000769ae : add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x18 ; mov rdi, r12 ; call rbx
0x0000000000076b7e : add byte ptr [rbp + rcx*4 + 0x4d], cl ; enter -0x76b4, -0x17 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000019443f : add byte ptr [rbp + rdi*4 - 0x18], dh ; call rsp
0x0000000000196c9f : add byte ptr [rbp - 0xb], dh ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x000000000002c34f : add byte ptr [rbx + 0x48], dl ; mov eax, dword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2c36d ; call rax
0x000000000002c34e : add byte ptr [rbx + 0x48], dl ; mov eax, dword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2c36e ; call rax
0x00000000001b7cab : add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x000000000019747f : add byte ptr [rbx + rax*8 - 0xa], ah ; call rsp
0x0000000000198bf7 : add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001a74eb : add byte ptr [rbx + rbx*8 + 0x5f200000], dl ; int1 ; call rbx
0x00000000001b7493 : add byte ptr [rbx + rbx*8], bh ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x00000000001963e7 : add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000194ee7 : add byte ptr [rbx + rdi - 0x15], ah ; call rsp
0x00000000001a145b : add byte ptr [rbx + rdi*2], al ; add byte ptr [rax], al ; adc byte ptr [rbp - 0x13], bh ; call rsi
0x000000000019894f : add byte ptr [rbx + rdi*4], al ; stc ; call rsp
0x0000000000198bb7 : add byte ptr [rbx + rdx], dl ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x00000000001963ff : add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x0000000000196667 : add byte ptr [rbx + rsi*8 - 0xe], ah ; call rsp
0x0000000000194328 : add byte ptr [rbx - 0x6d8f0004], dl ; cld ; call rax
0x0000000000197ac7 : add byte ptr [rbx - 9], dh ; call rsp
0x000000000019909f : add byte ptr [rbx], dh ; cli ; call rsp
0x0000000000037657 : add byte ptr [rcx + rax - 0xd], cl ; mov rdx, r13 ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x00000000001966d7 : add byte ptr [rcx + rax*2 + 0x37acfff3], ah ; add dword ptr [rax], eax ; and al, 0x42 ; call rsp
0x000000000019447f : add byte ptr [rcx + rax*8 - 0x18], al ; call rsp
0x00000000001b9a5b : add byte ptr [rcx + rax], al ; add al, byte ptr [rax] ; rol cl, 1 ; clc ; call rcx
0x0000000000197f57 : add byte ptr [rcx + rbp - 8], al ; call rsp
0x0000000000194ca7 : add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x0000000000108d72 : add byte ptr [rcx + rcx*4 + 4], ah ; and eax, 0x2d0 ; pop rax ; pop rdi ; call rax
0x000000000002f5fc : add byte ptr [rcx + rcx*4 - 0x11], cl ; call rax
0x0000000000104c40 : add byte ptr [rcx + rcx*4 - 0x11], cl ; call rbx
0x000000000008b194 : add byte ptr [rcx + rcx*4 - 0x11], cl ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x00000000000c912b : add byte ptr [rcx + rcx*4 - 0x13], cl ; mov rdi, rbx ; call r12
0x0000000000037615 : add byte ptr [rcx + rcx*4 - 0x16], cl ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000104d74 : add byte ptr [rcx + rcx*4 - 0x19], cl ; call rbx
0x0000000000021dcf : add byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000089f24 : add byte ptr [rcx + rcx*4 - 0x1e], cl ; mov rdi, r15 ; call rax
0x0000000000089d23 : add byte ptr [rcx + rcx*4 - 0xa], cl ; call rax
0x0000000000104ba9 : add byte ptr [rcx + rcx*4 - 1], cl ; call rbx
0x000000000008a444 : add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x000000000011f6bd : add byte ptr [rcx + rcx*4 - 6], cl ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x0000000000104bb8 : add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x0000000000194437 : add byte ptr [rcx + rdi*4 - 0x18], dl ; call rsp
0x000000000019932f : add byte ptr [rcx + rdi*8 - 6], dh ; call rsp
0x00000000001a92b3 : add byte ptr [rcx + rdi*8], bl ; add byte ptr [rax - 0x6e], bh ; call rbx
0x00000000001986a7 : add byte ptr [rcx + rdi], al ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001949bf : add byte ptr [rcx + rdx - 0x16], ah ; call rsp
0x0000000000195c67 : add byte ptr [rcx + rsi - 0x11], dh ; call rsp
0x00000000000204a5 : add byte ptr [rcx - 0x75], cl ; sbb byte ptr [r8 - 0x7b], r9b ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x000000000017209a : add byte ptr [rcx - 0x77], cl ; sbb al, 0x24 ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b8 ; call rdx
0x0000000000196a4f : add byte ptr [rcx - 0xd], dl ; call rsp
0x00000000001985ff : add byte ptr [rcx - 7], dl ; call rsp
0x0000000000193740 : add byte ptr [rcx], ah ; cld ; call rax
0x000000000002aefd : add byte ptr [rcx], dh ; fisttp dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000012e714 : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x10 ; mov rdi, rbp ; call r14
0x0000000000138467 : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134def : add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000003a5d8 : add byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xca ; adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x00000000001109fc : add byte ptr [rcx], dh ; test byte ptr [rax - 0x75], 0x54 ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000001ad673 : add byte ptr [rdi + 0x59280001], bl ; cmc ; call rdx
0x00000000000f76b5 : add byte ptr [rdi + 1], bh ; call rax
0x00000000001961e7 : add byte ptr [rdi + rbp - 0xf], al ; call rsp
0x00000000001a8863 : add byte ptr [rdi + rbp*8], cl ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x000000000019f8fb : add byte ptr [rdi + rbx*2 + 0x1b900000], ah ; in eax, dx ; call rbx
0x000000000019947f : add byte ptr [rdi + rbx], ah ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x00000000001968cf : add byte ptr [rdi + rcx*4 - 0xd], al ; call rsp
0x0000000000198f97 : add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000198f8f : add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000195207 : add byte ptr [rdi + rdi*2 - 0x13], dl ; call rsp
0x000000000019514f : add byte ptr [rdi + rdi*2 - 0x14], dh ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x00000000001993f7 : add byte ptr [rdi + rdx + 0x55bcfffb], ah ; add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000195847 : add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000198187 : add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000195927 : add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000198edf : add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x00000000001937bc : add byte ptr [rdi], 0xfc ; call rax
0x0000000000105222 : add byte ptr [rdi], cl ; test bh, dl ; add eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000089f1e : add byte ptr [rdi], cl ; test bl, ch ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x1e], cl ; mov rdi, r15 ; call rax
0x000000000008a43e : add byte ptr [rdi], cl ; test bl, cl ; add dword ptr [rax], eax ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x000000000008b039 : add byte ptr [rdi], cl ; test byte ptr [rax + 0x48000000], cl ; mov esi, ebp ; mov rdi, r12 ; call rax
0x0000000000105189 : add byte ptr [rdi], cl ; test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051a9 : add byte ptr [rdi], cl ; test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4e : add byte ptr [rdi], cl ; test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052be : add byte ptr [rdi], cl ; test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104bd0 : add byte ptr [rdi], cl ; test byte ptr [rcx], cl ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000104eda : add byte ptr [rdi], cl ; test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104efa : add byte ptr [rdi], cl ; test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105427 : add byte ptr [rdi], cl ; test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b57 : add byte ptr [rdi], cl ; test byte ptr [rdx], ah ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x00000000001050fd : add byte ptr [rdi], cl ; test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010501b : add byte ptr [rdi], cl ; test byte ptr [rsi], bh ; add eax, 0xf6310000 ; mov rdi, r12 ; call rbx
0x0000000000104cf5 : add byte ptr [rdi], cl ; test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ac7 : add byte ptr [rdi], cl ; test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000001056a4 : add byte ptr [rdi], cl ; test dword ptr [rax - 0x4100000b], edi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000105704 : add byte ptr [rdi], cl ; test dword ptr [rbp - 0x41000006], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000105824 : add byte ptr [rdi], cl ; test dword ptr [rbp - 0x41000007], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001057a4 : add byte ptr [rdi], cl ; test dword ptr [rbx - 0x41000004], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000105744 : add byte ptr [rdi], cl ; test dword ptr [rcx - 0x41000007], edi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001057c4 : add byte ptr [rdi], cl ; test dword ptr [rdi - 0x41000005], esi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000105784 : add byte ptr [rdi], cl ; test dword ptr [rdi*8 + 0x3beffff], ebx ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; call rbx
0x0000000000105624 : add byte ptr [rdi], cl ; test dword ptr [rdx - 0x41000004], ebx ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x00000000001058a4 : add byte ptr [rdi], cl ; test dword ptr [rdx - 0x4100000b], ebp ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000105565 : add byte ptr [rdi], cl ; test dword ptr [rsi - 0x41000006], esi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x0000000000105864 : add byte ptr [rdi], cl ; test dword ptr [rsi - 0x4100000a], edx ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000195727 : add byte ptr [rdx + rax*2 - 0x12], dl ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x00000000001966df : add byte ptr [rdx + rax*2], ah ; call rsp
0x0000000000197f7f : add byte ptr [rdx + rbp - 8], dh ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x00000000001a835b : add byte ptr [rdx + rbp*8], al ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x0000000000196717 : add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000196aff : add byte ptr [rdx + rcx*2], dl ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x000000000019630f : add byte ptr [rdx + rcx*4 - 0xf], dl ; call rsp
0x00000000001a13d3 : add byte ptr [rdx + rdi*2], bh ; add al, bh ; jns 0x1a13d0 ; call rcx
0x0000000000198947 : add byte ptr [rdx + rdi*4 + 0xe9cfff9], ah ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000196b07 : add byte ptr [rdx + rdx*2 - 0xc], al ; call rsp
0x0000000000194d97 : add byte ptr [rdx + rsi*2 - 0x74ab0016], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d99 ; call rsp
0x000000000019589f : add byte ptr [rdx - 0x12], ah ; call rsp
0x000000000002adf7 : add byte ptr [rdx - 0x75], cl ; add al, 0xe0 ; test rax, rax ; je 0x2ae0d ; call rax
0x000000000019325c : add byte ptr [rdx - 5], dl ; call rax
0x0000000000110a07 : add byte ptr [rdx], al ; call rax
0x00000000001108f9 : add byte ptr [rdx], al ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x0000000000195897 : add byte ptr [rdx], al ; out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x000000000012fbdb : add byte ptr [rdx], ch ; add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013ebec : add byte ptr [rsi + 0xf], ah ; out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x0000000000104b82 : add byte ptr [rsi + 1], bh ; call rbx
0x0000000000104d6f : add byte ptr [rsi + 1], bh ; mov rdi, r12 ; call rbx
0x0000000000104c3b : add byte ptr [rsi + 1], bh ; mov rdi, r13 ; call rbx
0x0000000000104bb3 : add byte ptr [rsi + 1], bh ; mov rdi, r14 ; call rbx
0x0000000000104fed : add byte ptr [rsi + 2], bh ; mov rdi, r12 ; call rbx
0x0000000000104d60 : add byte ptr [rsi + 2], bh ; mov rdi, r13 ; call rbx
0x0000000000104c2c : add byte ptr [rsi + 2], bh ; mov rdi, r14 ; call rbx
0x0000000000104ba4 : add byte ptr [rsi + 2], bh ; mov rdi, r15 ; call rbx
0x000000000019808f : add byte ptr [rsi + rax*2 - 0x33730008], al ; add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x0000000000199fd3 : add byte ptr [rsi + rax], bh ; add al, ch ; test eax, ebp ; call rsp
0x00000000001a47f3 : add byte ptr [rsi + rbp*4 - 0x2ea80000], bl ; out dx, al ; call rcx
0x00000000001af7db : add byte ptr [rsi + rbx*2 - 0x1c0fffff], al ; cmc ; call rsi
0x0000000000198707 : add byte ptr [rsi + rbx*2], al ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x00000000001b2f93 : add byte ptr [rsi + rdx*4], bh ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x0000000000196b4f : add byte ptr [rsi + rsi*2], dl ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198687 : add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000002adf2 : add byte ptr [rsi - 0x77], cl ; jl 0x2adeb ; add byte ptr [rdx - 0x75], cl ; add al, 0xe0 ; test rax, rax ; je 0x2ae12 ; call rax
0x000000000019870f : add byte ptr [rsi], ah ; stc ; call rsp
0x0000000000198bff : add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x0000000000196b7f : add byte ptr [rsp + rcx*4], dl ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x00000000001993c7 : add byte ptr [rsp + rdx - 5], ah ; call rsp
0x0000000000195e37 : add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000194ecf : add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x000000000019867f : add byte ptr [rsp + rsi - 0xb8b0007], ah ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x00000000001108fa : add cl, byte ptr [rax - 0x75] ; push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x0000000000104b3a : add cl, byte ptr [rbx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001872e9 : add dh, ah ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x000000000017e4d7 : add dh, bh ; xlatb ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x00000000000dff2c : add dh, byte ptr [rcx] ; imul al ; fcomp qword ptr [rax] ; sti ; call rcx
0x0000000000196835 : add dword ptr [r8], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x0000000000196afe : add dword ptr [rax], eax ; adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198186 : add dword ptr [rax], eax ; adc al, 0x57 ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000196b4e : add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b7e : add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x00000000001986a6 : add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000196716 : add dword ptr [rax], eax ; add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000019818e : add dword ptr [rax], eax ; add al, 0x58 ; clc ; call rsp
0x0000000000198706 : add dword ptr [rax], eax ; add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x000000000019637e : add dword ptr [rax], eax ; add al, 0x98 ; int1 ; call rsp
0x00000000000391ed : add dword ptr [rax], eax ; add byte ptr [rax - 0x75], cl ; push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x000000000017e4da : add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x000000000017d68a : add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rsp
0x00000000000f76b7 : add dword ptr [rax], eax ; add byte ptr [rax], al ; call rax
0x0000000000104b84 : add dword ptr [rax], eax ; add byte ptr [rax], al ; call rbx
0x0000000000105018 : add dword ptr [rax], eax ; add byte ptr [rax], al ; je 0x10556f ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aeb : add dword ptr [rax], eax ; add byte ptr [rax], al ; je 0x10558f ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d6c : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r12 ; call rbx
0x0000000000104fea : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r12 ; call rbx
0x0000000000104d71 : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x0000000000104c3d : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x0000000000104bb5 : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000104ffb : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbp ; call rbx
0x000000000006da74 : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call r8
0x000000000006d76d : add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x000000000008a442 : add dword ptr [rax], eax ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x00000000001108f7 : add dword ptr [rax], eax ; add byte ptr [rdx], al ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001b2f96 : add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x0000000000198686 : add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x000000000019804e : add dword ptr [rax], eax ; and al, 0x40 ; clc ; call rsp
0x00000000001966de : add dword ptr [rax], eax ; and al, 0x42 ; call rsp
0x000000000019870e : add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x000000000019710e : add dword ptr [rax], eax ; and al, 0x68 ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197125 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001b7cae : add dword ptr [rax], eax ; and byte ptr [rcx - 8], dl ; call rdi
0x0000000000196666 : add dword ptr [rax], eax ; call rsp
0x00000000001b7c56 : add dword ptr [rax], eax ; cwde ; clc ; call rdi
0x00000000001b7496 : add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x0000000000195fce : add dword ptr [rax], eax ; fsubr st(7) ; call rsp
0x0000000000196a8e : add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x00000000001963ee : add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x000000000019968e : add dword ptr [rax], eax ; in al, -0x38 ; sti ; call rsp
0x0000000000198096 : add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x0000000000196c9e : add dword ptr [rax], eax ; je 0x196d14 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000197f7e : add dword ptr [rax], eax ; je 0x197fb9 ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x00000000001986ae : add dword ptr [rax], eax ; je 0x1986fc ; stc ; call rsp
0x0000000000196b56 : add dword ptr [rax], eax ; js 0x196b54 ; call rsp
0x0000000000196406 : add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x00000000001966d6 : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x000000000019867e : add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000196b86 : add dword ptr [rax], eax ; nop ; hlt ; call rsp
0x00000000001967a6 : add dword ptr [rax], eax ; pop rax ; call rsp
0x00000000001b40ee : add dword ptr [rax], eax ; push rax ; jl 0x1b40ef ; call rcx
0x0000000000196b06 : add dword ptr [rax], eax ; push rdx ; hlt ; call rsp
0x00000000001985fe : add dword ptr [rax], eax ; push rsp ; and ecx, edi ; call rsp
0x0000000000196a4e : add dword ptr [rax], eax ; push rsp ; loope 0x196a4b ; call rsp
0x000000000019630e : add dword ptr [rax], eax ; push rsp ; mov dh, cl ; call rsp
0x00000000001b3f2e : add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x00000000001ad676 : add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x0000000000197f56 : add dword ptr [rax], eax ; sub eax, r15d ; call rsp
0x00000000001afc56 : add dword ptr [rax], eax ; test al, 0xf7 ; cmc ; call rsi
0x0000000000196836 : add dword ptr [rax], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x000000000019808e : add dword ptr [rax], eax ; test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000197e8e : add dword ptr [rax], eax ; xchg eax, esp ; and al, 0xf8 ; call rsp
0x000000000019671e : add dword ptr [rax], eax ; xchg eax, esp ; call rsp
0x0000000000198386 : add dword ptr [rax], eax ; xchg eax, esp ; pushfq ; clc ; call rsp
0x00000000001963e6 : add dword ptr [rax], eax ; xchg eax, esp ; retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000196ca6 : add dword ptr [rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x00000000000ad10a : add dword ptr [rbp + 0x31], eax ; sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad196 : add dword ptr [rbp + 0x31], eax ; shr byte ptr [rdx], 0x48 ; lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000328e1 : add dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ad108 : add dword ptr [rdx + 1], ebp ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000105bb3 : add dword ptr [rsi - 0x74b6000f], ebx ; cmp al, 0x24 ; call rbx
0x0000000000196c9d : add dword ptr fs:[rax], eax ; je 0x196d15 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196c9c : add dword ptr fs:[rax], eax ; je 0x196d16 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196ca5 : add dword ptr fs:[rax], eax ; xor al, 0x68 ; cmc ; call rsp
0x0000000000131a7f : add eax, 0x24448b48 ; or byte ptr [rax - 0x77], cl ; fimul dword ptr [rcx + rcx*4 - 0x1a] ; mov rdi, rbp ; call rax
0x0000000000087dd0 : add eax, 0x33909b ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87dec ; call rax
0x0000000000080a34 : add eax, 0x340477 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a50 ; call rax
0x000000000019959d : add eax, 0x34a40002 ; sti ; call rsp
0x000000000003a27f : add eax, 0xc8c14818 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000010501f : add eax, 0xf6310000 ; mov rdi, r12 ; call rbx
0x0000000000105044 : add eax, 0xf6310000 ; mov rdi, r13 ; call rbx
0x000000000010518d : add eax, 0xf6310000 ; mov rdi, r14 ; call rbx
0x0000000000105226 : add eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000021465 : add eax, 1 ; push rax ; call rbx
0x0000000000104b34 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10564f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed7 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10566f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db2 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10568f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c59 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056af ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105404 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056cf ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052df : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x1056ef ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105186 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10570f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105061 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; je 0x10572f ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104bb0 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov esi, 1 ; mov rdi, r14 ; call rbx
0x0000000000104c29 : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov esi, 2 ; mov rdi, r14 ; call rbx
0x000000000010556d : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x00000000001055cc : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x000000000010564c : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x000000000010574c : add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x000000000012caa5 : add eax, dword ptr [rbp + 0x31] ; ror byte ptr [rcx + rcx*4 - 0xf], 0x4c ; mov edi, ebp ; call r12
0x0000000000038041 : add ebp, esi ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x0000000000037659 : add ebx, esi ; mov rdx, r13 ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x0000000000146739 : add ecx, dword ptr [rbp - 0x88] ; call rax
0x0000000000089d1d : add ecx, dword ptr [rdi] ; test ah, bh ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0xa], cl ; call rax
0x0000000000170daf : add edi, dword ptr [rbp + 0x10] ; call r12
0x00000000001b2f99 : add edi, esi ; call rsi
0x000000000013dd5e : add esi, dword ptr [rbp - 0x11] ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x00000000000bc64f : add esp, eax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x00000000001872f1 : add esp, esi ; call rbx
0x00000000001872e5 : add esp, esi ; push qword ptr [rdx + 2] ; hlt ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x0000000000196a4d : add qword ptr [rax], r8 ; push rsp ; loope 0x196a4c ; call rsp
0x00000000000bc64e : add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x0000000000038040 : add r13, r14 ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x00000000001991ad : add r8b, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x0000000000146738 : add r9, qword ptr [rbp - 0x88] ; call rax
0x000000000019959c : add rax, 0x34a40002 ; sti ; call rsp
0x0000000000037658 : add rbx, r14 ; mov rdx, r13 ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x0000000000170dae : add rdi, qword ptr [r13 + 0x10] ; call r12
0x00000000001b2f98 : add rdi, rsi ; call rsi
0x00000000001936bd : and ah, bh ; push rax ; and esp, edi ; call rax
0x0000000000172099 : and al, 0 ; mov qword ptr [r12], rbx ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b9 ; call rdx
0x000000000012fbda : and al, 0 ; sub al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; or al, 0x24 ; call rcx
0x0000000000145d20 : and al, 0x10 ; call rax
0x0000000000138475 : and al, 0x10 ; call rcx
0x0000000000029868 : and al, 0x10 ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x0000000000110a02 : and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000000843ba : and al, 0x10 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x0000000000104321 : and al, 0x10 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000038651 : and al, 0x10 ; mov rdi, r12 ; call r15
0x00000000000768d6 : and al, 0x10 ; mov rdi, r12 ; call rbx
0x000000000012e71a : and al, 0x10 ; mov rdi, rbp ; call r14
0x00000000000ad45a : and al, 0x10 ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71a : and al, 0x10 ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x00000000001108fe : and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d6 : and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000c9c25 : and al, 0x10 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000203e5 : and al, 0x14 ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000003761f : and al, 0x18 ; call r15
0x00000000000203ed : and al, 0x18 ; call rax
0x00000000000842c6 : and al, 0x18 ; call rdx
0x0000000000145d13 : and al, 0x18 ; mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000843b5 : and al, 0x18 ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000213e8 : and al, 0x18 ; mov r9, r14 ; call rbx
0x0000000000131b8b : and al, 0x18 ; mov rcx, qword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000769b2 : and al, 0x18 ; mov rdi, r12 ; call rbx
0x00000000000ad45f : and al, 0x18 ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71f : and al, 0x18 ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000037606 : and al, 0x1e ; mov rdi, r12 ; call r15
0x0000000000199480 : and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000023a26 : and al, 0x20 ; call r14
0x00000000000238c1 : and al, 0x20 ; call r15
0x0000000000025848 : and al, 0x20 ; call rax
0x00000000000ad115 : and al, 0x20 ; call rbx
0x00000000000acd91 : and al, 0x20 ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000842c1 : and al, 0x20 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000c984f : and al, 0x20 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039274 : and al, 0x20 ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000027a87 : and al, 0x20 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025349 : and al, 0x20 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000135017 : and al, 0x28 ; call rcx
0x000000000013ebf4 : and al, 0x28 ; call rdx
0x00000000000acc5f : and al, 0x28 ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000842bc : and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000cd384 : and al, 0x28 ; mov r15, rax ; mov rax, qword ptr [r12 + 8] ; test rax, rax ; je 0xcd3a4 ; call rax
0x00000000000cd383 : and al, 0x28 ; mov r15, rax ; mov rax, qword ptr [r12 + 8] ; test rax, rax ; je 0xcd3a5 ; call rax
0x0000000000023a21 : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238bc : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000c984a : and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000877f3 : and al, 0x28 ; mov rdi, r12 ; call rax
0x00000000000ad5ec : and al, 0x28 ; mov rdi, rbp ; call rbx
0x0000000000024d65 : and al, 0x28 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818c : and al, 0x28 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000f767b : and al, 0x2c ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000241b9 : and al, 0x30 ; call r15
0x00000000000243ea : and al, 0x30 ; call rbx
0x0000000000134dfd : and al, 0x30 ; call rcx
0x0000000000039279 : and al, 0x30 ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000000bb421 : and al, 0x30 ; mov rdi, qword ptr [rax] ; call r14
0x000000000013846d : and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000023a1c : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f7a : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1d : and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000198688 : and al, 0x36 ; stc ; call rsp
0x0000000000023f84 : and al, 0x38 ; call r14
0x0000000000023c46 : and al, 0x38 ; call r15
0x0000000000025353 : and al, 0x38 ; call rbx
0x0000000000136b8f : and al, 0x38 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136bad ; mov rdi, rbp ; call rax
0x0000000000136b8e : and al, 0x38 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136bae ; mov rdi, rbp ; call rax
0x0000000000026682 : and al, 0x38 ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000241b4 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e5 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc1a2 : and al, 0x38 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df5 : and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000000238b7 : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db3 : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cda : and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000306cb : and al, 0x39 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000047bcb : and al, 0x3c ; call rax
0x0000000000027dbd : and al, 0x40 ; call r15
0x0000000000025ce4 : and al, 0x40 ; call rbx
0x0000000000198050 : and al, 0x40 ; clc ; call rsp
0x0000000000025843 : and al, 0x40 ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000023f7f : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c41 : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534e : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667d : and al, 0x40 ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000243e0 : and al, 0x40 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000391fb : and al, 0x41 ; call rsi
0x00000000001966e0 : and al, 0x42 ; call rsp
0x0000000000086e03 : and al, 0x48 ; call rax
0x000000000012ccc9 : and al, 0x48 ; mov ecx, eax ; call r12
0x000000000007a355 : and al, 0x48 ; mov edi, ebx ; call rax
0x000000000017209e : and al, 0x48 ; mov edx, dword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b4 ; call rdx
0x000000000013699e : and al, 0x48 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369bc ; mov rdi, r12 ; call rax
0x000000000013699d : and al, 0x48 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369bd ; mov rdi, r12 ; call rax
0x0000000000027db8 : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdf : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583e : and al, 0x48 ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000241af : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd2 : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3c : and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000000acc5b : and al, 0x4c ; lea ecx, dword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000013500f : and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000037b8d : and al, 0x50 ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x0000000000198710 : and al, 0x66 ; stc ; call rsp
0x0000000000087163 : and al, 0x68 ; call rax
0x0000000000197110 : and al, 0x68 ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197123 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x000000000008847b : and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000ad323 : and al, 0x70 ; mov rdi, rbp ; call rbx
0x0000000000198ee0 : and al, 0x77 ; cli ; call rsp
0x000000000013ebe8 : and al, 0x80 ; add byte ptr [rax], al ; add byte ptr [rsi + 0xf], ah ; out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x00000000001a297c : and al, 0x90 ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x000000000002986d : and al, 0x98 ; add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x0000000000122518 : and al, 0x98 ; add byte ptr [rax], al ; test rax, rax ; je 0x122532 ; mov rdi, rbx ; call rax
0x0000000000194060 : and al, 0x9e ; cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x00000000000bc19a : and al, 0xa8 ; add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0xbc1d7 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc1dc ; call r15
0x00000000000bc68d : and al, 0xa8 ; add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; je 0xbc6ca ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc6cf ; call r15
0x000000000011f6b8 : and al, 0xb9 ; add byte ptr [rax + rax], al ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000008aead : and al, 0xf ; test ah, bl ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x000000000008a18b : and al, 0xf ; test dh, cl ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x000000000018628d : and al, 0xf2 ; call rax
0x0000000000196a91 : and al, 0xf4 ; call rsp
0x0000000000197e91 : and al, 0xf8 ; call rsp
0x0000000000193749 : and al, 0xfc ; call rax
0x00000000001963fd : and al, 1 ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x0000000000106963 : and al, 4 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000110903 : and al, 8 ; call rax
0x0000000000104238 : and al, 8 ; call rbx
0x00000000000843bf : and al, 8 ; call rsi
0x000000000006f02e : and al, 8 ; je 0x6f060 ; lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000000203e1 : and al, 8 ; mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000012df6a : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df88 ; mov rdi, rsp ; call rax
0x000000000012df69 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df89 ; mov rdi, rsp ; call rax
0x000000000012e055 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e073 ; mov rdi, rsp ; call rax
0x000000000012e054 : and al, 8 ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e074 ; mov rdi, rsp ; call rax
0x0000000000104230 : and al, 8 ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x000000000006f035 : and al, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000001226db : and al, 8 ; mov rdi, r13 ; call r12
0x00000000000757c1 : and al, 8 ; mov rdi, r15 ; call rax
0x00000000001304e9 : and al, 8 ; mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130507 ; mov rdi, rbp ; call rdx
0x0000000000131b90 : and al, 8 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x0000000000131a83 : and al, 8 ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391f3 : and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393fa : and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x00000000000cd38c : and al, 8 ; test rax, rax ; je 0xcd39c ; call rax
0x00000000000cd38b : and al, 8 ; test rax, rax ; je 0xcd39d ; call rax
0x000000000012cdce : and al, 8 ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x0000000000193745 : and bh, ah ; call rax
0x0000000000193aa0 : and bh, byte ptr [rax - 4] ; push qword ptr [rdx + 0x42fffc77] ; ja 0x193ab2 ; call rdx
0x0000000000030858 : and bh, byte ptr [rcx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000193f98 : and bl, byte ptr [rdi - 0x614d0004] ; cld ; inc dword ptr [rdx - 0x62] ; cld ; call rdx
0x000000000012e910 : and byte ptr [r8 - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x000000000002c353 : and byte ptr [r8 - 0x77], r9b ; sti ; test rax, rax ; je 0x2c369 ; call rax
0x000000000003a238 : and byte ptr [rax - 0x3f], cl ; retf 0x6411 ; xor rdx, qword ptr [0x30] ; call rdx
0x00000000000c9850 : and byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000039275 : and byte ptr [rax - 0x75], cl ; and al, 0x30 ; lea r15, qword ptr [rbx + r14] ; call rax
0x000000000012e911 : and byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x000000000002534a : and byte ptr [rax - 0x75], cl ; je 0x2537e ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000027a88 : and byte ptr [rax - 0x75], cl ; je 0x27abd ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002c354 : and byte ptr [rax - 0x77], cl ; sti ; test rax, rax ; je 0x2c368 ; call rax
0x00000000001939b4 : and byte ptr [rbp - 4], bh ; push qword ptr [rax + 0x40fffc7c] ; jl 0x1939c6 ; call rax
0x0000000000193914 : and byte ptr [rbx - 4], al ; push rax ; cld ; call rax
0x00000000000842c2 : and byte ptr [rcx + rcx*4 + 0x54], cl ; and al, 0x18 ; call rdx
0x00000000001940c4 : and byte ptr [rcx - 0x5f4f0004], ah ; cld ; inc dword ptr [rax - 0x60] ; cld ; call rax
0x00000000001b7cb0 : and byte ptr [rcx - 8], dl ; call rdi
0x000000000019637d : and byte ptr [rcx], al ; add byte ptr [rax + rbx*4], al ; int1 ; call rsp
0x00000000000707e2 : and byte ptr [rcx], dh ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x00000000001a74f0 : and byte ptr [rdi - 0xf], bl ; call rbx
0x0000000000185df8 : and byte ptr [rdx - 0x5545000f], ch ; int1 ; call rsp
0x0000000000193bcc : and byte ptr [rdx - 4], bh ; push qword ptr [rax + 0x40fffc79] ; jns 0x193bde ; call rax
0x0000000000194320 : and byte ptr [rsp + rdi*8 - 0x36c6f01], dl ; inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000104b5a : and cl, byte ptr [rip - 0x9cf0000] ; mov rdi, r15 ; call rbx
0x000000000013e865 : and dh, byte ptr [rcx] ; sar byte ptr [rdx - 1], 0x48 ; mov esi, ebx ; mov rdi, rbp ; call rcx
0x000000000019d241 : and dl, ch ; call rcx
0x0000000000198bf5 : and dword ptr [rdx], eax ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000198bfd : and dword ptr [rdx], eax ; add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x00000000001862a9 : and eax, 0x25b0fff2 ; call rax
0x00000000001862cd : and eax, 0x25c0fff2 ; call rax
0x0000000000108d76 : and eax, 0x2d0 ; pop rax ; pop rdi ; call rax
0x0000000000108d6e : and eax, 0x2d4 ; mov dword ptr fs:[0x2d0], eax ; pop rax ; pop rdi ; call rax
0x00000000000645a8 : and eax, 0x30 ; call rax
0x000000000003a241 : and eax, 0x30 ; call rdx
0x0000000000122edb : and eax, 0x30 ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e9 : and eax, 0x30 ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c4 : and eax, 0x30 ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c4 : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87e : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3e : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ae : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd24 : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf94 : and eax, 0x30 ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76b1 : and eax, 0x30 ; mov edi, 1 ; call rax
0x0000000000047bc4 : and eax, 0x30 ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a873 : and eax, 0x30 ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f8 : and eax, 0x30 ; mov rdi, r13 ; call rax
0x00000000000645d1 : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c939 : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31d : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059699 : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f5 : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db19 : and eax, 0x30 ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174fa : and eax, 0x30 ; test rax, rax ; je 0x11753a ; call rax
0x00000000000c7c28 : and eax, 0x30 ; test rax, rax ; je 0xc7c56 ; mov rsi, rdi ; xor edi, edi ; call rax
0x000000000004dae8 : and eax, 0x30 ; xor esi, esi ; call rax
0x0000000000030561 : and eax, 0xc1480039 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001963e5 : and eax, dword ptr [rcx] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000198601 : and ecx, edi ; call rsp
0x00000000001936c5 : and edi, esp ; call rax
0x00000000001a8361 : and edx, esi ; call rsi
0x00000000000bc64b : and esp, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x00000000001936c1 : and esp, edi ; call rax
0x0000000000198bf4 : and qword ptr [rdx], r8 ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000000bc64a : and r12d, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x00000000000299b9 : call r12
0x0000000000021769 : call r14
0x00000000000238c3 : call r15
0x000000000006da7b : call r8
0x00000000000645ad : call rax
0x000000000002d9e8 : call rbx
0x0000000000021dd7 : call rcx
0x00000000000238c4 : call rdi
0x000000000003a246 : call rdx
0x000000000002176a : call rsi
0x00000000000299ba : call rsp
0x0000000000105043 : cdq ; add eax, 0xf6310000 ; mov rdi, r13 ; call rbx
0x0000000000198705 : clc ; add dword ptr [rax], eax ; add al, 0x5e ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x000000000019870d : clc ; add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x00000000001b749a : clc ; call rax
0x00000000001b9a62 : clc ; call rcx
0x00000000001b7c5a : clc ; call rdi
0x0000000000197e92 : clc ; call rsp
0x0000000000199329 : clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000198092 : clc ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x000000000019818a : clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000197f82 : clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x00000000001a13d8 : clc ; jns 0x1a13cb ; call rcx
0x0000000000198382 : clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x000000000013a4b7 : clc ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000002af83 : clc ; test rcx, rcx ; je 0x2af91 ; call rcx
0x0000000000089d20 : cld ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0xa], cl ; call rax
0x00000000001936ca : cld ; call rax
0x0000000000193aaa : cld ; call rdx
0x0000000000193a06 : cld ; call rsi
0x0000000000193b32 : cld ; call rsp
0x000000000019380a : cld ; inc dword ptr [rax + 0x10fffc50] ; cld ; call rax
0x0000000000193842 : cld ; inc dword ptr [rax + 0x4c] ; cld ; inc dword ptr [rax + 0x4e] ; cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x0000000000193846 : cld ; inc dword ptr [rax + 0x4e] ; cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x000000000019384a : cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x0000000000193bd2 : cld ; inc dword ptr [rax + 0x79] ; cld ; call rax
0x00000000001939ba : cld ; inc dword ptr [rax + 0x7c] ; cld ; call rax
0x0000000000193eb2 : cld ; inc dword ptr [rax - 0x5d] ; cld ; call rax
0x00000000001940ca : cld ; inc dword ptr [rax - 0x60] ; cld ; call rax
0x000000000019373e : cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000194326 : cld ; inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000194066 : cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x0000000000193aa6 : cld ; inc dword ptr [rdx + 0x77] ; cld ; call rdx
0x0000000000193f9e : cld ; inc dword ptr [rdx - 0x62] ; cld ; call rdx
0x0000000000193a02 : cld ; inc dword ptr [rsi + 0x7b] ; cld ; call rsi
0x0000000000193efa : cld ; inc dword ptr [rsi - 0x5e] ; cld ; call rsi
0x000000000019422a : cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000193c6a : cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000193c66 : cld ; ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000194226 : cld ; ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x000000000019422e : cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x0000000000193c6e : cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000193bce : cld ; push qword ptr [rax + 0x40fffc79] ; jns 0x193bdc ; call rax
0x00000000001939b6 : cld ; push qword ptr [rax + 0x40fffc7c] ; jl 0x1939c4 ; call rax
0x000000000019432a : cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x00000000001938ae : cld ; push qword ptr [rax] ; cld ; push rax ; cld ; call rax
0x0000000000193736 : cld ; push qword ptr [rax] ; sbb eax, 0x1f10fffc ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000194062 : cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x0000000000193aa2 : cld ; push qword ptr [rdx + 0x42fffc77] ; ja 0x193ab0 ; call rdx
0x0000000000193f9a : cld ; push qword ptr [rdx + 0x42fffc9e] ; sahf ; cld ; call rdx
0x00000000001939fe : cld ; push qword ptr [rsi + 0x46fffc7b] ; jnp 0x193a0c ; call rsi
0x00000000001936be : cld ; push rax ; and esp, edi ; call rax
0x000000000019389a : cld ; push rax ; cld ; call rax
0x0000000000195d7d : cli ; add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000195d85 : cli ; add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d80 ; call rsp
0x0000000000198bc2 : cli ; call rsp
0x0000000000198bba : cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x0000000000198bfa : cli ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000198f92 : cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000198eda : cli ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000019932a : cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000103fba : cli ; mov ecx, 0x8b48fff1 ; jge 0x103fca ; call rbx
0x000000000008a447 : cli ; mov rdi, r8 ; call rax
0x000000000011f6c0 : cli ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000013d246 : cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000001986a5 : cmc ; add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001986ad : cmc ; add dword ptr [rax], eax ; je 0x1986fd ; stc ; call rsp
0x0000000000187b92 : cmc ; call rax
0x00000000001ad67a : cmc ; call rdx
0x00000000001af7e2 : cmc ; call rsi
0x0000000000187dfe : cmc ; call rsp
0x0000000000187e12 : cmc ; dec dword ptr [rax - 0x2b000a22] ; iretd ; cmc ; call rsp
0x0000000000187ce2 : cmc ; dec dword ptr [rdi + rbp] ; cmc ; push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x0000000000187e5e : cmc ; dec dword ptr [rdi - 0x2b000a32] ; iretd ; cmc ; call rsp
0x0000000000196ca2 : cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000187e02 : cmc ; inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x0000000000187e4e : cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e1e : cmc ; inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000187e22 : cmc ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000187df6 : cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x0000000000038042 : cmc ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x00000000001850e0 : cmc ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x0000000000187e4a : cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e46 : cmc ; push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187ce6 : cmc ; push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x00000000001a8358 : cmp al, 0 ; add byte ptr [rax], al ; add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b2f90 : cmp al, 0 ; add byte ptr [rax], al ; cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001a8860 : cmp al, 0 ; add byte ptr [rax], al ; or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x00000000001af7d8 : cmp al, 0 ; add byte ptr [rax], al ; test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7e3 ; call rsi
0x00000000001b40e8 : cmp al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f5 ; call rcx
0x00000000000391fa : cmp al, 0x24 ; call r14
0x0000000000104281 : cmp al, 0x24 ; call rbx
0x00000000000acc5a : cmp al, 0x24 ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000012b79d : cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000008fcd1 : cmp al, 0x33 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003927d : cmp al, 0x33 ; call rax
0x00000000001b2f94 : cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x000000000019514c : cmp al, 0xa3 ; add byte ptr [rax], al ; je 0x1951e0 ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000103e78 : cmp al, 0xbb ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x000000000019808c : cmp al, 0xcc ; add dword ptr [rax], eax ; test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x00000000001b7494 : cmp al, 0xdb ; add dword ptr [rax], eax ; fdivr dword ptr [rcx] ; clc ; call rax
0x0000000000105100 : cmp al, 6 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000020404 : cmp al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000198f95 : cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000198f8d : cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000198f8c : cmp al, byte ptr fs:[rdx] ; add byte ptr [rdi + rcx*4], al ; cli ; lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000026683 : cmp byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000136b90 : cmp byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x0000000000025cdb : cmp byte ptr [rax - 0x75], cl ; je 0x25d0f ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000027db4 : cmp byte ptr [rax - 0x75], cl ; je 0x27de9 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000028d64 : cmp byte ptr [rax - 0x75], cl ; je 0x28d99 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000bc1a3 : cmp byte ptr [rax - 0x75], cl ; jl 0xbc1d3 ; call r15
0x00000000000bc696 : cmp byte ptr [rax - 0x75], cl ; jl 0xbc6c6 ; call r15
0x0000000000104234 : cmp byte ptr [rax - 0x77], cl ; and al, 8 ; call rbx
0x000000000013d243 : cmp byte ptr [rax - 0x77], cl ; cli ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x0000000000115ea3 : cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161fa : cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000116039 : cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f02 : cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x0000000000115f91 : cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000012e915 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x00000000001304ee : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], cl ; mov edi, ebp ; call rdx
0x0000000000134aee : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rcx + rcx + 0x48], 0x8d ; mov ebx, 0xc8 ; call rax
0x00000000001356b7 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x1356db ; call rax
0x00000000001356b6 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x1356dc ; call rax
0x000000000013b877 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13b89b ; call rax
0x000000000013b876 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13b89c ; call rax
0x000000000013bf90 : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13bfb4 ; call rax
0x000000000013bf8f : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13bfb5 ; call rax
0x000000000013788b : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x137907 ; call rax
0x000000000013788a : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x137908 ; call rax
0x00000000001382eb : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x138357 ; call rax
0x00000000001382ea : cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x138358 ; call rax
0x0000000000134df6 : cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000002e2e3 : cmp dword ptr [r8], r8d ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002af7b : cmp dword ptr [rax], eax ; mov qword ptr [r14], rcx ; mov rcx, qword ptr [rax + r15*8] ; test rcx, rcx ; je 0x2af99 ; call rcx
0x000000000002adf1 : cmp dword ptr [rax], eax ; mov qword ptr [rbp + r12*8], r15 ; mov rax, qword ptr [rax + r12*8] ; test rax, rax ; je 0x2ae13 ; call rax
0x000000000002ac38 : cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002e457 : cmp dword ptr [rax], r8d ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000196715 : cmp dword ptr [rcx], eax ; add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000010427b : cmp dword ptr [rdi - 0x74b6000f], esi ; cmp al, 0x24 ; call rbx
0x000000000003027b : cmp dword ptr es:[rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000122ee2 : cmp eax, 0x2a2815 ; call rax
0x0000000000122633 : cmp eax, 0x2a3068 ; call rax
0x00000000001967a5 : cmp eax, 0x58640001 ; call rsp
0x00000000001ad675 : cmp eax, 0x59280001 ; cmc ; call rdx
0x000000000008fb06 : cmp eax, 0xc1480033 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001177d8 : cmp eax, 0xfffffe93 ; call rax
0x0000000000196765 : cmp eax, dword ptr [rcx] ; add ah, al ; dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x000000000019676d : cmp eax, dword ptr [rcx] ; add ah, dl ; call rsp
0x00000000001b7499 : cmp eax, edi ; call rax
0x0000000000194ee9 : cmp ebp, ebx ; call rsp
0x00000000001986a9 : cmp ecx, edi ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001a8869 : cmp edx, esi ; call rsi
0x000000000008fd2a : cmp esi, dword ptr [rbx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002e206 : cmp qword ptr [rax], rax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000019676c : cmp r8, qword ptr [rcx] ; add ah, dl ; call rsp
0x000000000019354d : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x000000000019362d : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193549 : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193629 : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193545 : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193625 : cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000106905 : cmpsb byte ptr [rsi], byte ptr [rdi] ; sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x1069b7 ; call rax
0x0000000000195205 : cmpsd dword ptr [rsi], dword ptr [rdi] ; add byte ptr [rax], al ; push rsp ; jg 0x1951fe ; call rsp
0x00000000001b40ed : cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f0 ; call rcx
0x000000000002986e : cwde ; add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x0000000000122519 : cwde ; add byte ptr [rax], al ; test rax, rax ; je 0x122531 ; mov rdi, rbx ; call rax
0x00000000001b7c58 : cwde ; clc ; call rdi
0x0000000000196381 : cwde ; int1 ; call rsp
0x000000000012ccc2 : dec byte ptr [rax - 0x77] ; fisttp word ptr [rax - 0x77] ; add al, 0x24 ; mov rcx, rax ; call r12
0x000000000008b4eb : dec byte ptr [rcx + rcx*4 + 0x43] ; movsxd rdi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x00000000000393fe : dec byte ptr [rcx + rcx*4 - 0x19] ; call r14
0x000000000004b85d : dec byte ptr [rcx + rcx*4 - 9] ; call rax
0x0000000000187e13 : dec dword ptr [rax - 0x2b000a22] ; iretd ; cmc ; call rsp
0x000000000004dadf : dec dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x000000000010422c : dec dword ptr [rax - 0x75] ; and al, 8 ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x0000000000103fbd : dec dword ptr [rax - 0x75] ; jge 0x103fc7 ; call rbx
0x0000000000104270 : dec dword ptr [rax - 0x75] ; jge 0x10427a ; call rbx
0x0000000000105e08 : dec dword ptr [rax - 0x75] ; jge 0x105e12 ; call rbx
0x000000000005722a : dec dword ptr [rax - 0x75] ; mov ebp, 0xfffffb60 ; call rax
0x00000000000393f6 : dec dword ptr [rax - 0x75] ; push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x00000000000843b1 : dec dword ptr [rax - 0x77] ; and al, 0x18 ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x000000000013e86c : dec dword ptr [rax - 0x77] ; fimul word ptr [rax - 0x77] ; out dx, eax ; call rcx
0x000000000013d149 : dec dword ptr [rax - 0x77] ; fimul word ptr [rcx + rcx*4 - 1] ; call r14
0x0000000000170daa : dec dword ptr [rax - 0x77] ; out dx, eax ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x00000000001877af : dec dword ptr [rax - 0x80] ; hlt ; call rax
0x000000000019362f : dec dword ptr [rax] ; sbb edi, esp ; call rax
0x000000000003803f : dec dword ptr [rbp + 1] ; cmc ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x000000000019676b : dec dword ptr [rbx + rdi + 1] ; add ah, dl ; call rsp
0x0000000000198bf3 : dec dword ptr [rcx + 2] ; add byte ptr [rbx + rbx - 6], dl ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x000000000013e996 : dec dword ptr [rcx + rcx*4 - 0xa] ; mov rdi, rbp ; call r12
0x0000000000104b7a : dec dword ptr [rcx + rcx*4 - 1] ; mov edx, 4 ; mov esi, 1 ; call rbx
0x000000000004b85a : dec dword ptr [rcx + rcx*4 - 2] ; mov rdi, r14 ; call rax
0x0000000000103df5 : dec dword ptr [rcx - 0x75] ; call rbx
0x000000000010427e : dec dword ptr [rcx - 0x75] ; cmp al, 0x24 ; call rbx
0x0000000000103e88 : dec dword ptr [rcx - 0x75] ; jge 0x103e92 ; call rbx
0x0000000000103faf : dec dword ptr [rcx - 0x75] ; jge 0x103fb9 ; call rbx
0x00000000001040f2 : dec dword ptr [rcx - 0x75] ; jge 0x1040fc ; call rbx
0x0000000000104262 : dec dword ptr [rcx - 0x75] ; jge 0x10426c ; call rbx
0x0000000000105a80 : dec dword ptr [rcx - 0x75] ; jge 0x105a8a ; call rbx
0x0000000000105ba8 : dec dword ptr [rcx - 0x75] ; jge 0x105bb2 ; call rbx
0x0000000000105ceb : dec dword ptr [rcx - 0x75] ; jge 0x105cf5 ; call rbx
0x0000000000105dec : dec dword ptr [rcx - 0x75] ; jge 0x105df6 ; call rbx
0x0000000000187ce3 : dec dword ptr [rdi + rbp] ; cmc ; push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x00000000001966d3 : dec dword ptr [rdi + rsi + 0x41a40001] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000187e5f : dec dword ptr [rdi - 0x2b000a32] ; iretd ; cmc ; call rsp
0x0000000000187953 : dec dword ptr [rdx - 0x56000b2c] ; sal ah, cl ; call rbx
0x0000000000195e3b : dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000196ca3 : dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000196c9b : dec dword ptr [rsp + 1] ; add byte ptr [rbp - 0xb], dh ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000198093 : dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x0000000000196b03 : dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x00000000001933b7 : dec esi ; nop ; std ; call rax
0x00000000001afc59 : div ebp ; call rsi
0x0000000000076b82 : enter -0x76b4, -0x17 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x0000000000103ed4 : enter -2, -1 ; mov rdi, qword ptr [r15] ; call rbx
0x000000000019565d : enter 0, -0x3c ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000134af7 : enter 0, 0 ; call rax
0x00000000000645a2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000f76ab : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bbe : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86d : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000001174f4 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; test rax, rax ; je 0x117540 ; call rax
0x000000000004dae2 : enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x000000000012f971 : fadd dword ptr [rax] ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12f993 ; mov rdi, rbx ; call rax
0x000000000012fce3 : fadd dword ptr [rax] ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12fd05 ; mov rdi, rbx ; call rax
0x000000000008aeb0 : fadd qword ptr [rax] ; add byte ptr [rax], al ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x00000000001721b0 : fcom qword ptr [rax] ; test rdi, rdi ; je 0x1721dc ; mov rax, qword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d7 ; call rax
0x0000000000186f0d : fcomi st(3) ; call rax
0x00000000000dff30 : fcomp qword ptr [rax] ; sti ; call rcx
0x0000000000187e31 : fcompi st(5) ; call rsp
0x00000000001b7498 : fdivr dword ptr [rcx] ; clc ; call rax
0x0000000000186f01 : fdivr st(3), st(0) ; lcall ptr [rbp - 0x1f] ; ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x0000000000187e05 : fdivr st(5), st(0) ; call rsp
0x0000000000186d15 : fdivrp st(3) ; call rax
0x0000000000187e15 : fdivrp st(5) ; call rsp
0x0000000000187e21 : fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x00000000001a74ed : fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x00000000001b7495 : fild dword ptr [rcx] ; add al, bl ; cmp eax, edi ; call rax
0x000000000019837d : fild word ptr [rcx] ; add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000038045 : fimul dword ptr [rcx + rcx*4 - 0x12] ; mov rdi, r12 ; call r15
0x0000000000131a87 : fimul dword ptr [rcx + rcx*4 - 0x1a] ; mov rdi, rbp ; call rax
0x000000000013e86f : fimul word ptr [rax - 0x77] ; out dx, eax ; call rcx
0x0000000000037660 : fimul word ptr [rcx + rcx*4 - 0x19] ; call r15
0x000000000013d14c : fimul word ptr [rcx + rcx*4 - 1] ; call r14
0x000000000002aeff : fisttp dword ptr [rax - 0x3f] ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000145d1c : fisttp word ptr [rax - 0x75] ; and al, 0x10 ; call rax
0x000000000012fbe1 : fisttp word ptr [rax - 0x75] ; or al, 0x24 ; call rcx
0x000000000012ccc5 : fisttp word ptr [rax - 0x77] ; add al, 0x24 ; mov rcx, rax ; call r12
0x000000000012cdd7 : fisttp word ptr [rcx + rcx*4 - 0x17] ; call r15
0x000000000019592d : fld dword ptr [rax] ; add ah, dl ; jle 0x195927 ; call rsp
0x0000000000195925 : fld dword ptr [rax] ; add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x00000000001054a3 : fld dword ptr [rdx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105cdb : fstp dword ptr [rcx + rsi*8 + 0x3e8b49ff] ; call rbx
0x0000000000103ed2 : fsubp st(0) ; enter -2, -1 ; mov rdi, qword ptr [r15] ; call rbx
0x00000000001059db : fsubp st(0) ; mov edi, 0x49ffffe3 ; mov edi, dword ptr [rdi] ; call rbx
0x0000000000105dda : fsubp st(0) ; rcr bh, 0xff ; dec dword ptr [rcx - 0x75] ; call rbx
0x0000000000117822 : fsubr dword ptr [rdx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000195fd1 : fsubr st(7) ; call rsp
0x0000000000198685 : hlt ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x000000000019867d : hlt ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000196a90 : hlt ; and al, 0xf4 ; call rsp
0x00000000001877b2 : hlt ; call rax
0x00000000001872f2 : hlt ; call rbx
0x00000000001873c6 : hlt ; call rcx
0x0000000000196a92 : hlt ; call rsp
0x00000000001877ae : hlt ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x0000000000187952 : hlt ; dec dword ptr [rdx - 0x56000b2c] ; sal ah, cl ; call rbx
0x0000000000196b02 : hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000196b82 : hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000196b52 : hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x00000000001873c2 : hlt ; inc edi ; jge 0x1873c0 ; call rcx
0x00000000001872ea : hlt ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x00000000001873ba : hlt ; push qword ptr [rbx - 0x42000b83] ; jge 0x1873c4 ; inc edi ; jge 0x1873c8 ; call rcx
0x00000000001872e6 : hlt ; push qword ptr [rdx + 2] ; hlt ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x00000000001877aa : hlt ; push rax ; jg 0x1877ac ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001877a6 : hlt ; push rax ; jg 0x1877ac ; push rax ; jg 0x1877b0 ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001988d8 : hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000197112 : idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197121 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000197ac2 : idiv edi ; mov esp, 0x740001aa ; movsxd rsi, edi ; call rsp
0x0000000000104c34 : idiv edi ; sar dword ptr [rdx + 2], cl ; mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104d59 : idiv edi ; sar dword ptr [rdx + 2], cl ; mov esi, 2 ; mov rdi, r13 ; call rbx
0x00000000000dff2e : imul al ; fcomp qword ptr [rax] ; sti ; call rcx
0x0000000000103faa : imul eax ; or byte ptr [rdx - 0x74b6000f], bh ; jge 0x103fbe ; call rbx
0x000000000010425d : imul eax ; push rbp ; mov bh, 0xf1 ; dec dword ptr [rcx - 0x75] ; jge 0x104271 ; call rbx
0x0000000000105de7 : imul eax ; retf ; wait ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105dfb ; call rbx
0x0000000000105ba3 : imul eax ; setle cl ; dec dword ptr [rcx - 0x75] ; jge 0x105bb7 ; call rbx
0x0000000000194435 : imul eax, dword ptr [rcx], 0xe8b95400 ; call rsp
0x00000000000375fe : imul eax, ebx ; mov rbx, rax ; lea r12, qword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x0000000000105588 : imul esi, ebp, 0x3beffff ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x19], cl ; call rbx
0x00000000000375fd : imul rax, rbx ; mov rbx, rax ; lea r12, qword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x00000000001963f0 : in al, -0x33 ; int1 ; call rsp
0x0000000000199690 : in al, -0x38 ; sti ; call rsp
0x00000000000c9128 : in al, 0 ; add byte ptr [rax], al ; mov rbp, r13 ; mov rdi, rbx ; call r12
0x000000000019d23c : in al, 0x38 ; add byte ptr [rax], al ; push rax ; and dl, ch ; call rcx
0x0000000000195730 : in al, 0x42 ; out dx, al ; call rsp
0x0000000000198098 : in al, 0x47 ; clc ; call rsp
0x0000000000195850 : in al, 0x57 ; out dx, al ; call rsp
0x0000000000195d80 : in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000104dd8 : in al, 0xa ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001993a0 : in al, 0xe ; sti ; call rsp
0x00000000000c9125 : in al, 0xf ; test ah, ah ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x13], cl ; mov rdi, rbx ; call r12
0x00000000000d0249 : in al, 0xf ; test bh, bh ; add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; mov ebp, 0xfffffcf8 ; call r12
0x00000000000bc64c : in al, 1 ; add r12, rax ; mov qword ptr [rsp + 0xa8], r12 ; call r15
0x000000000019515a : in al, dx ; call rsp
0x0000000000195152 : in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x000000000012fe8a : in al, dx ; or al, ch ; call rsp
0x000000000006efe3 : in al, dx ; or byte ptr [rax - 0x75], cl ; mov edi, 0xe0 ; call rax
0x000000000002adf6 : in eax, 0 ; mov rax, qword ptr [rax + r12*8] ; test rax, rax ; je 0x2ae0e ; call rax
0x000000000012e711 : in eax, dx ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x10 ; mov rdi, rbp ; call r14
0x000000000019f902 : in eax, dx ; call rbx
0x00000000001a13da : in eax, dx ; call rcx
0x00000000001a2982 : in eax, dx ; call rdi
0x00000000001a2132 : in eax, dx ; call rdx
0x00000000001a1462 : in eax, dx ; call rsi
0x000000000019520a : in eax, dx ; call rsp
0x00000000000c912e : in eax, dx ; mov rdi, rbx ; call r12
0x0000000000195e3d : inc byte ptr [rax] ; add ah, dl ; xchg eax, esp ; out dx, eax ; call rsp
0x0000000000195e35 : inc byte ptr [rax] ; add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x000000000019380b : inc dword ptr [rax + 0x10fffc50] ; cld ; call rax
0x0000000000193843 : inc dword ptr [rax + 0x4c] ; cld ; inc dword ptr [rax + 0x4e] ; cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x0000000000193847 : inc dword ptr [rax + 0x4e] ; cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x000000000019384b : inc dword ptr [rax + 0x50] ; cld ; call rax
0x0000000000193bd3 : inc dword ptr [rax + 0x79] ; cld ; call rax
0x00000000001939bb : inc dword ptr [rax + 0x7c] ; cld ; call rax
0x000000000019947b : inc dword ptr [rax + rbx*2 + 0x1f240002] ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x000000000019870b : inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000198703 : inc dword ptr [rax + rdi*8 + 1] ; add byte ptr [rsi + rbx*2], al ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x0000000000199323 : inc dword ptr [rax + rdx*2 - 0x72bfffe] ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x0000000000193eb3 : inc dword ptr [rax - 0x5d] ; cld ; call rax
0x00000000001940cb : inc dword ptr [rax - 0x60] ; cld ; call rax
0x0000000000193803 : inc dword ptr [rax - 0x7f0003b4] ; cld ; inc dword ptr [rax + 0x10fffc50] ; cld ; call rax
0x00000000000d024c : inc dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, qword ptr [rbp - 0x308] ; call r12
0x000000000019373f : inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000187e03 : inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x000000000019325b : inc dword ptr [rax] ; push rdx ; sti ; call rax
0x0000000000194327 : inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000194067 : inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x00000000001986ab : inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001850e3 : inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x00000000001850db : inc dword ptr [rbp - 0xa0011f4] ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x000000000019939b : inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000187e4f : inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x00000000001963eb : inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000196b83 : inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x000000000019592b : inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x000000000019818b : inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000198bbb : inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x000000000019837b : inc dword ptr [rdi + rbx*8 + 1] ; add ah, dl ; wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000196b53 : inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b4b : inc dword ptr [rdi + rdx*2] ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000193aa7 : inc dword ptr [rdx + 0x77] ; cld ; call rdx
0x00000000001988d3 : inc dword ptr [rdx + rcx - 0x570bfffe] ; stc ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000195d7b : inc dword ptr [rdx + rdi*8 + 0x70e40000] ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000193f9f : inc dword ptr [rdx - 0x62] ; cld ; call rdx
0x0000000000193a03 : inc dword ptr [rsi + 0x7b] ; cld ; call rsi
0x0000000000197f83 : inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000198943 : inc dword ptr [rsi + rcx - 0x455bfffe] ; stc ; lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x0000000000193efb : inc dword ptr [rsi - 0x5e] ; cld ; call rsi
0x0000000000196afb : inc dword ptr [rsp + rdx*2 + 1] ; add byte ptr [rdx + rcx*2], dl ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000198ed3 : inc dword ptr [rsp + rsi + 0x76c40002] ; cli ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x00000000001873c3 : inc edi ; jge 0x1873bf ; call rcx
0x0000000000187e1f : inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000037b8c : insb byte ptr [rdi], dx ; and al, 0x50 ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x00000000001963fc : insb byte ptr [rdi], dx ; and al, 1 ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x000000000012cdcd : insb byte ptr [rdi], dx ; and al, 8 ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000001963e4 : insb byte ptr [rdi], dx ; and eax, dword ptr [rcx] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000193c71 : insb byte ptr [rdi], dx ; cld ; call rdx
0x0000000000193c6d : insb byte ptr [rdi], dx ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x00000000001986a4 : insb byte ptr [rdi], dx ; cmc ; add dword ptr [rax], eax ; add al, 0x39 ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x000000000019565c : insb byte ptr [rdi], dx ; enter 0, -0x3c ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000193c69 : insd dword ptr [rdi], dx ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000193c65 : insd dword ptr [rdi], dx ; cld ; ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000198e59 : insd dword ptr [rdi], dx ; cli ; call rsp
0x00000000001985fd : int1 ; add dword ptr [rax], eax ; push rsp ; and ecx, edi ; call rsp
0x00000000000213ec : int1 ; call rbx
0x00000000001a70d2 : int1 ; call rdx
0x0000000000185dfe : int1 ; call rsp
0x0000000000103fbc : int1 ; dec dword ptr [rax - 0x75] ; jge 0x103fc8 ; call rbx
0x000000000010426f : int1 ; dec dword ptr [rax - 0x75] ; jge 0x10427b ; call rbx
0x0000000000105e07 : int1 ; dec dword ptr [rax - 0x75] ; jge 0x105e13 ; call rbx
0x0000000000103e7a : int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x000000000010427d : int1 ; dec dword ptr [rcx - 0x75] ; cmp al, 0x24 ; call rbx
0x0000000000103e87 : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x103e93 ; call rbx
0x0000000000103fae : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x103fba ; call rbx
0x00000000001040f1 : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x1040fd ; call rbx
0x0000000000104261 : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x10426d ; call rbx
0x0000000000105a7f : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105a8b ; call rbx
0x0000000000105ba7 : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105bb3 ; call rbx
0x0000000000105cea : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105cf6 ; call rbx
0x0000000000105deb : int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105df7 ; call rbx
0x00000000001963ea : int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x00000000000768ce : int1 ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8a : int1 ; lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012ca3b : int1 ; mov rdi, r13 ; call r12
0x000000000013a4ba : int1 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012b798 : iretd ; adc dword ptr [rax + rcx*2 + 0x33], esp ; cmp al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000008b5af : iretd ; call rcx
0x0000000000187e09 : iretd ; cmc ; call rsp
0x0000000000187e01 : iretd ; cmc ; inc dword ptr [rax] ; fdivr st(5), st(0) ; call rsp
0x0000000000187e1d : iretd ; cmc ; inc esi ; fdivrp st(5) ; lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000187e45 : iretd ; cmc ; push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x00000000000cd653 : iretd ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000193aa9 : ja 0x193aa9 ; call rdx
0x0000000000193aa5 : ja 0x193aa9 ; inc dword ptr [rdx + 0x77] ; cld ; call rdx
0x0000000000193aa8 : ja 0x193aaa ; call rdx
0x0000000000194da1 : ja 0x194d8f ; call rsp
0x0000000000195929 : ja 0x195923 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000195928 : ja 0x195924 ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000198ee1 : ja 0x198edf ; call rsp
0x000000000002b1d3 : ja 0x2b21e ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000080a35 : ja 0x80a47 ; xor al, 0 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a4f ; call rax
0x000000000010542a : jb 0x105438 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001872e8 : jb 0x1872f7 ; hlt ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x00000000001932d5 : jbe 0x1932d4 ; call rax
0x0000000000193b31 : jbe 0x193b31 ; call rsp
0x0000000000193b30 : jbe 0x193b32 ; call rsp
0x0000000000196b51 : jbe 0x196b51 ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000198ed9 : jbe 0x198edf ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000002b237 : jbe 0x2b282 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000010501c : je 0x10556b ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aef : je 0x10558b ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104ac8 : je 0x1055ad ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000104d92 : je 0x1055cb ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000105041 : je 0x1055eb ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b14 : je 0x10560b ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052bf : je 0x10562b ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b38 : je 0x10564b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104edb : je 0x10566b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db6 : je 0x10568b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c5d : je 0x1056ab ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105408 : je 0x1056cb ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052e3 : je 0x1056eb ; xor esi, esi ; mov rdi, r14 ; call rbx
0x000000000010518a : je 0x10570b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105065 : je 0x10572b ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001050fe : je 0x10574b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105085 : je 0x10576b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001054a1 : je 0x10578b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105428 : je 0x1057ab ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010537c : je 0x1057cb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105303 : je 0x1057eb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105223 : je 0x10580b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051aa : je 0x10582b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f74 : je 0x10584b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104efb : je 0x10586b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b58 : je 0x10588b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4f : je 0x1058ab ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd6 : je 0x1058cb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bd1 : je 0x1058eb ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf6 : je 0x10590b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c7d : je 0x10592b ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010690e : je 0x1069ae ; call rax
0x0000000000106a85 : je 0x106b86 ; call rax
0x0000000000114eb1 : je 0x114ed9 ; mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x0000000000117502 : je 0x117532 ; call rax
0x00000000001177d0 : je 0x117812 ; lea rsi, qword ptr [rbp - 0x20] ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x0000000000122227 : je 0x122233 ; mov rdi, rbx ; call rax
0x000000000012251f : je 0x12252b ; mov rdi, rbx ; call rax
0x000000000012262f : je 0x122643 ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x00000000001226da : je 0x122707 ; or byte ptr [rcx + rcx*4 - 0x11], cl ; call r12
0x000000000012df73 : je 0x12df7f ; mov rdi, rsp ; call rax
0x000000000012e05e : je 0x12e06a ; mov rdi, rsp ; call rax
0x000000000012e719 : je 0x12e746 ; adc byte ptr [rax - 0x77], cl ; out dx, eax ; call r14
0x000000000012e919 : je 0x12e925 ; mov rdi, rbp ; call rax
0x000000000012f97c : je 0x12f988 ; mov rdi, rbx ; call rax
0x000000000012fbf7 : je 0x12fa99 ; mov rdi, rbx ; call rax
0x000000000012fcee : je 0x12fcfa ; mov rdi, rbx ; call rax
0x00000000001304f2 : je 0x1304fe ; mov rdi, rbp ; call rdx
0x0000000000134af2 : je 0x134b06 ; lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x0000000000134df4 : je 0x134e25 ; cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500e : je 0x13503f ; push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x00000000001354ea : je 0x1354f6 ; mov rdi, r12 ; call rax
0x00000000001356bb : je 0x1356c9 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000136a70 : je 0x136991 ; mov rdi, rbx ; call rax
0x00000000001369a7 : je 0x1369b3 ; mov rdi, r12 ; call rax
0x0000000000136b98 : je 0x136ba4 ; mov rdi, rbp ; call rax
0x0000000000136db8 : je 0x136dc4 ; mov rdi, rbp ; call rax
0x000000000013788f : je 0x13789d ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137ae3 : je 0x137b14 ; cmp byte ptr [rcx + rcx*4 - 0x19], cl ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000137cd6 : je 0x137d07 ; push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000137f7b : je 0x137f87 ; mov rdi, r12 ; call rax
0x00000000001382ef : je 0x1382fd ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x000000000013846c : je 0x13849d ; xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000013b87b : je 0x13b889 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf94 : je 0x13bfa2 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013d141 : je 0x13d180 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000013ddab : je 0x13dda4 ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013e864 : je 0x13e897 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x000000000013e98e : je 0x13e9d0 ; xor eax, eax ; mov edx, 0xffffffff ; mov rsi, r14 ; mov rdi, rbp ; call r12
0x00000000001720a6 : je 0x1720ac ; call rdx
0x00000000001721be : je 0x1721c9 ; call rax
0x00000000001721b5 : je 0x1721d7 ; mov rax, qword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d2 ; call rax
0x00000000001932d1 : je 0x1932d4 ; push qword ptr [rax] ; jbe 0x1932d8 ; call rax
0x0000000000195150 : je 0x1951dc ; in al, dx ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195c68 : je 0x195c9e ; out dx, eax ; call rsp
0x0000000000196714 : je 0x19675e ; add dword ptr [rax], eax ; add al, 0x4a ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000196ca0 : je 0x196d12 ; cmc ; dec dword ptr [rsp + 0x68340001] ; cmc ; call rsp
0x0000000000197f80 : je 0x197fb7 ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000198684 : je 0x198681 ; add dword ptr [rax], eax ; and al, 0x36 ; stc ; call rsp
0x00000000001986b0 : je 0x1986fa ; stc ; call rsp
0x0000000000198f98 : je 0x198f2c ; cli ; call rsp
0x0000000000199330 : je 0x19932e ; cli ; call rsp
0x000000000019e3f9 : je 0x19e3e8 ; call rdi
0x000000000019e3f8 : je 0x19e3e9 ; call rdi
0x00000000001a70cc : je 0x1a70ac ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000000203e0 : je 0x20415 ; or byte ptr [rbx + 0x4814247c], cl ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000204ad : je 0x204b9 ; mov rdi, rbp ; call rax
0x00000000000206fe : je 0x2071f ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000213e7 : je 0x21413 ; sbb byte ptr [rbp - 0x77], cl ; int1 ; call rbx
0x0000000000023c40 : je 0x23c6f ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000023f7e : je 0x23fad ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024bd6 : je 0x24c05 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024d69 : je 0x24d98 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024fb5 : je 0x24fe4 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002534d : je 0x2537b ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002583d : je 0x25870 ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000025cde : je 0x25d0c ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002667c : je 0x266af ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000026c21 : je 0x26c50 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000027716 : je 0x27745 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000027a8b : je 0x27aba ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000027db7 : je 0x27de6 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000028190 : je 0x281be ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000286a1 : je 0x286d0 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000028d67 : je 0x28d96 ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000029130 : je 0x2915e ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002adff : je 0x2ae05 ; call rax
0x000000000002af87 : je 0x2af8d ; call rcx
0x000000000002c35b : je 0x2c361 ; call rax
0x0000000000038650 : je 0x3867d ; adc byte ptr [rcx + rcx*4 - 0x19], cl ; call r15
0x000000000006f030 : je 0x6f05e ; lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000006f034 : je 0x6f064 ; or byte ptr [rax - 0x75], cl ; mov edi, 0xe0 ; call rax
0x0000000000080a3f : je 0x80a45 ; call rax
0x0000000000086e02 : je 0x86e2b ; call rax
0x00000000000877f2 : je 0x8781e ; sub byte ptr [rcx + rcx*4 - 0x19], cl ; call rax
0x0000000000087ddb : je 0x87de1 ; call rax
0x0000000000089d1e : je 0x89e29 ; mov rsi, r14 ; call rax
0x0000000000089f1f : je 0x8a01c ; mov rdx, r12 ; mov rdi, r15 ; call rax
0x000000000008a18c : je 0x8a26c ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008a43f : je 0x8a61c ; mov rdx, r15 ; mov rdi, r8 ; call rax
0x000000000008ac70 : je 0x8ad8f ; mov rdx, rbp ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000008aeae : je 0x8af9c ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008b03a : je 0x8b0d4 ; mov rsi, rbp ; mov rdi, r12 ; call rax
0x000000000008b18f : je 0x8b237 ; mov rdi, r13 ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x00000000000ad45e : je 0xad48d ; sbb byte ptr [rcx + rcx*4 - 0x16], cl ; mov rdi, rbp ; call rbx
0x00000000000ad71e : je 0xad74d ; sbb byte ptr [rcx + rcx*4 - 0xe], cl ; mov rdi, rbp ; call rbx
0x00000000000ad9fe : je 0xada2d ; sbb byte ptr [rcx + rcx*4 - 0xe], cl ; mov rdi, rbp ; call rbx
0x00000000000bc1a1 : je 0xbc1d0 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc1d5 ; call r15
0x00000000000bc694 : je 0xbc6c3 ; cmp byte ptr [rax - 0x75], cl ; jl 0xbc6c8 ; call r15
0x00000000000c7c30 : je 0xc7c4e ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000c9126 : je 0xc921d ; mov rbp, r13 ; mov rdi, rbx ; call r12
0x00000000000c9c24 : je 0xc9c5a ; adc byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000cd391 : je 0xcd397 ; call rax
0x00000000000cd4e2 : je 0xcd4eb ; call rdx
0x00000000000cd567 : je 0xcd511 ; mov rdi, qword ptr [rbx] ; mov rax, qword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd588 ; call rax
0x00000000000cd573 : je 0xcd57c ; call rax
0x00000000000d024a : je 0xd035d ; mov rdi, qword ptr [rbp - 0x308] ; call r12
0x00000000000f8104 : je 0xf8159 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x0000000000104ac5 : jg 0x104adf ; add byte ptr [rdi], cl ; test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000104edd : jg 0x104eef ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001877ad : jg 0x1877a9 ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001877a9 : jg 0x1877a9 ; push rax ; jg 0x1877ad ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001877b5 : jg 0x1877ad ; call rax
0x0000000000194b3d : jg 0x194b45 ; add ah, ah ; sub ebp, edx ; call rsp
0x0000000000195159 : jg 0x195149 ; call rsp
0x0000000000195151 : jg 0x195149 ; lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x0000000000195209 : jg 0x1951fa ; call rsp
0x00000000000fe788 : jg 0xfe7c6 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000fe7f8 : jg 0xfe836 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001933b0 : jg 0xffffffff91fa33be ; std ; dec esi ; nop ; std ; call rax
0x0000000000103e8b : jge 0x103e8f ; call rbx
0x0000000000103fb2 : jge 0x103fb6 ; call rbx
0x0000000000103fc0 : jge 0x103fc4 ; call rbx
0x00000000001040f5 : jge 0x1040f9 ; call rbx
0x0000000000104265 : jge 0x104269 ; call rbx
0x0000000000104273 : jge 0x104277 ; call rbx
0x00000000001046ad : jge 0x104678 ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x0000000000105a83 : jge 0x105a87 ; call rbx
0x0000000000105bab : jge 0x105baf ; call rbx
0x0000000000105cee : jge 0x105cf2 ; call rbx
0x0000000000105def : jge 0x105df3 ; call rbx
0x0000000000105e0b : jge 0x105e0f ; call rbx
0x00000000001356bf : jge 0x1356d3 ; call rax
0x000000000013b87f : jge 0x13b893 ; call rax
0x000000000013bf98 : jge 0x13bfac ; call rax
0x0000000000170db0 : jge 0x170dc5 ; call r12
0x0000000000186f0c : jge 0x186eec ; call rax
0x00000000001873c5 : jge 0x1873bd ; call rcx
0x00000000001873c1 : jge 0x1873bd ; inc edi ; jge 0x1873c1 ; call rcx
0x00000000001873b9 : jge 0x1873bd ; push qword ptr [rbx - 0x42000b83] ; jge 0x1873c5 ; inc edi ; jge 0x1873c9 ; call rcx
0x00000000001939b5 : jge 0x1939bd ; push qword ptr [rax + 0x40fffc7c] ; jl 0x1939c5 ; call rax
0x00000000001a1461 : jge 0x1a1452 ; call rsi
0x00000000000fe932 : jge 0xfe970 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000104320 : jl 0x10434e ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000106962 : jl 0x106998 ; add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000106afe : jl 0x106b34 ; add al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000012e092 : jl 0x12e0cd ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001939bd : jl 0x1939bd ; call rax
0x00000000001939b9 : jl 0x1939bd ; inc dword ptr [rax + 0x7c] ; cld ; call rax
0x00000000001939bc : jl 0x1939be ; call rax
0x00000000001939fd : jl 0x193a05 ; push qword ptr [rsi + 0x46fffc7b] ; jnp 0x193a0d ; call rsi
0x00000000001939fc : jl 0x193a06 ; push qword ptr [rsi + 0x46fffc7b] ; jnp 0x193a0e ; call rsi
0x0000000000195c64 : jl 0x195c5d ; add byte ptr [rax], al ; je 0x195ca2 ; out dx, eax ; call rsp
0x0000000000196834 : jl 0x196880 ; add dword ptr [rax], eax ; test byte ptr [rdx - 0xd], bh ; call rsp
0x00000000001a13d4 : jl 0x1a1457 ; add byte ptr [rax], al ; clc ; jns 0x1a13cf ; call rcx
0x00000000001b40f1 : jl 0x1b40ec ; call rcx
0x00000000000203e4 : jl 0x20415 ; adc al, 0x48 ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000025842 : jl 0x25870 ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000025ce3 : jl 0x25d0c ; call rbx
0x0000000000026681 : jl 0x266af ; cmp byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x0000000000027dbc : jl 0x27de6 ; call r15
0x0000000000028195 : jl 0x281be ; call rbx
0x0000000000028d6c : jl 0x28d96 ; call r15
0x0000000000029135 : jl 0x2915e ; call rbx
0x0000000000029867 : jl 0x2989c ; adc byte ptr [rbp + rcx*4 - 0x7c], cl ; and al, 0x98 ; add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x000000000002ac37 : jl 0x2ac82 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002ac7c : jl 0x2acc7 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002adf5 : jl 0x2ade8 ; add byte ptr [rdx - 0x75], cl ; add al, 0xe0 ; test rax, rax ; je 0x2ae0f ; call rax
0x0000000000039273 : jl 0x392a5 ; and byte ptr [rax - 0x75], cl ; and al, 0x30 ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000000bc1a6 : jl 0xbc1d0 ; call r15
0x00000000000bc699 : jl 0xbc6c3 ; call r15
0x00000000000c984e : jl 0xc987c ; and byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x00000000000f767a : jl 0xf76b0 ; sub al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000195931 : jle 0x195923 ; call rsp
0x00000000000fe882 : jle 0xfe8c0 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000105586 : jne 0x104b03 ; mov esi, 3 ; mov rdi, r12 ; call rbx
0x0000000000105605 : jne 0x104b28 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105645 : jne 0x104b4c ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105885 : jne 0x104b6c ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001058e5 : jne 0x104be5 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001056a5 : jne 0x104c71 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105925 : jne 0x104c91 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105905 : jne 0x104d0a ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001055c5 : jne 0x104da6 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105685 : jne 0x104dca ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001058c5 : jne 0x104dea ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001058a5 : jne 0x104e63 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105665 : jne 0x104eef ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105865 : jne 0x104f0f ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105845 : jne 0x104f88 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105566 : jne 0x105030 ; mov esi, 3 ; mov rdi, r12 ; call rbx
0x00000000001055e5 : jne 0x105055 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x0000000000105725 : jne 0x105079 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105765 : jne 0x105099 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105745 : jne 0x105112 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105705 : jne 0x10519e ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x0000000000105825 : jne 0x1051be ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105805 : jne 0x105237 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105625 : jne 0x1052d3 ; mov esi, 3 ; mov rdi, r13 ; call rbx
0x00000000001056e5 : jne 0x1052f7 ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001057e5 : jne 0x105317 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001057c5 : jne 0x105390 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001056c5 : jne 0x10541c ; mov esi, 3 ; mov rdi, r14 ; call rbx
0x00000000001057a5 : jne 0x10543c ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x0000000000105785 : jne 0x1054b5 ; mov esi, 3 ; mov rdi, r15 ; call rbx
0x00000000001177d4 : jne 0x1177bf ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x000000000013dd5f : jne 0x13dd5f ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x00000000000768d1 : jne 0x7692d ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000007a349 : jne 0x7a362 ; mov rdx, qword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x0000000000195d89 : jno 0x195d7c ; call rsp
0x00000000001a6331 : jno 0x1a6325 ; call rdi
0x0000000000137893 : jnp 0x1378ff ; call rax
0x00000000001382f3 : jnp 0x13834f ; call rax
0x0000000000193a05 : jnp 0x193a05 ; call rsi
0x0000000000193a01 : jnp 0x193a05 ; inc dword ptr [rsi + 0x7b] ; cld ; call rsi
0x0000000000193a04 : jnp 0x193a06 ; call rsi
0x000000000019710d : jnp 0x19711e ; add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197126 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x0000000000197115 : jnp 0x19711e ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001a145d : jnp 0x1a1465 ; add byte ptr [rax], dl ; jge 0x1a1456 ; call rsi
0x0000000000193bd5 : jns 0x193bd5 ; call rax
0x0000000000193bd1 : jns 0x193bd5 ; inc dword ptr [rax + 0x79] ; cld ; call rax
0x0000000000193bd4 : jns 0x193bd6 ; call rax
0x00000000001a13d9 : jns 0x1a13ca ; call rcx
0x000000000010518c : jo 0x10519c ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051ac : jo 0x1051bd ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000137887 : jo 0x1378df ; mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1378a5 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137886 : jo 0x1378e0 ; mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1378a6 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137f73 : jo 0x137fca ; mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x137f8f ; mov rdi, r12 ; call rax
0x0000000000137f72 : jo 0x137fcb ; mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x137f90 ; mov rdi, r12 ; call rax
0x0000000000187e4c : jo 0x187e23 ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e48 : jo 0x187e23 ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x000000000019432c : jo 0x1942c3 ; cld ; call rax
0x0000000000195d81 : jo 0x195d7c ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x00000000000204a2 : jo 0x204b8 ; add byte ptr [rax], al ; mov rax, qword ptr [r13 + 0x18] ; test rax, rax ; je 0x204c4 ; mov rdi, rbp ; call rax
0x000000000003a237 : jo 0x3a268 ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000ad324 : jo 0xad372 ; mov edi, ebp ; call rbx
0x00000000000ad8cd : jo 0xad91b ; mov edi, ebp ; call rbx
0x0000000000114eb5 : jp 0x114f0c ; mov rsi, rdx ; call rax
0x0000000000193bcd : jp 0x193bd5 ; push qword ptr [rax + 0x40fffc79] ; jns 0x193bdd ; call rax
0x0000000000196839 : jp 0x196830 ; call rsp
0x00000000001a13d5 : jp 0x1a13dd ; add al, bh ; jns 0x1a13ce ; call rcx
0x00000000001af7e1 : jrcxz 0x1af7da ; call rsi
0x00000000001b7cad : jrcxz 0x1b7cb6 ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000193aa1 : js 0x193aa9 ; push qword ptr [rdx + 0x42fffc77] ; ja 0x193ab1 ; call rdx
0x00000000001949bd : js 0x1949c5 ; add byte ptr [rcx + rdx - 0x16], ah ; call rsp
0x0000000000196b59 : js 0x196b51 ; call rsp
0x0000000000196b58 : js 0x196b52 ; call rsp
0x00000000001a92b8 : js 0x1a924f ; call rbx
0x000000000002b02b : js 0x2b076 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000002b053 : js 0x2b09e ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x000000000003a25f : js 0x3a290 ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000193f99 : lahf ; cld ; push qword ptr [rdx + 0x42fffc9e] ; sahf ; cld ; call rdx
0x00000000001059eb : lahf ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x0000000000105a7e : lahf ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105a8c ; call rbx
0x0000000000186f03 : lcall ptr [rbp - 0x1f] ; ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x0000000000187e23 : lcall ptr [rbp - 0x22] ; cmc ; call rsp
0x0000000000195153 : lcall ptr [rbx + 0x7fd40000] ; in al, dx ; call rsp
0x000000000019584b : lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x0000000000198bfb : lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x00000000001872d7 : lcall ptr [rcx + rbp*8 - 0xd] ; call rbx
0x0000000000196b7b : lcall ptr [rcx + rbx*2] ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x000000000019671b : lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x0000000000187def : lcall ptr [rdi] ; mov edx, 0xb6e6fff5 ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x00000000001872eb : lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x000000000018727f : lcall ptr [rdx + rbp*8 - 0x1563000d] ; call rbx
0x00000000001872cf : lcall ptr [rdx + rbp*8 - 0x1563000d] ; lcall ptr [rcx + rbp*8 - 0xd] ; call rbx
0x00000000001872cb : lcall ptr [rdx + rbp*8 - 0x1563000d] ; lcall ptr [rdx + rbp*8 - 0x16a3000d] ; call rbx
0x00000000001872d3 : lcall ptr [rdx + rbp*8 - 0x16a3000d] ; call rbx
0x00000000001988db : lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x0000000000198f93 : lcall ptr [rdx + rdi - 0x708bfffe] ; cli ; call rsp
0x0000000000195d83 : lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000187df7 : lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x00000000001939af : lcall ptr [rsi + 0x20fffc76] ; jge 0x1939c3 ; push qword ptr [rax + 0x40fffc7c] ; jl 0x1939cb ; call rax
0x000000000019422b : lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x000000000019894b : lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x0000000000193c6b : lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000198edb : lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x000000000019867b : lcall ptr [rsp + rsi*8] ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000002986b : lea eax, dword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000012cdcc : lea ebp, dword ptr [rsp + 8] ; xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x000000000003763b : lea ebx, dword ptr [rax + rsi] ; nop ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x00000000000acc62 : lea ecx, dword ptr [rax + 1] ; call rbx
0x00000000000acd94 : lea ecx, dword ptr [rax + 4] ; call rbx
0x00000000000ad19d : lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000076b80 : lea ecx, dword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000006d765 : lea ecx, dword ptr [rbx + 0x40] ; lea rdx, qword ptr [rbx + 0x34] ; mov esi, 1 ; mov rdi, rbx ; call rax
0x000000000006da70 : lea ecx, dword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x00000000000768d4 : lea ecx, dword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769b0 : lea ecx, dword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000000ad113 : lea ecx, dword ptr [rsp + 0x20] ; call rbx
0x00000000000acd8f : lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000acc5d : lea ecx, dword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000ad5ea : lea ecx, dword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000bb41f : lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad321 : lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000001356be : lea edi, dword ptr [rbp + 0x10] ; call rax
0x00000000001382f2 : lea edi, dword ptr [rbx + 0x58] ; call rax
0x0000000000137892 : lea edi, dword ptr [rbx + 0x68] ; call rax
0x0000000000134af5 : lea edi, dword ptr [rbx + 0xc8] ; call rax
0x000000000003927c : lea edi, dword ptr [rbx + rsi] ; call rax
0x0000000000122ee1 : lea edi, dword ptr [rip + 0x2a2815] ; call rax
0x0000000000122632 : lea edi, dword ptr [rip + 0x2a3068] ; call rax
0x00000000001177d7 : lea edi, dword ptr [rip - 0x16d] ; call rax
0x000000000006da6c : lea edx, dword ptr [rbx + 0x34] ; lea rcx, qword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x000000000006d769 : lea edx, dword ptr [rbx + 0x34] ; mov esi, 1 ; mov rdi, rbx ; call rax
0x00000000000768d0 : lea esi, dword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8c : lea esi, dword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769a9 : lea esi, dword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000001177d3 : lea esi, dword ptr [rbp - 0x20] ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x00000000000453ef : lea esi, dword ptr [rip + 0x1cb] ; call rax
0x00000000000704ca : lea esi, dword ptr [rip + 0x30] ; call rax
0x000000000007e3ca : lea esi, dword ptr [rip - 0x19b0] ; call rax
0x000000000007e884 : lea esi, dword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed44 : lea esi, dword ptr [rip - 0x232a] ; call rax
0x00000000000707b4 : lea esi, dword ptr [rip - 0x2ba] ; call rax
0x000000000007cd2a : lea esi, dword ptr [rip - 0x310] ; call rax
0x000000000007cf9a : lea esi, dword ptr [rip - 0x580] ; call rax
0x000000000006f033 : lea esi, dword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000037605 : lea esp, dword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x0000000000037604 : lea r12, qword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x000000000003927b : lea r15, qword ptr [rbx + r14] ; call rax
0x000000000002986a : lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x0000000000076b7f : lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000768d3 : lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769af : lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000000ad112 : lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000acd8e : lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000acc5c : lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000ad5e9 : lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000bb41e : lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad320 : lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000003763a : lea rbx, qword ptr [rax + r14] ; nop ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x00000000000acc61 : lea rcx, qword ptr [rax + 1] ; call rbx
0x00000000000acd93 : lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad19c : lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000006d764 : lea rcx, qword ptr [rbx + 0x40] ; lea rdx, qword ptr [rbx + 0x34] ; mov esi, 1 ; mov rdi, rbx ; call rax
0x000000000006da6f : lea rcx, qword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x00000000001356bd : lea rdi, qword ptr [rbp + 0x10] ; call rax
0x00000000001382f1 : lea rdi, qword ptr [rbx + 0x58] ; call rax
0x0000000000137891 : lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000134af4 : lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x0000000000122ee0 : lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x0000000000122631 : lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x00000000001177d6 : lea rdi, qword ptr [rip - 0x16d] ; call rax
0x000000000006d768 : lea rdx, qword ptr [rbx + 0x34] ; mov esi, 1 ; mov rdi, rbx ; call rax
0x00000000000768cf : lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000076a8b : lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x00000000000769a8 : lea rsi, qword ptr [rbp + 0x90] ; lea r9, qword ptr [rsp + 0x18] ; mov rdi, r12 ; call rbx
0x00000000001177d2 : lea rsi, qword ptr [rbp - 0x20] ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x00000000000453ee : lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c9 : lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c9 : lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e883 : lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed43 : lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707b3 : lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd29 : lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf99 : lea rsi, qword ptr [rip - 0x580] ; call rax
0x000000000006f032 : lea rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000029874 : leave ; call r15
0x000000000002af86 : leave ; je 0x2af8e ; call rcx
0x000000000002145f : leave ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10f : leave ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000186f07 : ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x0000000000199483 : ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000195663 : ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x000000000019565b : ljmp ptr [rax + rcx*8] ; add ah, al ; sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x000000000019932b : ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x00000000001986a3 : ljmp ptr [rbp + rsi*8 + 1] ; add byte ptr [rcx + rdi], al ; stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x0000000000193c67 : ljmp ptr [rbp*2 + 0x6c9cfffc] ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x00000000001963e3 : ljmp ptr [rbx + 1] ; add byte ptr [rbx + rcx*8 + 0x2384fff1], dl ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000198bb3 : ljmp ptr [rdi + rbx + 2] ; add byte ptr [rbx + rdx], dl ; cli ; inc dword ptr [rdi + rbx + 0x14b40002] ; cli ; call rsp
0x0000000000198383 : ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x00000000001966db : ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000194227 : ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x000000000019422f : ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x00000000001963fb : ljmp ptr [rsp + 1] ; add byte ptr [rbx + rsi*8 + 0x24bcfff1], ah ; add dword ptr [rax], eax ; mov ah, 0xf3 ; int1 ; call rsp
0x0000000000193c6f : ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000195c65 : lock add byte ptr [rax], al ; je 0x195ca1 ; out dx, eax ; call rsp
0x00000000001109f9 : lodsb al, byte ptr [rsi] ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; test byte ptr [rax - 0x75], 0x54 ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000001a5a81 : lodsb al, byte ptr [rsi] ; cli ; call rsp
0x000000000019932c : lodsb al, byte ptr [rsi] ; push rax ; add al, byte ptr [rax] ; je 0x199332 ; cli ; call rsp
0x0000000000194ca4 : lodsb al, byte ptr [rsi] ; xchg dword ptr [rax], eax ; add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x0000000000193349 : lodsd eax, dword ptr [rsi] ; sti ; call rax
0x0000000000089f27 : loop 0x89f79 ; mov edi, edi ; call rax
0x00000000000ad31f : loop 0xad376 ; lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000ad5e8 : loop 0xad63f ; lea ecx, dword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c8 : loop 0xad91f ; lea ecx, dword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x0000000000106a7b : loope 0x106a31 ; sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x106b90 ; call rax
0x0000000000186f05 : loope 0x186f04 ; ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x0000000000196a51 : loope 0x196a48 ; call rsp
0x00000000001177d5 : loopne 0x117827 ; lea edi, dword ptr [rip - 0x16d] ; call rax
0x0000000000186d2d : loopne 0x186d24 ; call rax
0x0000000000187e51 : loopne 0x187e4a ; call rsp
0x0000000000187e50 : loopne 0x187e4b ; call rsp
0x00000000001933b4 : loopne 0x19334e ; std ; dec esi ; nop ; std ; call rax
0x000000000002adfb : loopne 0x2ae4b ; test eax, eax ; je 0x2ae09 ; call rax
0x000000000006efe8 : loopne 0x6efee ; add byte ptr [rax], al ; call rax
0x000000000006f03a : loopne 0x6f040 ; add byte ptr [rax], al ; call rax
0x0000000000198bc0 : mov ah, 0x14 ; cli ; call rsp
0x0000000000199400 : mov ah, 0x17 ; sti ; call rsp
0x000000000012fbd9 : mov ah, 0x24 ; add byte ptr [rdx], ch ; add byte ptr [rax], al ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013ab5a : mov ah, 0x28 ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000195668 : mov ah, 0x2d ; out dx, al ; call rsp
0x00000000001949bc : mov ah, 0x78 ; add byte ptr [rax], al ; adc edx, ebp ; call rsp
0x0000000000194064 : mov ah, 0x9d ; cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x000000000019572c : mov ah, 0xcd ; add byte ptr [rax], al ; in al, 0x42 ; out dx, al ; call rsp
0x0000000000199398 : mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000196408 : mov ah, 0xf3 ; int1 ; call rsp
0x00000000001a80c0 : mov al, 0x16 ; call rcx
0x000000000018628c : mov al, 0x24 ; call rax
0x00000000001862ac : mov al, 0x25 ; call rax
0x0000000000021dcc : mov al, 0x43 ; adc al, byte ptr [rax] ; mov rdi, r12 ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000193bd0 : mov al, 0x79 ; cld ; inc dword ptr [rax + 0x79] ; cld ; call rax
0x00000000001939b8 : mov al, 0x7c ; cld ; inc dword ptr [rax + 0x7c] ; cld ; call rax
0x00000000001b9bb0 : mov al, 0x8f ; sti ; call rcx
0x00000000001a92a0 : mov al, 0x91 ; call rbx
0x00000000001933cc : mov al, 0x91 ; std ; call rsi
0x00000000001940c8 : mov al, 0xa0 ; cld ; inc dword ptr [rax - 0x60] ; cld ; call rax
0x0000000000187ce0 : mov bh, 0x2f ; cmc ; dec dword ptr [rdi + rbp] ; cmc ; push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x000000000010426e : mov bh, 0xf1 ; dec dword ptr [rax - 0x75] ; jge 0x10427c ; call rbx
0x0000000000104253 : mov bh, 0xf1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x000000000010427c : mov bh, 0xf1 ; dec dword ptr [rcx - 0x75] ; cmp al, 0x24 ; call rbx
0x0000000000104260 : mov bh, 0xf1 ; dec dword ptr [rcx - 0x75] ; jge 0x10426e ; call rbx
0x0000000000187dfd : mov bh, 0xf5 ; call rsp
0x0000000000122514 : mov bl, 6 ; add al, ch ; and al, 0x98 ; add byte ptr [rax], al ; test rax, rax ; je 0x122536 ; mov rdi, rbx ; call rax
0x0000000000038648 : mov byte ptr [rax + 0xe], cl ; mov rdx, r13 ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x0000000000136dad : mov byte ptr [rax], al ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136dcf ; mov rdi, rbp ; call rax
0x000000000008b03c : mov byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, rbp ; mov rdi, r12 ; call rax
0x0000000000146731 : mov byte ptr [rbx + rcx*4 + 0xa], al ; mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x00000000001a5f18 : mov byte ptr [rcx - 0x10], ah ; call rdx
0x0000000000197f7d : mov byte ptr [rcx], 0 ; je 0x197fba ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x00000000000842ba : mov byte ptr [rsp + 0x28], bl ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000842b9 : mov byte ptr [rsp + 0x28], r11b ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x0000000000076a8d : mov ch, 0x90 ; add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov rdi, r12 ; call rbx
0x00000000000769aa : mov ch, 0x90 ; add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x18 ; mov rdi, r12 ; call rbx
0x0000000000105067 : mov ch, 6 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001991b1 : mov cl, 0xfa ; call rsp
0x0000000000193a00 : mov dh, 0x7b ; cld ; inc dword ptr [rsi + 0x7b] ; cld ; call rsi
0x0000000000193ef8 : mov dh, 0xa2 ; cld ; inc dword ptr [rsi - 0x5e] ; cld ; call rsi
0x0000000000021461 : mov dh, 0xc0 ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x0000000000187df5 : mov dh, 0xf5 ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x000000000012221c : mov dh, 6 ; add al, ch ; sbb al, 0x9b ; add byte ptr [rax], al ; test rax, rax ; je 0x12223e ; mov rdi, rbx ; call rax
0x0000000000186d14 : mov dh, bl ; call rax
0x0000000000187e14 : mov dh, bl ; cmc ; call rsp
0x0000000000196311 : mov dh, cl ; call rsp
0x0000000000193aa4 : mov dl, 0x77 ; cld ; inc dword ptr [rdx + 0x77] ; cld ; call rdx
0x0000000000193f9c : mov dl, 0x9e ; cld ; inc dword ptr [rdx - 0x62] ; cld ; call rdx
0x00000000001a2131 : mov dl, 0xed ; call rdx
0x000000000010540a : mov dl, 2 ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000187950 : mov dl, ah ; hlt ; dec dword ptr [rdx - 0x56000b2c] ; sal ah, cl ; call rbx
0x0000000000108d74 : mov dword ptr [0x2d0], eax ; pop rax ; pop rdi ; call rax
0x000000000004b855 : mov dword ptr [rbp - 0x4d8], eax ; mov rsi, r15 ; mov rdi, r14 ; call rax
0x000000000004b854 : mov dword ptr [rbp - 0x4d8], r8d ; mov rsi, r15 ; mov rdi, r14 ; call rax
0x0000000000057225 : mov dword ptr [rbp - 0x510], ebx ; mov rdi, qword ptr [rbp - 0x4a0] ; call rax
0x0000000000057224 : mov dword ptr [rbp - 0x510], r11d ; mov rdi, qword ptr [rbp - 0x4a0] ; call rax
0x0000000000116102 : mov dword ptr [rbp - 0x70], eax ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x0000000000115ea5 : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161fc : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000011603b : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f04 : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x00000000001164e2 : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, qword ptr [rbp - 0x158] ; call rax
0x000000000011628b : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115ac4 : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115f93 : mov dword ptr [rbp - 0x70], edx ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115a0b : mov dword ptr [rbp - 0x70], edx ; mov rdx, r13 ; call rax
0x0000000000115a03 : mov dword ptr [rbp - 0x80], 0 ; mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x0000000000116109 : mov dword ptr [rbp - 0x80], eax ; call r8
0x00000000001164e8 : mov dword ptr [rbp - 0x80], edx ; mov rdx, qword ptr [rbp - 0x158] ; call rax
0x0000000000115f0a : mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x0000000000115aca : mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115eac : mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115f99 : mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000089f1c : mov dword ptr [rbp], eax ; je 0x8a01f ; mov rdx, r12 ; mov rdi, r15 ; call rax
0x000000000008a43c : mov dword ptr [rbp], eax ; je 0x8a61f ; mov rdx, r15 ; mov rdi, r8 ; call rax
0x000000000008b037 : mov dword ptr [rbp], eax ; je 0x8b0d7 ; mov rsi, rbp ; mov rdi, r12 ; call rax
0x000000000002adf4 : mov dword ptr [rbp], edi ; mov rax, qword ptr [rax + r12*8] ; test rax, rax ; je 0x2ae10 ; call rax
0x000000000003a87a : mov dword ptr [rbp], edx ; call rax
0x000000000008b5a3 : mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx + 0x48], r9 ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x000000000008b4f3 : mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x000000000008b4ed : mov dword ptr [rbx + 0x40], eax ; movsxd rdi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x000000000008b5a7 : mov dword ptr [rbx + 0x48], ecx ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x0000000000089d1c : mov dword ptr [rbx], eax ; je 0x89e2b ; mov rsi, r14 ; call rax
0x000000000012ca34 : mov dword ptr [rbx], eax ; mov r8, rbp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000012caa4 : mov dword ptr [rbx], eax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000008b4f7 : mov dword ptr [rbx], edi ; call rcx
0x000000000008b5ab : mov dword ptr [rbx], esi ; mov rdi, r9 ; call rcx
0x000000000002af7e : mov dword ptr [rsi], ecx ; mov rcx, qword ptr [rax + r15*8] ; test rcx, rcx ; je 0x2af96 ; call rcx
0x00000000000843b8 : mov dword ptr [rsp + 0x10], ecx ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000843b3 : mov dword ptr [rsp + 0x18], eax ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000842c4 : mov dword ptr [rsp + 0x18], edx ; call rdx
0x00000000000842bf : mov dword ptr [rsp + 0x20], eax ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000bc652 : mov dword ptr [rsp + 0xa8], esp ; call r15
0x0000000000104236 : mov dword ptr [rsp + 8], eax ; call rbx
0x00000000000843bd : mov dword ptr [rsp + 8], ecx ; call rsi
0x00000000000757bf : mov dword ptr [rsp + 8], ecx ; mov rdi, r15 ; call rax
0x000000000013d249 : mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000008a189 : mov dword ptr [rsp], eax ; je 0x8a26f ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008aeab : mov dword ptr [rsp], eax ; je 0x8af9f ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000012ccc7 : mov dword ptr [rsp], eax ; mov rcx, rax ; call r12
0x000000000017209c : mov dword ptr [rsp], ebx ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b6 ; call rdx
0x000000000007a353 : mov dword ptr [rsp], ecx ; mov rdi, rbx ; call rax
0x0000000000108d73 : mov dword ptr fs:[0x2d0], eax ; pop rax ; pop rdi ; call rax
0x0000000000187e10 : mov eax, 0x88fff5dd ; fdivrp st(5) ; call rsp
0x00000000001040e3 : mov eax, 0x8b49fff1 ; call rbx
0x00000000001040f0 : mov eax, 0x8b49fff1 ; jge 0x1040fe ; call rbx
0x00000000001056a7 : mov eax, 0xbefffff5 ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000116105 : mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x000000000012df6d : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12df85 ; mov rdi, rsp ; call rax
0x000000000012e058 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12e070 ; mov rdi, rsp ; call rax
0x000000000012e913 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12e92b ; mov rdi, rbp ; call rax
0x000000000012f976 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12f98e ; mov rdi, rbx ; call rax
0x000000000012fbf1 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12fa9f ; mov rdi, rbx ; call rax
0x000000000012fce8 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x12fd00 ; mov rdi, rbx ; call rax
0x0000000000134aec : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x134b0c ; lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x00000000001354e4 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1354fc ; mov rdi, r12 ; call rax
0x00000000001356b5 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1356cf ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000136a6a : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x136997 ; mov rdi, rbx ; call rax
0x00000000001369a1 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1369b9 ; mov rdi, r12 ; call rax
0x0000000000136b92 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x136baa ; mov rdi, rbp ; call rax
0x0000000000136db2 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x136dca ; mov rdi, rbp ; call rax
0x0000000000137889 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x1378a3 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137f75 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x137f8d ; mov rdi, r12 ; call rax
0x00000000001382e9 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x138303 ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x000000000013b875 : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x13b88f ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf8e : mov eax, dword ptr [rax + 0x38] ; test rax, rax ; je 0x13bfa8 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000194d95 : mov eax, dword ptr [rax] ; add byte ptr [rdx + rsi*2 - 0x74ab0016], ah ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d9b ; call rsp
0x0000000000106909 : mov eax, dword ptr [rax] ; test rax, rax ; je 0x1069b3 ; call rax
0x0000000000106a80 : mov eax, dword ptr [rax] ; test rax, rax ; je 0x106b8b ; call rax
0x0000000000114eac : mov eax, dword ptr [rax] ; test rax, rax ; je 0x114ede ; mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x000000000002adf9 : mov eax, dword ptr [rax] ; test rax, rax ; je 0x2ae0b ; call rax
0x0000000000080a3a : mov eax, dword ptr [rax] ; test rax, rax ; je 0x80a4a ; call rax
0x0000000000087dd6 : mov eax, dword ptr [rax] ; test rax, rax ; je 0x87de6 ; call rax
0x00000000001356b1 : mov eax, dword ptr [rbp + 0x18] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1356d3 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013b871 : mov eax, dword ptr [rbp + 0x18] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x13b893 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf8a : mov eax, dword ptr [rbp + 0x18] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x13bfac ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x00000000000204a7 : mov eax, dword ptr [rbp + 0x18] ; test rax, rax ; je 0x204bf ; mov rdi, rbp ; call rax
0x00000000001046b3 : mov eax, dword ptr [rbp - 0x48] ; call rax
0x00000000000ee9f5 : mov eax, dword ptr [rbp - 0xd8] ; call rax
0x000000000012e90f : mov eax, dword ptr [rbx + 0x20] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e92f ; mov rdi, rbp ; call rax
0x00000000001382e5 : mov eax, dword ptr [rbx + 0x60] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x138307 ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x0000000000137885 : mov eax, dword ptr [rbx + 0x70] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1378a7 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x00000000000cd4d9 : mov eax, dword ptr [rbx] ; mov rdx, qword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f4 ; call rdx
0x000000000019747d : mov eax, dword ptr [rcx] ; add byte ptr [rbx + rax*8 - 0xa], ah ; call rsp
0x00000000000cd56d : mov eax, dword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd582 ; call rax
0x000000000002c352 : mov eax, dword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2c36a ; call rax
0x00000000001721b8 : mov eax, dword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721cf ; call rax
0x0000000000087dcf : mov eax, dword ptr [rip + 0x33909b] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87ded ; call rax
0x0000000000080a33 : mov eax, dword ptr [rip + 0x340477] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a51 ; call rax
0x0000000000137f71 : mov eax, dword ptr [rsi + 0x70] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x137f91 ; mov rdi, r12 ; call rax
0x00000000001160fe : mov eax, dword ptr [rsi - 0x10] ; mov qword ptr [rbp - 0x70], rax ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x0000000000116106 : mov eax, dword ptr [rsi - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x0000000000145d1e : mov eax, dword ptr [rsp + 0x10] ; call rax
0x00000000000203eb : mov eax, dword ptr [rsp + 0x18] ; call rax
0x0000000000025846 : mov eax, dword ptr [rsp + 0x20] ; call rax
0x0000000000039277 : mov eax, dword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000136b8d : mov eax, dword ptr [rsp + 0x38] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136baf ; mov rdi, rbp ; call rax
0x000000000013699c : mov eax, dword ptr [rsp + 0x48] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369be ; mov rdi, r12 ; call rax
0x000000000012df68 : mov eax, dword ptr [rsp + 8] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df8a ; mov rdi, rsp ; call rax
0x000000000012e053 : mov eax, dword ptr [rsp + 8] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e075 ; mov rdi, rsp ; call rax
0x000000000010422e : mov eax, dword ptr [rsp + 8] ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x0000000000131a81 : mov eax, dword ptr [rsp + 8] ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000cd38a : mov eax, dword ptr [rsp + 8] ; test rax, rax ; je 0xcd39e ; call rax
0x000000000012ca37 : mov eax, ebp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000c96bd : mov eax, ebx ; call rax
0x000000000013a4b6 : mov eax, edi ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x0000000000105df7 : mov ebp, 0x49fff19b ; mov edi, dword ptr [rsp] ; call rbx
0x00000000001873c0 : mov ebp, 0xc7fff47d ; jge 0x1873c2 ; call rcx
0x000000000005722d : mov ebp, 0xfffffb60 ; call rax
0x00000000000d0252 : mov ebp, 0xfffffcf8 ; call r12
0x0000000000037b8b : mov ebp, dword ptr [rsp + 0x50] ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x00000000000c912d : mov ebp, ebp ; mov rdi, rbx ; call r12
0x00000000001046b0 : mov ebp, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x0000000000104acf : mov ebp, edi ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000006efdc : mov ebp, edx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000001872e4 : mov ebx, 0x72fff401 ; add dh, ah ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x0000000000103e79 : mov ebx, 0x8b49fff1 ; call rbx
0x0000000000103e86 : mov ebx, 0x8b49fff1 ; jge 0x103e94 ; call rbx
0x0000000000134af6 : mov ebx, 0xc8 ; call rax
0x00000000001954ad : mov ebx, 0xe9a40000 ; in eax, dx ; call rsp
0x0000000000037602 : mov ebx, eax ; lea r12, qword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x000000000006efdf : mov ebx, edi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000002c356 : mov ebx, edi ; test rax, rax ; je 0x2c366 ; call rax
0x000000000011f6b9 : mov ecx, 0x400 ; mov rdx, r15 ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x0000000000103fbb : mov ecx, 0x8b48fff1 ; jge 0x103fc9 ; call rbx
0x000000000010405d : mov ecx, 0x8b49fff1 ; call rbx
0x0000000000187df9 : mov ecx, 0xb794fff5 ; cmc ; call rsp
0x0000000000105747 : mov ecx, 0xbefffff9 ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x000000000002af81 : mov ecx, dword ptr [rax + rdi*8] ; test rcx, rcx ; je 0x2af93 ; call rcx
0x0000000000021dd4 : mov ecx, dword ptr [rbp - 0x60] ; call rcx
0x0000000000104af1 : mov ecx, dword ptr [rdx] ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000146733 : mov ecx, dword ptr [rdx] ; mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x0000000000138473 : mov ecx, dword ptr [rsp + 0x10] ; call rcx
0x00000000000ad458 : mov ecx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad718 : mov ecx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000027a85 : mov ecx, dword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025347 : mov ecx, dword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000135015 : mov ecx, dword ptr [rsp + 0x28] ; call rcx
0x0000000000024d63 : mov ecx, dword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818a : mov ecx, dword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000134dfb : mov ecx, dword ptr [rsp + 0x30] ; call rcx
0x0000000000023a1a : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f78 : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1b : mov ecx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025cd8 : mov ecx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000243de : mov ecx, dword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x0000000000131b8e : mov ecx, dword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012fbe3 : mov ecx, dword ptr [rsp] ; call rcx
0x000000000012cccb : mov ecx, eax ; call r12
0x000000000012cdd9 : mov ecx, ebp ; call r15
0x00000000000bb41c : mov ecx, ebp ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x0000000000076b84 : mov ecx, ebp ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000ad5e4 : mov ecx, ebp ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c4 : mov ecx, ebp ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000001226d1 : mov ecx, edi ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000ad31b : mov ecx, edi ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000213eb : mov ecx, esi ; call rbx
0x00000000000768cd : mov ecx, esi ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012ca3a : mov ecx, esi ; mov rdi, r13 ; call r12
0x000000000013a4b9 : mov ecx, esi ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000213de : mov ecx, esp ; push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000001108f6 : mov edi, 0x2000001 ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x0000000000110a04 : mov edi, 0x2000004 ; call rax
0x00000000001059dd : mov edi, 0x49ffffe3 ; mov edi, dword ptr [rdi] ; call rbx
0x000000000006efe7 : mov edi, 0xe0 ; call rax
0x00000000000f76b6 : mov edi, 1 ; call rax
0x000000000003a25e : mov edi, dword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000bb424 : mov edi, dword ptr [rax] ; call r14
0x0000000000104233 : mov edi, dword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000d0251 : mov edi, dword ptr [rbp - 0x308] ; call r12
0x00000000001046ac : mov edi, dword ptr [rbp - 0x40] ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x000000000005722c : mov edi, dword ptr [rbp - 0x4a0] ; call rax
0x0000000000103e8a : mov edi, dword ptr [rbp] ; call rbx
0x00000000000cd56a : mov edi, dword ptr [rbx] ; mov rax, qword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd585 ; call rax
0x000000000006efe6 : mov edi, dword ptr [rdi + 0xe0] ; call rax
0x0000000000103e38 : mov edi, dword ptr [rdi] ; call rbx
0x0000000000114eb4 : mov edi, dword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x0000000000103df7 : mov edi, dword ptr [rsi] ; call rbx
0x0000000000029866 : mov edi, dword ptr [rsp + 0x10] ; lea r8, qword ptr [rsp + 0x98] ; xor r9d, r9d ; call r15
0x000000000010431f : mov edi, dword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000203e3 : mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000003761d : mov edi, dword ptr [rsp + 0x18] ; call r15
0x0000000000023a24 : mov edi, dword ptr [rsp + 0x20] ; call r14
0x00000000000238bf : mov edi, dword ptr [rsp + 0x20] ; call r15
0x00000000000c984d : mov edi, dword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039272 : mov edi, dword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000000241b7 : mov edi, dword ptr [rsp + 0x30] ; call r15
0x00000000000243e8 : mov edi, dword ptr [rsp + 0x30] ; call rbx
0x0000000000023f82 : mov edi, dword ptr [rsp + 0x38] ; call r14
0x0000000000023c44 : mov edi, dword ptr [rsp + 0x38] ; call r15
0x0000000000025351 : mov edi, dword ptr [rsp + 0x38] ; call rbx
0x0000000000026680 : mov edi, dword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000047bc9 : mov edi, dword ptr [rsp + 0x3c] ; call rax
0x0000000000027dbb : mov edi, dword ptr [rsp + 0x40] ; call r15
0x0000000000025ce2 : mov edi, dword ptr [rsp + 0x40] ; call rbx
0x0000000000025841 : mov edi, dword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000391f9 : mov edi, dword ptr [rsp] ; call r14
0x0000000000104280 : mov edi, dword ptr [rsp] ; call rbx
0x00000000000acc59 : mov edi, dword ptr [rsp] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000008a449 : mov edi, eax ; call rax
0x0000000000089aea : mov edi, eax ; call rcx
0x00000000000cd387 : mov edi, eax ; mov rax, qword ptr [r12 + 8] ; test rax, rax ; je 0xcd3a1 ; call rax
0x00000000000ee9f2 : mov edi, eax ; mov rax, qword ptr [rbp - 0xd8] ; call rax
0x0000000000170dac : mov edi, ebp ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x00000000001226de : mov edi, ebp ; call r12
0x000000000012e71d : mov edi, ebp ; call r14
0x0000000000037647 : mov edi, ebp ; call r15
0x00000000000204b0 : mov edi, ebp ; call rax
0x00000000000ad326 : mov edi, ebp ; call rbx
0x000000000013e871 : mov edi, ebp ; call rcx
0x00000000001304f5 : mov edi, ebp ; call rdx
0x000000000013ddb1 : mov edi, ebp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd65 : mov edi, ebp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000138470 : mov edi, ebp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000008b196 : mov edi, ebp ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x000000000002f2a8 : mov edi, ebp ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000299b7 : mov edi, ebx ; call r12
0x0000000000021767 : mov edi, ebx ; call r14
0x000000000006da79 : mov edi, ebx ; call r8
0x000000000006d772 : mov edi, ebx ; call rax
0x000000000012ccc4 : mov edi, ebx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x0000000000145d1b : mov edi, ebx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbe0 : mov edi, ebx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000012cdd6 : mov edi, ebx ; mov rcx, r13 ; call r15
0x000000000008b5ae : mov edi, ecx ; call rcx
0x00000000000cd652 : mov edi, ecx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000013d14e : mov edi, edi ; call r14
0x00000000000757c4 : mov edi, edi ; call rax
0x0000000000104b61 : mov edi, edi ; call rbx
0x0000000000104b7c : mov edi, edi ; mov edx, 4 ; mov esi, 1 ; call rbx
0x0000000000076b87 : mov edi, edi ; xor r8d, r8d ; call rbx
0x000000000014719f : mov edi, edx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000004b85f : mov edi, esi ; call rax
0x0000000000104b41 : mov edi, esi ; call rbx
0x0000000000037b94 : mov edi, esi ; mov rdx, rbp ; call r15
0x0000000000039400 : mov edi, esp ; call r14
0x0000000000037609 : mov edi, esp ; call r15
0x00000000000877f6 : mov edi, esp ; call rax
0x00000000000768d9 : mov edi, esp ; call rbx
0x000000000013d251 : mov edi, esp ; call rdx
0x0000000000021dd1 : mov edi, esp ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000135012 : mov edi, esp ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134df8 : mov edi, esp ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000103f1a : mov edx, 0x8b49fff1 ; call rbx
0x0000000000103fad : mov edx, 0x8b49fff1 ; jge 0x103fbb ; call rbx
0x0000000000187df1 : mov edx, 0xb6e6fff5 ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x0000000000047c0a : mov edx, 0xc1480037 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000198949 : mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x000000000013e992 : mov edx, 0xffffffff ; mov rsi, r14 ; mov rdi, rbp ; call r12
0x000000000013d145 : mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000013e868 : mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x000000000013ddb3 : mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd67 : mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000105017 : mov edx, 1 ; je 0x105570 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104aea : mov edx, 1 ; je 0x105590 ; xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104d6b : mov edx, 1 ; mov esi, 1 ; mov rdi, r12 ; call rbx
0x0000000000104fe9 : mov edx, 1 ; mov esi, 2 ; mov rdi, r12 ; call rbx
0x0000000000104d8d : mov edx, 2 ; je 0x1055d0 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x000000000010503c : mov edx, 2 ; je 0x1055f0 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b0f : mov edx, 2 ; je 0x105610 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001052ba : mov edx, 2 ; je 0x105630 ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104c37 : mov edx, 2 ; mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104d5c : mov edx, 2 ; mov esi, 2 ; mov rdi, r13 ; call rbx
0x0000000000104b33 : mov edx, 3 ; je 0x105650 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104ed6 : mov edx, 3 ; je 0x105670 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104db1 : mov edx, 3 ; je 0x105690 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104c58 : mov edx, 3 ; je 0x1056b0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105403 : mov edx, 3 ; je 0x1056d0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001052de : mov edx, 3 ; je 0x1056f0 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105185 : mov edx, 3 ; je 0x105710 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000105060 : mov edx, 3 ; je 0x105730 ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104baf : mov edx, 3 ; mov esi, 1 ; mov rdi, r14 ; call rbx
0x0000000000104c28 : mov edx, 3 ; mov esi, 2 ; mov rdi, r14 ; call rbx
0x00000000001050f9 : mov edx, 4 ; je 0x105750 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105080 : mov edx, 4 ; je 0x105770 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010549c : mov edx, 4 ; je 0x105790 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105423 : mov edx, 4 ; je 0x1057b0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000105377 : mov edx, 4 ; je 0x1057d0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052fe : mov edx, 4 ; je 0x1057f0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000010521e : mov edx, 4 ; je 0x105810 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001051a5 : mov edx, 4 ; je 0x105830 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104f6f : mov edx, 4 ; je 0x105850 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104ef6 : mov edx, 4 ; je 0x105870 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b53 : mov edx, 4 ; je 0x105890 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104e4a : mov edx, 4 ; je 0x1058b0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104dd1 : mov edx, 4 ; je 0x1058d0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104bcc : mov edx, 4 ; je 0x1058f0 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104cf1 : mov edx, 4 ; je 0x105910 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104c78 : mov edx, 4 ; je 0x105930 ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000104b7e : mov edx, 4 ; mov esi, 1 ; call rbx
0x0000000000104ba0 : mov edx, 4 ; mov esi, 2 ; mov rdi, r15 ; call rbx
0x0000000000115ea8 : mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161ff : mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000011603e : mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x00000000000cd4dc : mov edx, dword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f1 ; call rdx
0x00000000001720a0 : mov edx, dword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b2 ; call rdx
0x00000000000203e8 : mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000115ea9 : mov edx, dword ptr [rbp + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000116200 : mov edx, dword ptr [rbp + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x00000000001164ec : mov edx, dword ptr [rbp - 0x158] ; call rax
0x000000000014672f : mov edx, dword ptr [rbp - 0x78] ; mov r9d, dword ptr [rdx] ; mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x0000000000115f07 : mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x0000000000115f00 : mov edx, dword ptr [rbx + 0x38] ; mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x000000000007a34c : mov edx, dword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x00000000001164e5 : mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, qword ptr [rbp - 0x158] ; call rax
0x000000000011628e : mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115ac0 : mov edx, dword ptr [rbx - 0x10] ; mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115ac7 : mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115f96 : mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f8f : mov edx, dword ptr [rcx + 0x38] ; mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x00000000000757b8 : mov edx, dword ptr [rdi + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000012ca31 : mov edx, dword ptr [rdi] ; mov qword ptr [rbx], rax ; mov r8, rbp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000012caa1 : mov edx, dword ptr [rdi] ; mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000001304ec : mov edx, dword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130504 ; mov rdi, rbp ; call rdx
0x000000000011603f : mov edx, dword ptr [rsi + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000110a00 : mov edx, dword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000001108fc : mov edx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d4 : mov edx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000c9848 : mov edx, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024faf : mov edx, dword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x00000000000238b5 : mov edx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db1 : mov edx, dword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ad : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd0 : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3a : mov edx, dword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087161 : mov edx, dword ptr [rsp + 0x68] ; call rax
0x0000000000088479 : mov edx, dword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000001304e7 : mov edx, dword ptr [rsp + 8] ; mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130509 ; mov rdi, rbp ; call rdx
0x00000000000391f1 : mov edx, dword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f8 : mov edx, dword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000146736 : mov edx, ebp ; add r9, qword ptr [rbp - 0x88] ; call rax
0x0000000000037b97 : mov edx, ebp ; call r15
0x0000000000115a0f : mov edx, ebp ; call rax
0x00000000000ad462 : mov edx, ebp ; mov rdi, rbp ; call rbx
0x000000000003864c : mov edx, ebp ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x00000000000213e3 : mov edx, ebp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000008b199 : mov edx, ebp ; mov rsi, r12 ; call rax
0x0000000000037617 : mov edx, ebp ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000037641 : mov edx, ebp ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x0000000000131b93 : mov edx, ebp ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000008ac77 : mov edx, ebp ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000003765c : mov edx, ebp ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x0000000000115f9d : mov edx, ebx ; call rax
0x0000000000131a86 : mov edx, ebx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x0000000000038044 : mov edx, ebx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x000000000008a446 : mov edx, edi ; mov rdi, r8 ; call rax
0x000000000011f6bf : mov edx, edi ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000013d245 : mov edx, edi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x0000000000115eb0 : mov edx, esi ; call rax
0x00000000000ad722 : mov edx, esi ; mov rdi, rbp ; call rbx
0x0000000000115f0e : mov edx, esp ; call rax
0x00000000000ad5e7 : mov edx, esp ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad31e : mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x0000000000089f26 : mov edx, esp ; mov rdi, r15 ; call rax
0x0000000000194224 : mov esi, 0x2efffc93 ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000145d15 : mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x0000000000193b2c : mov esi, 0x64fffc76 ; jbe 0x193b36 ; call rsp
0x0000000000104b83 : mov esi, 1 ; call rbx
0x0000000000104d70 : mov esi, 1 ; mov rdi, r12 ; call rbx
0x0000000000104c3c : mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104bb4 : mov esi, 1 ; mov rdi, r14 ; call rbx
0x0000000000104ffa : mov esi, 1 ; mov rdi, rbp ; call rbx
0x000000000006da73 : mov esi, 1 ; mov rdi, rbx ; call r8
0x000000000006d76c : mov esi, 1 ; mov rdi, rbx ; call rax
0x0000000000104fee : mov esi, 2 ; mov rdi, r12 ; call rbx
0x0000000000104d61 : mov esi, 2 ; mov rdi, r13 ; call rbx
0x0000000000104c2d : mov esi, 2 ; mov rdi, r14 ; call rbx
0x0000000000104ba5 : mov esi, 2 ; mov rdi, r15 ; call rbx
0x000000000010556c : mov esi, 3 ; mov rdi, r12 ; call rbx
0x00000000001055cb : mov esi, 3 ; mov rdi, r13 ; call rbx
0x000000000010564b : mov esi, 3 ; mov rdi, r14 ; call rbx
0x000000000010574b : mov esi, 3 ; mov rdi, r15 ; call rbx
0x000000000003a236 : mov esi, dword ptr [rax + 0x20] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000001046a9 : mov esi, dword ptr [rax] ; mov rdi, qword ptr [rbp - 0x40] ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x000000000010431c : mov esi, dword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000391f6 : mov esi, dword ptr [rdi] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000645d7 : mov esi, dword ptr [rip + 0x35c993] ; call rax
0x000000000005c93f : mov esi, dword ptr [rip + 0x36462b] ; call rax
0x000000000005c323 : mov esi, dword ptr [rip + 0x364c47] ; call rax
0x000000000005969f : mov esi, dword ptr [rip + 0x3678cb] ; call rax
0x00000000000509fb : mov esi, dword ptr [rip + 0x37056f] ; call rax
0x000000000004db1f : mov esi, dword ptr [rip + 0x37344b] ; call rax
0x000000000003864f : mov esi, dword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x000000000012e718 : mov esi, dword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x00000000000213e6 : mov esi, dword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000ad45d : mov esi, dword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71d : mov esi, dword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000023a1f : mov esi, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238ba : mov esi, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000877f1 : mov esi, dword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x000000000012fbd8 : mov esi, dword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013846b : mov esi, dword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000241b2 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e3 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc1a0 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df3 : mov esi, dword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000023f7d : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3f : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534c : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667b : mov esi, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000086e01 : mov esi, dword ptr [rsp + 0x48] ; call rax
0x0000000000027db6 : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdd : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583c : mov esi, dword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x000000000013500d : mov esi, dword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000110901 : mov esi, dword ptr [rsp + 8] ; call rax
0x00000000000203df : mov esi, dword ptr [rsp + 8] ; mov edi, dword ptr [rsp + 0x14] ; mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000001226d9 : mov esi, dword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000acd8c : mov esi, ebp ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000acc56 : mov esi, ebp ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000003926f : mov esi, ebp ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000038047 : mov esi, ebp ; mov rdi, r12 ; call r15
0x000000000008b041 : mov esi, ebp ; mov rdi, r12 ; call rax
0x0000000000037b91 : mov esi, ebp ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x000000000013ddae : mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd62 : mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000008a193 : mov esi, ebp ; mov rdi, rbx ; call rax
0x000000000003765f : mov esi, ebx ; mov rdi, r12 ; call r15
0x000000000013d14b : mov esi, ebx ; mov rdi, r15 ; call r14
0x0000000000089ae7 : mov esi, ebx ; mov rdi, rax ; call rcx
0x000000000013e86e : mov esi, ebx ; mov rdi, rbp ; call rcx
0x0000000000057222 : mov esi, edi ; mov dword ptr [rbp - 0x510], r11d ; mov rdi, qword ptr [rbp - 0x4a0] ; call rax
0x00000000000393fd : mov esi, edi ; mov rdi, r12 ; call r14
0x000000000004b85c : mov esi, edi ; mov rdi, r14 ; call rax
0x000000000012ccc1 : mov esi, edi ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x00000000000c7c33 : mov esi, edi ; xor edi, edi ; call rax
0x0000000000114eb8 : mov esi, edx ; call rax
0x0000000000089d25 : mov esi, esi ; call rax
0x000000000008ac7a : mov esi, esi ; mov rdi, r13 ; call rax
0x000000000013e998 : mov esi, esi ; mov rdi, rbp ; call r12
0x000000000008b19c : mov esi, esp ; call rax
0x000000000003761a : mov esi, esp ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000037644 : mov esi, esp ; mov rdi, rbp ; call r15
0x000000000008847e : mov esi, esp ; mov rdi, rbp ; call rax
0x000000000012cdd3 : mov esi, esp ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x000000000019804c : mov esp, 0x240001ca ; clc ; call rsp
0x0000000000193c64 : mov esp, 0x2cfffc6d ; insd dword ptr [rdi], dx ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x000000000019637c : mov esp, 0x4000120 ; cwde ; int1 ; call rsp
0x0000000000195fcc : mov esp, 0x44000104 ; fsubr st(7) ; call rsp
0x0000000000195204 : mov esp, 0x540000a7 ; jg 0x1951ff ; call rsp
0x000000000019630c : mov esp, 0x5400011d ; mov dh, cl ; call rsp
0x0000000000196a4c : mov esp, 0x5400014e ; loope 0x196a4d ; call rsp
0x00000000001985fc : mov esp, 0x540001f1 ; and ecx, edi ; call rsp
0x0000000000194ee4 : mov esp, 0x64000095 ; cmp ebp, ebx ; call rsp
0x0000000000196664 : mov esp, 0x64000134 ; call rsp
0x00000000001967a4 : mov esp, 0x6400013d ; pop rax ; call rsp
0x0000000000197ac4 : mov esp, 0x740001aa ; movsxd rsi, edi ; call rsp
0x0000000000195984 : mov esp, 0x840000dc ; mov gs, esi ; call rsp
0x0000000000197e8c : mov esp, 0x940001c2 ; and al, 0xf8 ; call rsp
0x000000000019491c : mov esp, 0xa4000076 ; or ch, dl ; call rsp
0x0000000000196404 : mov esp, 0xb4000124 ; int1 ; call rsp
0x0000000000198e54 : mov esp, 0xc4000231 ; insd dword ptr [rdi], dx ; cli ; call rsp
0x0000000000198094 : mov esp, cs ; add dword ptr [rax], eax ; in al, 0x47 ; clc ; call rsp
0x0000000000195989 : mov gs, esi ; call rsp
0x000000000008a188 : mov qword ptr [r12], rax ; je 0x8a270 ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000008aeaa : mov qword ptr [r12], rax ; je 0x8afa0 ; mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000017209b : mov qword ptr [r12], rbx ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b7 ; call rdx
0x0000000000089f1b : mov qword ptr [r13], rax ; je 0x8a020 ; mov rdx, r12 ; mov rdi, r15 ; call rax
0x000000000008b036 : mov qword ptr [r13], rax ; je 0x8b0d8 ; mov rsi, rbp ; mov rdi, r12 ; call rax
0x000000000002af7d : mov qword ptr [r14], rcx ; mov rcx, qword ptr [rax + r15*8] ; test rcx, rcx ; je 0x2af97 ; call rcx
0x000000000002adf3 : mov qword ptr [rbp + r12*8], r15 ; mov rax, qword ptr [rax + r12*8] ; test rax, rax ; je 0x2ae11 ; call rax
0x0000000000116101 : mov qword ptr [rbp - 0x70], rax ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x0000000000115ea4 : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161fb : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000011603a : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f03 : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x000000000011628a : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115ac3 : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115f92 : mov qword ptr [rbp - 0x70], rdx ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115a0a : mov qword ptr [rbp - 0x70], rdx ; mov rdx, r13 ; call rax
0x000000000008a43b : mov qword ptr [rbp], rax ; je 0x8a620 ; mov rdx, r15 ; mov rdi, r8 ; call rax
0x000000000003a879 : mov qword ptr [rbp], rdx ; call rax
0x000000000008b4ec : mov qword ptr [rbx + 0x40], r8 ; movsxd rdi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x000000000008b5a6 : mov qword ptr [rbx + 0x48], r9 ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x0000000000089d1b : mov qword ptr [rbx], rax ; je 0x89e2c ; mov rsi, r14 ; call rax
0x000000000012ca33 : mov qword ptr [rbx], rax ; mov r8, rbp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000012caa3 : mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000008b4f6 : mov qword ptr [rbx], rdi ; call rcx
0x000000000008b5aa : mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x00000000000843b7 : mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000842c3 : mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000843b2 : mov qword ptr [rsp + 0x18], rax ; mov qword ptr [rsp + 0x10], r9 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000842be : mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000bc651 : mov qword ptr [rsp + 0xa8], r12 ; call r15
0x0000000000104235 : mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000843bc : mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000757be : mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000012ccc6 : mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x000000000007a352 : mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000003a878 : mov qword ptr fs:[rbp], rdx ; call rax
0x00000000001046af : mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000cd386 : mov r15, rax ; mov rax, qword ptr [r12 + 8] ; test rax, rax ; je 0xcd3a2 ; call rax
0x000000000010426d : mov r15b, 0xf1 ; dec dword ptr [rax - 0x75] ; jge 0x10427d ; call rbx
0x000000000013a4b5 : mov r8, r15 ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012ca36 : mov r8, rbp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000ad457 : mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad717 : mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000027a84 : mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000025346 : mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000024d62 : mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000028189 : mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000023a19 : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x0000000000023f77 : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1a : mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025cd7 : mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000243dd : mov r9, qword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000213ea : mov r9, r14 ; call rbx
0x0000000000146732 : mov r9d, dword ptr [rdx] ; mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x00000000000cd389 : mov rax, qword ptr [r12 + 8] ; test rax, rax ; je 0xcd39f ; call rax
0x00000000000204a6 : mov rax, qword ptr [r13 + 0x18] ; test rax, rax ; je 0x204c0 ; mov rdi, rbp ; call rax
0x0000000000137f70 : mov rax, qword ptr [r14 + 0x70] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x137f92 ; mov rdi, r12 ; call rax
0x00000000001160fd : mov rax, qword ptr [r14 - 0x10] ; mov qword ptr [rbp - 0x70], rax ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x000000000012df6c : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12df86 ; mov rdi, rsp ; call rax
0x000000000012e057 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e071 ; mov rdi, rsp ; call rax
0x000000000012e912 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e92c ; mov rdi, rbp ; call rax
0x000000000012f975 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12f98f ; mov rdi, rbx ; call rax
0x000000000012fbf0 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12faa0 ; mov rdi, rbx ; call rax
0x000000000012fce7 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12fd01 ; mov rdi, rbx ; call rax
0x0000000000134aeb : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x134b0d ; lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x00000000001354e3 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1354fd ; mov rdi, r12 ; call rax
0x00000000001356b4 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1356d0 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000136a69 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136998 ; mov rdi, rbx ; call rax
0x00000000001369a0 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369ba ; mov rdi, r12 ; call rax
0x000000000013699f : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1369bb ; mov rdi, r12 ; call rax
0x0000000000136b91 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136bab ; mov rdi, rbp ; call rax
0x0000000000136db1 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x136dcb ; mov rdi, rbp ; call rax
0x0000000000137888 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x1378a4 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137f74 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x137f8e ; mov rdi, r12 ; call rax
0x00000000001382e8 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x138304 ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x000000000013b874 : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x13b890 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf8d : mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x13bfa9 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000002adf8 : mov rax, qword ptr [rax + r12*8] ; test rax, rax ; je 0x2ae0c ; call rax
0x0000000000106908 : mov rax, qword ptr [rax] ; test rax, rax ; je 0x1069b4 ; call rax
0x0000000000106a7f : mov rax, qword ptr [rax] ; test rax, rax ; je 0x106b8c ; call rax
0x0000000000114eab : mov rax, qword ptr [rax] ; test rax, rax ; je 0x114edf ; mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x0000000000080a39 : mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a4b ; call rax
0x0000000000087dd5 : mov rax, qword ptr [rax] ; test rax, rax ; je 0x87de7 ; call rax
0x00000000001046b2 : mov rax, qword ptr [rbp - 0x48] ; call rax
0x00000000000ee9f4 : mov rax, qword ptr [rbp - 0xd8] ; call rax
0x000000000012e90e : mov rax, qword ptr [rbx + 0x20] ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x12e930 ; mov rdi, rbp ; call rax
0x00000000000cd4d8 : mov rax, qword ptr [rbx] ; mov rdx, qword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f5 ; call rdx
0x00000000000cd56c : mov rax, qword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd583 ; call rax
0x000000000002c351 : mov rax, qword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2c36b ; call rax
0x00000000001721b7 : mov rax, qword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d0 ; call rax
0x0000000000087dce : mov rax, qword ptr [rip + 0x33909b] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87dee ; call rax
0x0000000000080a32 : mov rax, qword ptr [rip + 0x340477] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a52 ; call rax
0x0000000000145d1d : mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000203ea : mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000025845 : mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000039276 : mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x000000000010422d : mov rax, qword ptr [rsp + 8] ; mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x0000000000131a80 : mov rax, qword ptr [rsp + 8] ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000c96bc : mov rax, rbx ; call rax
0x0000000000037b8a : mov rbp, qword ptr [rsp + 0x50] ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x00000000000c912c : mov rbp, r13 ; mov rdi, rbx ; call r12
0x0000000000104ace : mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x0000000000037601 : mov rbx, rax ; lea r12, qword ptr [rsi + rbx] ; mov rdi, r12 ; call r15
0x000000000006efde : mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000002c355 : mov rbx, rdi ; test rax, rax ; je 0x2c367 ; call rax
0x000000000002af80 : mov rcx, qword ptr [rax + r15*8] ; test rcx, rcx ; je 0x2af94 ; call rcx
0x0000000000021dd3 : mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000138472 : mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000135014 : mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134dfa : mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000131b8d : mov rcx, qword ptr [rsp + 8] ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012fbe2 : mov rcx, qword ptr [rsp] ; call rcx
0x00000000000213dd : mov rcx, r12 ; push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000012cdd8 : mov rcx, r13 ; call r15
0x00000000000bb41b : mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x0000000000076b83 : mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000ad5e3 : mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c3 : mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x00000000000768cc : mov rcx, r14 ; lea rsi, qword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012ca39 : mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000013a4b8 : mov rcx, r14 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000ad31a : mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012ccca : mov rcx, rax ; call r12
0x00000000000391f8 : mov rdi, qword ptr [r12] ; call r14
0x000000000010427f : mov rdi, qword ptr [r12] ; call rbx
0x00000000000acc58 : mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x0000000000103e89 : mov rdi, qword ptr [r13] ; call rbx
0x0000000000103df6 : mov rdi, qword ptr [r14] ; call rbx
0x0000000000103e37 : mov rdi, qword ptr [r15] ; call rbx
0x00000000000bb423 : mov rdi, qword ptr [rax] ; call r14
0x0000000000104232 : mov rdi, qword ptr [rax] ; mov qword ptr [rsp + 8], rax ; call rbx
0x00000000000d0250 : mov rdi, qword ptr [rbp - 0x308] ; call r12
0x00000000001046ab : mov rdi, qword ptr [rbp - 0x40] ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x000000000005722b : mov rdi, qword ptr [rbp - 0x4a0] ; call rax
0x0000000000103fbe : mov rdi, qword ptr [rbp] ; call rbx
0x00000000000cd569 : mov rdi, qword ptr [rbx] ; mov rax, qword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd586 ; call rax
0x000000000006efe5 : mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000114eb3 : mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x000000000010431e : mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000003761c : mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000023a23 : mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238be : mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000c984c : mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000039271 : mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x00000000000241b6 : mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e7 : mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x0000000000023f81 : mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c43 : mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000025350 : mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667f : mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000027dba : mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025ce1 : mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000025840 : mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x00000000000393ff : mov rdi, r12 ; call r14
0x0000000000037608 : mov rdi, r12 ; call r15
0x00000000000877f5 : mov rdi, r12 ; call rax
0x00000000000768d8 : mov rdi, r12 ; call rbx
0x0000000000021dd0 : mov rdi, r12 ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x0000000000135011 : mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000134df7 : mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x00000000001226dd : mov rdi, r13 ; call r12
0x000000000002f5fd : mov rdi, r13 ; call rax
0x0000000000104b1c : mov rdi, r13 ; call rbx
0x000000000008b195 : mov rdi, r13 ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x000000000002f2a7 : mov rdi, r13 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000004b85e : mov rdi, r14 ; call rax
0x0000000000104b40 : mov rdi, r14 ; call rbx
0x0000000000037b93 : mov rdi, r14 ; mov rdx, rbp ; call r15
0x000000000013d14d : mov rdi, r15 ; call r14
0x00000000000757c3 : mov rdi, r15 ; call rax
0x0000000000104b60 : mov rdi, r15 ; call rbx
0x0000000000104b7b : mov rdi, r15 ; mov edx, 4 ; mov esi, 1 ; call rbx
0x0000000000076b86 : mov rdi, r15 ; xor r8d, r8d ; call rbx
0x000000000008a448 : mov rdi, r8 ; call rax
0x000000000008b5ad : mov rdi, r9 ; call rcx
0x00000000000cd651 : mov rdi, r9 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000089ae9 : mov rdi, rax ; call rcx
0x00000000000ee9f1 : mov rdi, rax ; mov rax, qword ptr [rbp - 0xd8] ; call rax
0x0000000000170dab : mov rdi, rbp ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x000000000013e99a : mov rdi, rbp ; call r12
0x000000000012e71c : mov rdi, rbp ; call r14
0x0000000000037646 : mov rdi, rbp ; call r15
0x00000000000204af : mov rdi, rbp ; call rax
0x00000000000ad325 : mov rdi, rbp ; call rbx
0x000000000013e870 : mov rdi, rbp ; call rcx
0x00000000001304f4 : mov rdi, rbp ; call rdx
0x000000000013ddb0 : mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd64 : mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013846f : mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000299b6 : mov rdi, rbx ; call r12
0x0000000000021766 : mov rdi, rbx ; call r14
0x000000000006da78 : mov rdi, rbx ; call r8
0x000000000006d771 : mov rdi, rbx ; call rax
0x000000000012ccc3 : mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x0000000000145d1a : mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000012fbdf : mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000012cdd5 : mov rdi, rbx ; mov rcx, r13 ; call r15
0x000000000014719e : mov rdi, rdx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000012df75 : mov rdi, rsp ; call rax
0x000000000013d250 : mov rdi, rsp ; call rdx
0x00000000000757b7 : mov rdx, qword ptr [r15 + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000012ca30 : mov rdx, qword ptr [r15] ; mov qword ptr [rbx], rax ; mov r8, rbp ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x000000000012caa0 : mov rdx, qword ptr [r15] ; mov qword ptr [rbx], rax ; xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000cd4db : mov rdx, qword ptr [rax + 0x18] ; test rdx, rdx ; je 0xcd4f2 ; call rdx
0x000000000017209f : mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b3 ; call rdx
0x00000000000203e7 : mov rdx, qword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000001164eb : mov rdx, qword ptr [rbp - 0x158] ; call rax
0x000000000007a34b : mov rdx, qword ptr [rbx + 0x40] ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x00000000001304eb : mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130505 ; mov rdi, rbp ; call rdx
0x00000000001109ff : mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x00000000001108fb : mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d3 : mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000c9847 : mov rdx, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024fae : mov rdx, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x00000000000238b4 : mov rdx, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db0 : mov rdx, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ac : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bcf : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c39 : mov rdx, qword ptr [rsp + 0x48] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087160 : mov rdx, qword ptr [rsp + 0x68] ; call rax
0x0000000000088478 : mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000391f0 : mov rdx, qword ptr [rsp + 8] ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f7 : mov rdx, qword ptr [rsp + 8] ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000115f0d : mov rdx, r12 ; call rax
0x00000000000ad5e6 : mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad31d : mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x0000000000089f25 : mov rdx, r12 ; mov rdi, r15 ; call rax
0x0000000000146735 : mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x0000000000115a0e : mov rdx, r13 ; call rax
0x00000000000ad461 : mov rdx, r13 ; mov rdi, rbp ; call rbx
0x000000000003864b : mov rdx, r13 ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x0000000000037616 : mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000037640 : mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x0000000000131b92 : mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000003765b : mov rdx, r13 ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x0000000000115eaf : mov rdx, r14 ; call rax
0x00000000000ad721 : mov rdx, r14 ; mov rdi, rbp ; call rbx
0x000000000008a445 : mov rdx, r15 ; mov rdi, r8 ; call rax
0x000000000011f6be : mov rdx, r15 ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x0000000000037b96 : mov rdx, rbp ; call r15
0x00000000000213e2 : mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000008b198 : mov rdx, rbp ; mov rsi, r12 ; call rax
0x000000000008ac76 : mov rdx, rbp ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x0000000000115f9c : mov rdx, rbx ; call rax
0x0000000000131a85 : mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x0000000000038043 : mov rdx, rbx ; mov rsi, r13 ; mov rdi, r12 ; call r15
0x000000000013d244 : mov rdx, rdi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x00000000000391f5 : mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000001046a8 : mov rsi, qword ptr [rax] ; mov rdi, qword ptr [rbp - 0x40] ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x000000000010431b : mov rsi, qword ptr [rbx] ; mov rdi, qword ptr [rsp + 0x10] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x00000000000645d6 : mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c93e : mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c322 : mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x000000000005969e : mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509fa : mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db1e : mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x000000000003864e : mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call r15
0x000000000012e717 : mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x00000000000213e5 : mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x00000000000ad45c : mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
0x00000000000ad71c : mov rsi, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rbp ; call rbx
0x0000000000023a1e : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r14
0x00000000000238b9 : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x00000000000877f0 : mov rsi, qword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x000000000012fbd7 : mov rsi, qword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp] ; call rcx
0x000000000013846a : mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000241b1 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x00000000000243e2 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x00000000000bc19f : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000134df2 : mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x0000000000023f7c : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3e : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x000000000002534b : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x000000000002667a : mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000086e00 : mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000027db5 : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x0000000000025cdc : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002583b : mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x000000000013500c : mov rsi, qword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x0000000000110900 : mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d8 : mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x000000000008b19b : mov rsi, r12 ; call rax
0x0000000000037619 : mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x0000000000037643 : mov rsi, r12 ; mov rdi, rbp ; call r15
0x000000000008847d : mov rsi, r12 ; mov rdi, rbp ; call rax
0x000000000012cdd2 : mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000000acd8b : mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x0000000000038046 : mov rsi, r13 ; mov rdi, r12 ; call r15
0x0000000000037b90 : mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x000000000013ddad : mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd61 : mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000089d24 : mov rsi, r14 ; call rax
0x000000000008ac79 : mov rsi, r14 ; mov rdi, r13 ; call rax
0x000000000013e997 : mov rsi, r14 ; mov rdi, rbp ; call r12
0x00000000000393fc : mov rsi, r15 ; mov rdi, r12 ; call r14
0x000000000004b85b : mov rsi, r15 ; mov rdi, r14 ; call rax
0x000000000012ccc0 : mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x00000000000acc55 : mov rsi, rbp ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x000000000008b040 : mov rsi, rbp ; mov rdi, r12 ; call rax
0x000000000008a192 : mov rsi, rbp ; mov rdi, rbx ; call rax
0x000000000003765e : mov rsi, rbx ; mov rdi, r12 ; call r15
0x000000000013d14a : mov rsi, rbx ; mov rdi, r15 ; call r14
0x0000000000089ae6 : mov rsi, rbx ; mov rdi, rax ; call rcx
0x000000000013e86d : mov rsi, rbx ; mov rdi, rbp ; call rcx
0x00000000000c7c32 : mov rsi, rdi ; xor edi, edi ; call rax
0x0000000000114eb7 : mov rsi, rdx ; call rax
0x00000000001ad670 : mov word ptr [rax], es ; add byte ptr [rax], al ; sbb al, 0x3d ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x00000000001b35e4 : mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x0000000000196ca4 : mov word ptr [rcx + rax], fs ; xor al, 0x68 ; cmc ; call rsp
0x0000000000196b04 : mov word ptr [rcx + rax], ss ; push rdx ; hlt ; call rsp
0x00000000001938a8 : movabs al, byte ptr [0x30fffc4fa0fffc4d] ; cld ; push rax ; cld ; call rax
0x0000000000193264 : movabs al, byte ptr [0x90fffb5470fffb53] ; sti ; call rax
0x0000000000021dca : movabs al, byte ptr [0xe7894c001243b0e8] ; mov rcx, qword ptr [rbp - 0x60] ; call rcx
0x00000000001938ac : movabs al, byte ptr [0xf0fffc4230fffc4f] ; cld ; call rax
0x0000000000087157 : movabs byte ptr [0x90fffffe8ce90000], al ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x0000000000193ef5 : movabs dword ptr [0xa246fffca2b6fffc], eax ; cld ; call rsi
0x0000000000199099 : movabs dword ptr [0xa334000241bcfffa], eax ; cli ; call rsp
0x0000000000193ef4 : movabs dword ptr es:[0xa246fffca2b6fffc], eax ; cld ; call rsi
0x00000000001940c5 : movabs eax, dword ptr [0xa040fffca0b0fffc] ; cld ; call rax
0x00000000001940c1 : movabs eax, dword ptr [0xa0b0fffca120fffc] ; cld ; inc dword ptr [rax - 0x60] ; cld ; call rax
0x0000000000194da0 : movsb byte ptr [rdi], byte ptr [rsi] ; ja 0x194d90 ; call rsp
0x0000000000194b3c : movsb byte ptr [rdi], byte ptr [rsi] ; jg 0x194b46 ; add ah, ah ; sub ebp, edx ; call rsp
0x0000000000197114 : movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x19711f ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001966d8 : movsb byte ptr [rdi], byte ptr [rsi] ; ljmp ptr [rdi + rsi + 0x42240001] ; call rsp
0x0000000000198948 : movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000194920 : movsb byte ptr [rdi], byte ptr [rsi] ; or ch, dl ; call rsp
0x000000000019f8fc : movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x0000000000196a8c : movsb byte ptr [rdi], byte ptr [rsi] ; push rax ; add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x00000000001993c4 : movsb byte ptr [rdi], byte ptr [rsi] ; push rsp ; add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x0000000000193541 : movsb byte ptr [rdi], byte ptr [rsi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000106a7c : movsb byte ptr [rdi], byte ptr [rsi] ; sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x106b8f ; call rax
0x0000000000198680 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a0 : movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xfb ; call rsp
0x00000000001b3f2d : movsd dword ptr [rdi], dword ptr [rsi] ; add dword ptr [rax], eax ; shr cl, 0xfb ; call rsi
0x000000000012b793 : movsd dword ptr [rdi], dword ptr [rsi] ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x0000000000187e30 : movsxd rbx, edi ; cmc ; call rsp
0x000000000008b4f1 : movsxd rdi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x0000000000197ac9 : movsxd rsi, edi ; call rsp
0x000000000008b5a1 : movsxd rsi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx + 0x48], r9 ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x000000000013ebf1 : movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x0000000000021460 : movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x0000000000076a8e : nop ; add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov rdi, r12 ; call rbx
0x00000000000769ab : nop ; add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x18 ; mov rdi, r12 ; call rbx
0x00000000001a297d : nop ; add byte ptr [rax], al ; ror dl, 1 ; in eax, dx ; call rdi
0x00000000001862a8 : nop ; and eax, 0x25b0fff2 ; call rax
0x0000000000196b89 : nop ; hlt ; call rsp
0x00000000001a70d0 : nop ; int1 ; call rdx
0x00000000001932d0 : nop ; je 0x1932d5 ; push qword ptr [rax] ; jbe 0x1932d9 ; call rax
0x0000000000116104 : nop ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x0000000000115ea7 : nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161fe : nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000011603d : nop ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f06 : nop ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x00000000001164e4 : nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, qword ptr [rbp - 0x158] ; call rax
0x000000000011628d : nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115ac6 : nop ; mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115f95 : nop ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000008715f : nop ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x0000000000115a0d : nop ; mov rdx, r13 ; call rax
0x000000000003763f : nop ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x0000000000037b8f : nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x00000000001940c0 : nop ; movabs eax, dword ptr [0xa0b0fffca120fffc] ; cld ; inc dword ptr [rax - 0x60] ; cld ; call rax
0x000000000019f900 : nop ; sbb ebp, ebp ; call rbx
0x00000000001933b9 : nop ; std ; call rax
0x000000000019326c : nop ; sti ; call rax
0x0000000000194324 : nop ; xchg eax, ebx ; cld ; inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000087dd2 : nop ; xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87dea ; call rax
0x0000000000146638 : nop dword ptr [rax + rax] ; call rax
0x0000000000086df8 : nop dword ptr [rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000037655 : nop dword ptr [rax] ; add rbx, r14 ; mov rdx, r13 ; mov rsi, rbx ; mov rdi, r12 ; call r15
0x00000000000877ec : nop dword ptr [rax] ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, r12 ; call rax
0x0000000000086df7 : nop dword ptr cs:[rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x0000000000146637 : nop word ptr [rax + rax] ; call rax
0x0000000000086df6 : nop word ptr cs:[rax + rax] ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x000000000012fbe4 : or al, 0x24 ; call rcx
0x000000000007a354 : or al, 0x24 ; mov rdi, rbx ; call rax
0x0000000000187ce4 : or al, 0x2f ; cmc ; push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x00000000001850e9 : or al, 0xee ; call rbx
0x00000000001850dd : or al, 0xee ; push rbp ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x00000000001a8864 : or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x0000000000186041 : or al, 0xf2 ; call rax
0x000000000002af82 : or al, 0xf8 ; test rcx, rcx ; je 0x2af92 ; call rcx
0x0000000000104acb : or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000008ac72 : or al, byte ptr [rcx] ; add byte ptr [rax], al ; mov rdx, rbp ; mov rsi, r14 ; mov rdi, r13 ; call rax
0x00000000001988d5 : or al, byte ptr [rdx] ; add ah, dh ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x00000000000ad01b : or al, ch ; call rbx
0x000000000012fe8b : or al, ch ; call rsp
0x0000000000104231 : or byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x77], cl ; and al, 8 ; call rbx
0x000000000006efe4 : or byte ptr [rax - 0x75], cl ; mov edi, 0xe0 ; call rax
0x00000000001304ea : or byte ptr [rax - 0x75], cl ; push rdx ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], cl ; mov edi, ebp ; call rdx
0x0000000000115f9b : or byte ptr [rax - 0x77], 0xda ; call rax
0x0000000000131a84 : or byte ptr [rax - 0x77], cl ; fimul dword ptr [rcx + rcx*4 - 0x1a] ; mov rdi, rbp ; call rax
0x0000000000103ecf : or byte ptr [rax - 0x77], cl ; fsubp st(0) ; enter -2, -1 ; mov rdi, qword ptr [r15] ; call rbx
0x00000000001059d8 : or byte ptr [rax - 0x77], cl ; fsubp st(0) ; mov edi, 0x49ffffe3 ; mov edi, dword ptr [rdi] ; call rbx
0x0000000000105dd7 : or byte ptr [rax - 0x77], cl ; fsubp st(0) ; rcr bh, 0xff ; dec dword ptr [rcx - 0x75] ; call rbx
0x00000000001a8355 : or byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; add al, 0xea ; add byte ptr [rax], al ; adc byte ptr [rcx], ah ; call rsi
0x00000000001b2f8d : or byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; cmp al, 0x96 ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001a885d : or byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; or al, 0xef ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x00000000001af7d5 : or byte ptr [rax], al ; add byte ptr [rax + rax], bh ; add byte ptr [rax], al ; test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7e6 ; call rsi
0x00000000001a13cd : or byte ptr [rax], al ; add byte ptr [rax + rax], ch ; add byte ptr [rax], al ; jl 0x1a145e ; add byte ptr [rax], al ; clc ; jns 0x1a13d6 ; call rcx
0x00000000001b7ca5 : or byte ptr [rax], al ; add byte ptr [rax + rax], dl ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000104ac6 : or byte ptr [rax], al ; je 0x1055af ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000000203e2 : or byte ptr [rbx + 0x4814247c], cl ; mov edx, dword ptr [rax] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000193630 : or byte ptr [rbx], bl ; cld ; call rax
0x00000000001226dc : or byte ptr [rcx + rcx*4 - 0x11], cl ; call r12
0x0000000000131b91 : or byte ptr [rcx + rcx*4 - 0x16], cl ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000757c2 : or byte ptr [rcx + rcx*4 - 1], cl ; call rax
0x00000000000393fb : or byte ptr [rcx + rcx*4 - 2], cl ; mov rdi, r12 ; call r14
0x000000000012cdcf : or byte ptr [rcx], dh ; ror byte ptr [rcx + rcx*4 - 0x1a], cl ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000001b35dd : or byte ptr [rdx + 0xb], al ; adc al, 0 ; add byte ptr [rax], al ; mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x0000000000103fac : or byte ptr [rdx - 0x74b6000f], bh ; jge 0x103fbc ; call rbx
0x000000000006f02f : or byte ptr [rsi + rbx + 0x48], dh ; lea esi, dword ptr [rsp + 8] ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x0000000000193808 : or byte ptr [rsi - 4], 0xff ; adc byte ptr [rax - 4], 0xff ; adc byte ptr [rbx - 4], al ; call rax
0x0000000000193804 : or byte ptr [rsp + rdi*8 - 1], 0x80 ; cld ; inc dword ptr [rax + 0x10fffc50] ; cld ; call rax
0x0000000000194921 : or ch, dl ; call rsp
0x0000000000146734 : or cl, byte ptr [rcx + rcx*4 - 0x16] ; add r9, qword ptr [rbp - 0x88] ; call rax
0x00000000001a58a1 : or dh, al ; call rsp
0x0000000000122630 : or dword ptr [rax - 0x73], ecx ; cmp eax, 0x2a3068 ; call rax
0x0000000000134af3 : or dword ptr [rax - 0x73], ecx ; mov ebx, 0xc8 ; call rax
0x0000000000104bd3 : or dword ptr [rip - 0x9cf0000], ecx ; mov rdi, r15 ; call rbx
0x0000000000199399 : or eax, 0x5384fffb ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000186085 : or eax, 0xdc0fff2 ; call rax
0x0000000000104b5b : or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x00000000001a9294 : or eax, dword ptr [rax] ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x00000000001850e1 : or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x00000000001b35de : or edx, dword ptr [rax + r8] ; add byte ptr [rax], al ; mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x00000000001b35df : or edx, dword ptr [rax + rax] ; add byte ptr [rax], al ; mov word ptr [rcx + rax - 0x8cf4800], ds ; call rcx
0x00000000001a9293 : or r8d, dword ptr [rax] ; add byte ptr [rax], al ; adc al, 0 ; add byte ptr [rax], al ; stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x0000000000105e03 : out -0x18, eax ; scasd eax, dword ptr [rdi] ; wait ; int1 ; dec dword ptr [rax - 0x75] ; jge 0x105e17 ; call rbx
0x0000000000104ff5 : out -1, eax ; sal dword ptr [rcx], cl ; sar byte ptr [rsi + 1], cl ; mov rdi, rbp ; call rbx
0x0000000000172098 : out 0x24, eax ; add byte ptr [rcx - 0x77], cl ; sbb al, 0x24 ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720ba ; call rdx
0x0000000000050965 : out 0x31, eax ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003760a : out 0x41, eax ; call rdi
0x0000000000039401 : out 0x41, eax ; call rsi
0x000000000003761b : out 0x48, al ; mov edi, dword ptr [rsp + 0x18] ; call r15
0x0000000000037645 : out 0x48, al ; mov edi, ebp ; call r15
0x000000000008847f : out 0x48, al ; mov edi, ebp ; call rax
0x000000000012cdd4 : out 0x48, al ; mov edi, ebx ; mov rcx, r13 ; call r15
0x0000000000021dd2 : out 0x48, eax ; mov ecx, dword ptr [rbp - 0x60] ; call rcx
0x0000000000135013 : out 0x48, eax ; mov ecx, dword ptr [rsp + 0x28] ; call rcx
0x0000000000134df9 : out 0x48, eax ; mov ecx, dword ptr [rsp + 0x30] ; call rcx
0x000000000013ddac : out 0x4c, eax ; mov esi, ebp ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x0000000000104b16 : out 0xa, al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000187df4 : out 0xb6, al ; cmc ; lcall ptr [rdx - 0x6b000a47] ; mov bh, 0xf5 ; call rsp
0x00000000001850ea : out dx, al ; call rbx
0x00000000001a464a : out dx, al ; call rcx
0x00000000001a3a1a : out dx, al ; call rsi
0x000000000019566a : out dx, al ; call rsp
0x00000000001850e2 : out dx, al ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x000000000019592a : out dx, al ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x000000000019584a : out dx, al ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x00000000000acd8d : out dx, al ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x0000000000195662 : out dx, al ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x00000000000acc57 : out dx, al ; mov rdi, qword ptr [r12] ; lea r9, qword ptr [rsp + 0x28] ; lea rcx, qword ptr [rax + 1] ; call rbx
0x0000000000039270 : out dx, al ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x30] ; lea r15, qword ptr [rbx + r14] ; call rax
0x0000000000038048 : out dx, al ; mov rdi, r12 ; call r15
0x000000000008b042 : out dx, al ; mov rdi, r12 ; call rax
0x0000000000037b92 : out dx, al ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x000000000013ddaf : out dx, al ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd63 : out dx, al ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000008a194 : out dx, al ; mov rdi, rbx ; call rax
0x000000000019572a : out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x000000000019589a : out dx, al ; push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x00000000001850de : out dx, al ; push rbp ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x00000000001a8865 : out dx, eax ; add byte ptr [rax], al ; sbb byte ptr [rcx], bh ; call rsi
0x0000000000170dad : out dx, eax ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x00000000001226df : out dx, eax ; call r12
0x000000000012e71e : out dx, eax ; call r14
0x0000000000037648 : out dx, eax ; call r15
0x00000000000204b1 : out dx, eax ; call rax
0x00000000000ad327 : out dx, eax ; call rbx
0x000000000013e872 : out dx, eax ; call rcx
0x00000000001304f6 : out dx, eax ; call rdx
0x0000000000195c6a : out dx, eax ; call rsp
0x0000000000195e3a : out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000195d82 : out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x000000000013ddb2 : out dx, eax ; mov edx, 0xffffffff ; xor eax, eax ; call r8
0x000000000013dd66 : out dx, eax ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x0000000000138471 : out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x000000000008b197 : out dx, eax ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x000000000013dd60 : out dx, eax ; mov rsi, r13 ; mov rdi, rbp ; mov edx, 0xffffffff ; xor eax, eax ; call rcx
0x000000000013ebef : out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x000000000002f2a9 : out dx, eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000019947d : pop rax ; add al, byte ptr [rax] ; and al, 0x1f ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x00000000001382f4 : pop rax ; call rax
0x00000000001967a9 : pop rax ; call rsp
0x0000000000198191 : pop rax ; clc ; call rsp
0x000000000002af7a : pop rax ; cmp dword ptr [rax], eax ; mov qword ptr [r14], rcx ; mov rcx, qword ptr [rax + r15*8] ; test rcx, rcx ; je 0x2af9a ; call rcx
0x0000000000106904 : pop rax ; cmpsb byte ptr [rsi], byte ptr [rdi] ; sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x1069b8 ; call rax
0x000000000010405c : pop rax ; mov ecx, 0x8b49fff1 ; call rbx
0x0000000000108d7b : pop rax ; pop rdi ; call rax
0x00000000001a47f8 : pop rax ; shr esi, 1 ; call rcx
0x0000000000187e24 : pop rbp ; fdivrp st(5) ; call rsp
0x0000000000186f04 : pop rbp ; loope 0x186f05 ; ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x0000000000196b7d : pop rcx ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000196b85 : pop rcx ; add dword ptr [rax], eax ; nop ; hlt ; call rsp
0x00000000001ad679 : pop rcx ; cmc ; call rdx
0x000000000019f8fd : pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x0000000000108d7c : pop rdi ; call rax
0x00000000001a74f1 : pop rdi ; int1 ; call rbx
0x0000000000105c55 : pop rdi ; popfq ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x0000000000198709 : pop rsi ; stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x00000000000842bb : pop rsp ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000001a92b4 : pop rsp ; stc ; add byte ptr [rax], al ; js 0x1a9253 ; call rbx
0x0000000000194069 : popfq ; cld ; call rsp
0x0000000000194065 : popfq ; cld ; inc dword ptr [rbp + rbx*4 - 4] ; call rsp
0x0000000000105c56 : popfq ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x00000000001860f9 : pslld mm7, mm7 ; ror byte ptr [rdi], 0xf2 ; call rax
0x0000000000076b7d : push 0 ; lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x00000000000ad19a : push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000213e0 : push 0 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; mov r9, r14 ; call rbx
0x000000000008847c : push 0x48e6894c ; mov edi, ebp ; call rax
0x00000000000ad107 : push 1 ; push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad195 : push 1 ; xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000000ad109 : push 1 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000193bcf : push qword ptr [rax + 0x40fffc79] ; jns 0x193bdb ; call rax
0x00000000001939b7 : push qword ptr [rax + 0x40fffc7c] ; jl 0x1939c3 ; call rax
0x0000000000187e4b : push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x0000000000187e47 : push qword ptr [rax - 0x32] ; cmc ; push qword ptr [rax - 0x32] ; cmc ; inc dword ptr [rbx - 0x20] ; cmc ; call rsp
0x000000000019432b : push qword ptr [rax - 0x6e] ; cld ; call rax
0x00000000001938af : push qword ptr [rax] ; cld ; push rax ; cld ; call rax
0x00000000001932d3 : push qword ptr [rax] ; jbe 0x1932d6 ; call rax
0x0000000000193257 : push qword ptr [rax] ; push rcx ; sti ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x0000000000193737 : push qword ptr [rax] ; sbb eax, 0x1f10fffc ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000194063 : push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x000000000019572b : push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x00000000001721b4 : push qword ptr [rbp + rdx + 0x48] ; mov eax, dword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d3 ; call rax
0x000000000019589b : push qword ptr [rbp + rdx*8 + 0x62640000] ; out dx, al ; call rsp
0x0000000000199393 : push qword ptr [rbx + rdx*2] ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x00000000001873bb : push qword ptr [rbx - 0x42000b83] ; jge 0x1873c3 ; inc edi ; jge 0x1873c7 ; call rcx
0x0000000000196713 : push qword ptr [rcx + rdi + 1] ; add byte ptr [rdx + rcx*2], al ; lcall ptr [rcx + rdi + 0x4a940001] ; call rsp
0x000000000019354b : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x000000000019362b : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193547 : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193627 : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193543 : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193623 : push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000135009 : push qword ptr [rcx] ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000005961b : push qword ptr [rcx] ; test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000187ce7 : push qword ptr [rdi - 0x14000ad1] ; cmc ; call rax
0x0000000000193aa3 : push qword ptr [rdx + 0x42fffc77] ; ja 0x193aaf ; call rdx
0x0000000000193f9b : push qword ptr [rdx + 0x42fffc9e] ; sahf ; cld ; call rdx
0x00000000001872e7 : push qword ptr [rdx + 2] ; hlt ; lcall ptr [rdx + rbp*8 + 0x1a2fff3] ; hlt ; call rbx
0x0000000000193eef : push qword ptr [rsi + 0x26fffc9c] ; movabs dword ptr [0xa246fffca2b6fffc], eax ; cld ; call rsi
0x00000000001939ff : push qword ptr [rsi + 0x46fffc7b] ; jnp 0x193a0b ; call rsi
0x0000000000194ecb : push qword ptr [rsp + rdx*4] ; add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x0000000000198683 : push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x000000000019932d : push rax ; add al, byte ptr [rax] ; je 0x199331 ; cli ; call rsp
0x0000000000196a8d : push rax ; add dword ptr [rax], eax ; hlt ; and al, 0xf4 ; call rsp
0x000000000019d240 : push rax ; and dl, ch ; call rcx
0x00000000001936bf : push rax ; and esp, edi ; call rax
0x0000000000021468 : push rax ; call rbx
0x000000000019384d : push rax ; cld ; call rax
0x0000000000193840 : push rax ; cld ; inc dword ptr [rax + 0x4c] ; cld ; inc dword ptr [rax + 0x4e] ; cld ; inc dword ptr [rax + 0x50] ; cld ; call rax
0x000000000008b4ea : push rax ; dec byte ptr [rcx + rcx*4 + 0x43] ; movsxd rdi, esi ; mov dword ptr [rbx + 0x30], eax ; mov qword ptr [rbx], rdi ; call rcx
0x00000000001877ab : push rax ; jg 0x1877ab ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001877a7 : push rax ; jg 0x1877ab ; push rax ; jg 0x1877af ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001b40f0 : push rax ; jl 0x1b40ed ; call rcx
0x00000000000768d2 : push rax ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x0000000000025cd6 : push rax ; mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000135010 : push rax ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000002583a : push rax ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov rax, qword ptr [rsp + 0x20] ; call rax
0x0000000000114eb6 : push rax ; mov rsi, rdx ; call rax
0x0000000000037b8e : push rax ; nop ; mov rsi, r13 ; mov rdi, r14 ; mov rdx, rbp ; call r15
0x0000000000076b7c : push rax ; push 0 ; lea r9, qword ptr [rbp - 0x38] ; mov rcx, r13 ; mov rdi, r15 ; xor r8d, r8d ; call rbx
0x0000000000193255 : push rax ; sti ; push qword ptr [rax] ; push rcx ; sti ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x00000000001993fd : push rbp ; add al, byte ptr [rax] ; mov ah, 0x17 ; sti ; call rsp
0x0000000000115ea2 : push rbp ; cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161f9 : push rbp ; cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000010425f : push rbp ; mov bh, 0xf1 ; dec dword ptr [rcx - 0x75] ; jge 0x10426f ; call rbx
0x0000000000146730 : push rbp ; mov byte ptr [rbx + rcx*4 + 0xa], al ; mov rdx, r13 ; add r9, qword ptr [rbp - 0x88] ; call rax
0x0000000000025345 : push rbp ; mov r9, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call rbx
0x0000000000028188 : push rbp ; mov r9, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x0000000000115ea6 : push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x00000000001161fd : push rbp ; nop ; mov edx, dword ptr [r13 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000011603c : push rbp ; nop ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115f05 : push rbp ; nop ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x00000000001164e3 : push rbp ; nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, qword ptr [rbp - 0x158] ; call rax
0x000000000011628c : push rbp ; nop ; mov edx, dword ptr [rbx + 0x60] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r14 ; call rax
0x0000000000115ac5 : push rbp ; nop ; mov edx, dword ptr [rbx - 0x30] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r13 ; call rax
0x0000000000115f94 : push rbp ; nop ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000115a0c : push rbp ; nop ; mov rdx, r13 ; call rax
0x0000000000115f9a : push rbp ; or byte ptr [rax - 0x77], 0xda ; call rax
0x00000000001850df : push rbp ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x0000000000115eaa : push rbp ; sbb byte ptr [rcx - 0x76b37fab], cl ; call rax
0x000000000019939d : push rbx ; add al, byte ptr [rax] ; in al, 0xe ; sti ; call rsp
0x0000000000199395 : push rbx ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000115f01 : push rbx ; cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rbx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, r12 ; call rax
0x000000000002d50b : push rbx ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002c350 : push rbx ; mov rax, qword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2c36c ; call rax
0x0000000000170da8 : push rbx ; std ; dec dword ptr [rax - 0x77] ; out dx, eax ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x000000000007a34d : push rbx ; sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000006da6d : push rbx ; xor al, 0x48 ; lea ecx, dword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x000000000006d76a : push rbx ; xor al, 0xbe ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x00000000001b7cb1 : push rcx ; clc ; call rdi
0x0000000000115f90 : push rcx ; cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [rcx + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x000000000002d71b : push rcx ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000193540 : push rcx ; movsb byte ptr [rdi], byte ptr [rsi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193259 : push rcx ; sti ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x0000000000196b4d : push rdi ; add dword ptr [rax], eax ; adc al, 0x76 ; hlt ; inc dword ptr [rdi + rdx*2 + 0x78640001] ; hlt ; call rsp
0x0000000000196b55 : push rdi ; add dword ptr [rax], eax ; js 0x196b55 ; call rsp
0x0000000000198189 : push rdi ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x000000000002d13b : push rdi ; cmp dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000195851 : push rdi ; out dx, al ; call rsp
0x0000000000195849 : push rdi ; out dx, al ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x00000000000757b9 : push rdi ; sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x00000000001304ed : push rdx ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], cl ; mov edi, ebp ; call rdx
0x0000000000196b09 : push rdx ; hlt ; call rsp
0x00000000000c9846 : push rdx ; mov rdx, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x000000000019325d : push rdx ; sti ; call rax
0x0000000000116038 : push rsi ; cmp byte ptr [rax - 0x77], cl ; push rbp ; nop ; mov edx, dword ptr [r14 + 0x18] ; mov dword ptr [rbp - 0x80], edx ; mov rdx, rbx ; call rax
0x0000000000087156 : push rsi ; movabs byte ptr [0x90fffffe8ce90000], al ; mov rdx, qword ptr [rsp + 0x68] ; call rax
0x00000000001993c5 : push rsp ; add al, byte ptr [rax] ; adc al, 0xfb ; call rsp
0x00000000001b7ca8 : push rsp ; add byte ptr [rax], al ; add byte ptr [rbx + 1], dl ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000196afd : push rsp ; add dword ptr [rax], eax ; adc al, 0x4a ; hlt ; dec dword ptr [rsp + rdx*2 + 0x52440001] ; hlt ; call rsp
0x0000000000196b05 : push rsp ; add dword ptr [rax], eax ; push rdx ; hlt ; call rsp
0x0000000000110a01 : push rsp ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000001108fd : push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; call rax
0x00000000001226d5 : push rsp ; and al, 0x10 ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000842c5 : push rsp ; and al, 0x18 ; call rdx
0x0000000000145d12 : push rsp ; and al, 0x18 ; mov esi, 0x40 ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x00000000000c9849 : push rsp ; and al, 0x28 ; mov rdi, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x18] ; call rax
0x0000000000024fb0 : push rsp ; and al, 0x30 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x00000000000238b6 : push rsp ; and al, 0x38 ; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; call r15
0x0000000000027db2 : push rsp ; and al, 0x38 ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000241ae : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call r15
0x0000000000024bd1 : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000023c3b : push rsp ; and al, 0x48 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x0000000000087162 : push rsp ; and al, 0x68 ; call rax
0x000000000008847a : push rsp ; and al, 0x68 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000001304e8 : push rsp ; and al, 8 ; mov rdx, qword ptr [rdx + 0x38] ; test rdx, rdx ; je 0x130508 ; mov rdi, rbp ; call rdx
0x00000000000391f2 : push rsp ; and al, 8 ; mov rsi, qword ptr [r15] ; mov rdi, qword ptr [r12] ; call r14
0x00000000000393f9 : push rsp ; and al, 8 ; mov rsi, r15 ; mov rdi, r12 ; call r14
0x0000000000198600 : push rsp ; and ecx, edi ; call rsp
0x0000000000195924 : push rsp ; fld dword ptr [rax] ; add byte ptr [rdi + rsi*2 - 0x12], ah ; inc dword ptr [rcx + rbx*8 + 0x7ed40000] ; out dx, al ; call rsp
0x0000000000195e34 : push rsp ; inc byte ptr [rax] ; add byte ptr [rsp + rdx*4 - 0x11], al ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000195208 : push rsp ; jg 0x1951fb ; call rsp
0x000000000019710c : push rsp ; jnp 0x19711f ; add byte ptr [rax + rbp*2], ah ; idiv bh ; movsb byte ptr [rdi], byte ptr [rsi] ; jnp 0x197127 ; add byte ptr [rbp + rbp*2 - 0xa], dh ; call rsp
0x00000000001b7cac : push rsp ; jrcxz 0x1b7cb7 ; add byte ptr [rax], ah ; push rcx ; clc ; call rdi
0x0000000000196a50 : push rsp ; loope 0x196a49 ; call rsp
0x0000000000197f7c : push rsp ; mov byte ptr [rcx], 0 ; je 0x197fbb ; clc ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x0000000000196310 : push rsp ; mov dh, cl ; call rsp
0x00000000000243dc : push rsp ; mov r9, qword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; call rbx
0x0000000000195728 : push rsp ; out dx, al ; push qword ptr [rbp + rcx*8 + 0x42e40000] ; out dx, al ; call rsp
0x0000000000198bf8 : push rsp ; sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x000000000019e3f4 : pushfq ; add byte ptr [rax], al ; je 0x19e3ed ; call rdi
0x0000000000198bfc : pushfq ; and dword ptr [rdx], eax ; add byte ptr [rsp + rbx], dh ; cli ; call rsp
0x0000000000198389 : pushfq ; clc ; call rsp
0x0000000000193eb1 : pushfq ; cld ; inc dword ptr [rax - 0x5d] ; cld ; call rax
0x0000000000195d84 : pushfq ; cli ; add byte ptr [rax], al ; xchg eax, esp ; jno 0x195d81 ; call rsp
0x0000000000198f94 : pushfq ; cmp al, byte ptr [rdx] ; add byte ptr [rdi + rcx*4 - 6], dh ; call rsp
0x0000000000193c6c : pushfq ; insb byte ptr [rdi], dx ; cld ; ljmp ptr [rsp + rbp*2] ; cld ; call rdx
0x0000000000105cdc : pushfq ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x0000000000105ce9 : pushfq ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105cf7 ; call rbx
0x000000000019584c : pushfq ; rol dword ptr [rax], cl ; add ah, ah ; push rdi ; out dx, al ; call rsp
0x00000000001a47f4 : pushfq ; scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x0000000000198edc : pushfq ; xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x000000000013ebee : pxor mm0, mm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x000000000013ebed : pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000001933c8 : rcl byte ptr [rax - 0x6e4f0003], 0xfd ; call rsi
0x00000000001933bc : rcl byte ptr [rcx - 0x70fe0003], 1 ; std ; call rax
0x0000000000105ddc : rcr bh, 0xff ; dec dword ptr [rcx - 0x75] ; call rbx
0x00000000001059ea : retf -0xe61 ; dec dword ptr [rcx - 0x75] ; call rbx
0x000000000003a23b : retf 0x6411 ; xor rdx, qword ptr [0x30] ; call rdx
0x000000000019804d : retf 1 ; and al, 0x40 ; clc ; call rsp
0x00000000000c96b9 : retf 7 ; mov rax, rbx ; call rax
0x000000000008a441 : retf ; add dword ptr [rax], eax ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x00000000001963e9 : retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000105de9 : retf ; wait ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105df9 ; call rbx
0x00000000001877a4 : rol byte ptr [rax + 0x7ff0fff4], 0xf4 ; push rax ; jg 0x1877b2 ; dec dword ptr [rax - 0x80] ; hlt ; call rax
0x00000000001354df : rol byte ptr [rax], 1 ; add byte ptr [rax], al ; mov rax, qword ptr [rax + 0x38] ; test rax, rax ; je 0x135501 ; mov rdi, r12 ; call rax
0x000000000002145a : rol byte ptr [rbp + 0x31], 0xc0 ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000001046ae : rol byte ptr [rcx - 0x77], 0xdd ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x0000000000021466 : rol byte ptr [rcx], 0x50 ; call rbx
0x0000000000108d77 : rol byte ptr [rdx], 1 ; add byte ptr [rax], al ; pop rax ; pop rdi ; call rax
0x00000000001b9a60 : rol cl, 1 ; clc ; call rcx
0x000000000019584d : rol dword ptr [rax], cl ; add ah, ah ; push rdi ; out dx, al ; call rsp
0x0000000000195845 : rol dword ptr [rax], cl ; add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x000000000019818d : rol dword ptr [rcx], 1 ; add byte ptr [rax + rbx*2], al ; clc ; call rsp
0x0000000000198185 : rol dword ptr [rcx], 1 ; add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x0000000000195844 : rol dword ptr fs:[rax], cl ; add byte ptr [rdi + rdx*2 - 0x2c630012], al ; add byte ptr [rax], al ; in al, 0x57 ; out dx, al ; call rsp
0x0000000000198184 : rol dword ptr fs:[rcx], 1 ; add byte ptr [rdi + rdx*2], dl ; clc ; inc dword ptr [rcx + rdx*8 + 0x58040001] ; clc ; call rsp
0x00000000000769a7 : ror byte ptr [rax - 0x73], 0xb5 ; nop ; add byte ptr [rax], al ; add byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x18 ; mov rdi, r12 ; call rbx
0x000000000012e716 : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x10 ; mov rdi, rbp ; call r14
0x0000000000138469 : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x30 ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134df1 : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x38 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500b : ror byte ptr [rax - 0x75], 0x74 ; and al, 0x50 ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x000000000012fbd6 : ror byte ptr [rax - 0x75], 0xb4 ; and al, 0 ; sub al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; or al, 0x24 ; call rcx
0x0000000000089d1a : ror byte ptr [rax - 0x77], 3 ; je 0x89e2d ; mov rsi, r14 ; call rax
0x00000000000ad111 : ror byte ptr [rbp + rcx*4 + 0x4c], cl ; and al, 0x20 ; call rbx
0x00000000000acd8a : ror byte ptr [rcx + rcx*4 - 0x12], 0x4c ; lea ecx, dword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000bb41a : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e2 : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c2 : ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012cdd1 : ror byte ptr [rcx + rcx*4 - 0x1a], cl ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x00000000000768cb : ror byte ptr [rcx + rcx*4 - 0xf], 0x48 ; lea esi, dword ptr [rbp + 0x50] ; lea r9, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call rbx
0x000000000012caa8 : ror byte ptr [rcx + rcx*4 - 0xf], 0x4c ; mov edi, ebp ; call r12
0x000000000012ccbf : ror byte ptr [rcx + rcx*4 - 2], cl ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x00000000000ad319 : ror byte ptr [rcx + rcx*4 - 7], 0x4c ; mov edx, esp ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000013ebf0 : ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x00000000001860fc : ror byte ptr [rdi], 0xf2 ; call rax
0x0000000000104aca : ror byte ptr [rdx], cl ; add byte ptr [rax], al ; mov rbp, rdi ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000001a2980 : ror dl, 1 ; in eax, dx ; call rdi
0x0000000000114eaa : ror dword ptr [rax - 0x75], cl ; add byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rbx + 0x48], 0x8b ; jp 0x114f17 ; mov rsi, rdx ; call rax
0x00000000000645a1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000047bbd : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000002f5f1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x000000000004dae1 : ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000012b797 : ror edi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a23a : ror edx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000645a0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000002f5f0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x000000000004dae0 : ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000012b796 : ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a239 : ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000193fa1 : sahf ; cld ; call rdx
0x0000000000193f9d : sahf ; cld ; inc dword ptr [rdx - 0x62] ; cld ; call rdx
0x0000000000194061 : sahf ; cld ; push qword ptr [rbp + rbx*4 - 0x62bb0004] ; cld ; call rsp
0x0000000000105b13 : sahf ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x0000000000105bb4 : sahf ; int1 ; dec dword ptr [rcx - 0x75] ; cmp al, 0x24 ; call rbx
0x0000000000105ba6 : sahf ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105bb4 ; call rbx
0x000000000019422c : sahf ; xchg eax, edx ; cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x0000000000187959 : sal ah, cl ; call rbx
0x00000000000206fd : sal byte ptr [rax + rdx + 0x48], 0xc1 ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000204ac : sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x00000000001304f1 : sal byte ptr [rbp + rax + 0x48], cl ; mov edi, ebp ; call rdx
0x0000000000114eb0 : sal byte ptr [rbp + rbx + 0x48], 0x8b ; jp 0x114f11 ; mov rsi, rdx ; call rax
0x00000000001177cf : sal byte ptr [rbx + rsi + 0x48], 0x8d ; jne 0x1177c4 ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x000000000012262e : sal byte ptr [rcx + rcx + 0x48], 0x8d ; cmp eax, 0x2a3068 ; call rax
0x0000000000134af1 : sal byte ptr [rcx + rcx + 0x48], 0x8d ; mov ebx, 0xc8 ; call rax
0x000000000002145d : sal byte ptr [rcx], 0xc9 ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10d : sal byte ptr [rcx], 0xc9 ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000021462 : sal byte ptr [rcx], 0xd2 ; add eax, 1 ; push rax ; call rbx
0x00000000000f8107 : sal byte ptr [rcx], cl ; test byte ptr [rax - 0x77], 0xdf ; call rax
0x00000000000f8103 : sal byte ptr [rdx + rcx*2 + 0x31], 0xd2 ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001356ba : sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x1356d8 ; call rax
0x000000000013b87a : sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13b898 ; call rax
0x000000000013bf93 : sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13bfb1 ; call rax
0x000000000013788e : sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x137904 ; call rax
0x00000000001382ee : sal byte ptr [rsi + rax + 0x48], 0x8d ; jnp 0x138354 ; call rax
0x0000000000104ff7 : sal dword ptr [rcx], cl ; sar byte ptr [rsi + 1], cl ; mov rdi, rbp ; call rbx
0x0000000000114eb9 : salc ; call rax
0x00000000001040e2 : sar byte ptr [rax - 0x74b6000f], cl ; call rbx
0x00000000001877b4 : sar byte ptr [rdi - 0xc], 1 ; call rax
0x000000000013d144 : sar byte ptr [rdx - 1], 0x48 ; mov esi, ebx ; mov rdi, r15 ; call r14
0x000000000013e867 : sar byte ptr [rdx - 1], 0x48 ; mov esi, ebx ; mov rdi, rbp ; call rcx
0x000000000013e991 : sar byte ptr [rdx - 1], 0x4c ; mov esi, esi ; mov rdi, rbp ; call r12
0x0000000000104ff9 : sar byte ptr [rsi + 1], cl ; mov rdi, rbp ; call rbx
0x0000000000104d6a : sar dword ptr [rdx + 1], cl ; mov esi, 1 ; mov rdi, r12 ; call rbx
0x0000000000104fe8 : sar dword ptr [rdx + 1], cl ; mov esi, 2 ; mov rdi, r12 ; call rbx
0x0000000000104c36 : sar dword ptr [rdx + 2], cl ; mov esi, 1 ; mov rdi, r13 ; call rbx
0x0000000000104d5b : sar dword ptr [rdx + 2], cl ; mov esi, 2 ; mov rdi, r13 ; call rbx
0x0000000000104bae : sar dword ptr [rdx + 3], cl ; mov esi, 1 ; mov rdi, r14 ; call rbx
0x0000000000104c27 : sar dword ptr [rdx + 3], cl ; mov esi, 2 ; mov rdi, r14 ; call rbx
0x0000000000037612 : sbb al, 0x15 ; add byte ptr [rax], al ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x18] ; call r15
0x000000000017209d : sbb al, 0x24 ; mov rdx, qword ptr [rax + rbp*8] ; test rdx, rdx ; je 0x1720b5 ; call rdx
0x000000000003763c : sbb al, 0x30 ; nop ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x00000000001ad674 : sbb al, 0x3d ; add dword ptr [rax], eax ; sub byte ptr [rcx - 0xb], bl ; call rdx
0x0000000000196b7c : sbb al, 0x59 ; add dword ptr [rax], eax ; adc al, 0x8c ; hlt ; inc dword ptr [rcx + rbx*2 - 0x6fbbffff] ; hlt ; call rsp
0x0000000000122220 : sbb al, 0x9b ; add byte ptr [rax], al ; test rax, rax ; je 0x12223a ; mov rdi, rbx ; call rax
0x0000000000105b98 : sbb al, 0x9e ; int1 ; dec dword ptr [rcx - 0x75] ; call rbx
0x000000000019867c : sbb al, 0xf4 ; add dword ptr [rax], eax ; movsb byte ptr [rdi], byte ptr [rsi] ; xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x0000000000198c01 : sbb al, 0xfa ; call rsp
0x00000000000dff31 : sbb bl, bh ; call rcx
0x00000000001356b2 : sbb byte ptr [r8 - 0x75], r9b ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x1356e0 ; call rax
0x000000000013b872 : sbb byte ptr [r8 - 0x75], r9b ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13b8a0 ; call rax
0x000000000013bf8b : sbb byte ptr [r8 - 0x75], r9b ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13bfb9 ; call rax
0x00000000000204a8 : sbb byte ptr [r8 - 0x7b], r9b ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x000000000003a280 : sbb byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000131b8c : sbb byte ptr [rax - 0x75], cl ; and al, 8 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000001356b3 : sbb byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x1356df ; call rax
0x000000000013b873 : sbb byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13b89f ; call rax
0x000000000013bf8c : sbb byte ptr [rax - 0x75], cl ; cmp byte ptr [rax - 0x7b], cl ; sal byte ptr [rsi + rax + 0x48], 0x8d ; jge 0x13bfb8 ; call rax
0x00000000000204a9 : sbb byte ptr [rax - 0x7b], cl ; sal byte ptr [rbp + rax + 0x48], 0x89 ; out dx, eax ; call rax
0x00000000000bb417 : sbb byte ptr [rbp + 0x31], al ; ror byte ptr [rcx + rcx*4 - 0x17], 0x4c ; lea ecx, dword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x000000000013a4b4 : sbb byte ptr [rbp - 0x77], cl ; clc ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call rax
0x00000000000213e9 : sbb byte ptr [rbp - 0x77], cl ; int1 ; call rbx
0x00000000000843b6 : sbb byte ptr [rcx + rcx*4 + 0x4c], cl ; and al, 0x10 ; mov qword ptr [rsp + 8], rcx ; call rsi
0x00000000000ad460 : sbb byte ptr [rcx + rcx*4 - 0x16], cl ; mov rdi, rbp ; call rbx
0x00000000000769b3 : sbb byte ptr [rcx + rcx*4 - 0x19], cl ; call rbx
0x00000000000ad720 : sbb byte ptr [rcx + rcx*4 - 0xe], cl ; mov rdi, rbp ; call rbx
0x0000000000115eab : sbb byte ptr [rcx - 0x76b37fab], cl ; call rax
0x00000000001a8868 : sbb byte ptr [rcx], bh ; call rsi
0x0000000000145d14 : sbb byte ptr [rsi + 0x40], bh ; mov rdi, rbx ; mov rax, qword ptr [rsp + 0x10] ; call rax
0x000000000019443d : sbb dword ptr [rcx], eax ; add byte ptr [rbp + rdi*4 - 0x18], dh ; call rsp
0x0000000000193739 : sbb eax, 0x1f10fffc ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x0000000000114eb2 : sbb eax, 0x507a8b48 ; mov rsi, rdx ; call rax
0x000000000019630d : sbb eax, 0x8a540001 ; int1 ; call rsp
0x000000000019f901 : sbb ebp, ebp ; call rbx
0x00000000001a4a59 : sbb ebp, edi ; call rcx
0x0000000000198bf9 : sbb edi, edx ; lcall ptr [rcx + 0x1c340002] ; cli ; call rsp
0x0000000000193631 : sbb edi, esp ; call rax
0x0000000000193735 : sbb edi, esp ; push qword ptr [rax] ; sbb eax, 0x1f10fffc ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x00000000001a47f5 : scasb al, byte ptr [rdi] ; add byte ptr [rax], al ; pop rax ; shr esi, 1 ; call rcx
0x0000000000105e05 : scasd eax, dword ptr [rdi] ; wait ; int1 ; dec dword ptr [rax - 0x75] ; jge 0x105e15 ; call rbx
0x0000000000105ba5 : setle cl ; dec dword ptr [rcx - 0x75] ; jge 0x105bb5 ; call rbx
0x00000000001936c4 : shl byte ptr [rbx], 1 ; cld ; call rax
0x0000000000193744 : shl byte ptr [rdx], 1 ; cld ; call rax
0x0000000000193748 : shl byte ptr [rsp + rdi*8], 1 ; call rax
0x00000000000ad199 : shr byte ptr [rdx], 0x48 ; lea ecx, dword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x00000000001b3f30 : shr cl, 0xfb ; call rsi
0x00000000001a47f9 : shr esi, 1 ; call rcx
0x00000000001a92b5 : stc ; add byte ptr [rax], al ; js 0x1a9252 ; call rbx
0x00000000001a929d : stc ; add byte ptr [rax], al ; mov al, 0x91 ; call rbx
0x0000000000198602 : stc ; call rsp
0x0000000000199331 : stc ; cli ; call rsp
0x000000000019870a : stc ; inc dword ptr [rax + rdi*8 + 0x66240001] ; stc ; call rsp
0x00000000001986aa : stc ; inc dword ptr [rbp + rsi*8 + 0x45740001] ; stc ; call rsp
0x00000000001988da : stc ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019894a : stc ; lcall ptr [rsi + rcx - 0x44fbfffe] ; stc ; call rsp
0x00000000001226d2 : stc ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, r13 ; call r12
0x00000000000ad31c : stc ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x0000000000198682 : stc ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001933ba : std ; call rax
0x000000000019354e : std ; call rcx
0x00000000001933ce : std ; call rsi
0x0000000000170da9 : std ; dec dword ptr [rax - 0x77] ; out dx, eax ; add rdi, qword ptr [r13 + 0x10] ; call r12
0x000000000019362e : std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x00000000001933b6 : std ; dec esi ; nop ; std ; call rax
0x000000000019354a : std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x000000000019362a : std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193546 : std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193626 : std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193542 : std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000104ad0 : std ; xor edx, edx ; xor esi, esi ; call rbx
0x000000000019325e : sti ; call rax
0x00000000000dff32 : sti ; call rcx
0x00000000001b3f32 : sti ; call rsi
0x00000000001993a2 : sti ; call rsp
0x000000000019325a : sti ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x000000000019939a : sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000199482 : sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x00000000001932d2 : sti ; push qword ptr [rax] ; jbe 0x1932d7 ; call rax
0x0000000000193256 : sti ; push qword ptr [rax] ; push rcx ; sti ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x0000000000116b59 : sti ; sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000006efe0 : sti ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x000000000002c357 : sti ; test rax, rax ; je 0x2c365 ; call rax
0x0000000000185dfd : stosb byte ptr [rdi], al ; int1 ; call rsp
0x00000000001a13d0 : sub al, 0 ; add byte ptr [rax], al ; jl 0x1a145b ; add byte ptr [rax], al ; clc ; jns 0x1a13d3 ; call rcx
0x000000000019f8f8 : sub al, 0 ; add byte ptr [rax], al ; movsb byte ptr [rdi], byte ptr [rsi] ; pop rdi ; add byte ptr [rax], al ; nop ; sbb ebp, ebp ; call rbx
0x00000000000fe789 : sub al, 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000000f767c : sub al, 0x48 ; ror eax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000193c70 : sub al, 0x6c ; cld ; call rdx
0x0000000000193c68 : sub al, 0x6d ; cld ; lcall ptr [rsp + rbp*2 + 0x6c2cfffc] ; cld ; call rdx
0x0000000000195661 : sub al, 0xee ; ljmp ptr [rax + rcx*8 + 0x2db40000] ; out dx, al ; call rsp
0x0000000000193935 : sub al, 0xfc ; call rax
0x000000000012fbdc : sub al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; fisttp word ptr [rax - 0x75] ; or al, 0x24 ; call rcx
0x0000000000122636 : sub al, byte ptr [rax] ; call rax
0x0000000000116b5a : sub al, byte ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000197f89 : sub bh, al ; call rsp
0x0000000000197f81 : sub bh, al ; inc dword ptr [rsi + rax*8 + 0x2ad40001] ; clc ; call rsp
0x000000000003004b : sub bh, byte ptr [rcx] ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000024d66 : sub byte ptr [rax - 0x75], cl ; je 0x24d9b ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x000000000002818d : sub byte ptr [rax - 0x75], cl ; je 0x281c1 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x000000000002912d : sub byte ptr [rax - 0x75], cl ; je 0x29161 ; mov rdi, qword ptr [rsp + 0x40] ; call rbx
0x00000000000c984b : sub byte ptr [rax - 0x75], cl ; jl 0xc987f ; and byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x00000000000ad5ed : sub byte ptr [rax - 0x77], cl ; out dx, eax ; call rbx
0x000000000013ab5b : sub byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000104d94 : sub byte ptr [rax], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000000842bd : sub byte ptr [rcx + rcx*4 + 0x44], cl ; and al, 0x20 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x00000000000877f4 : sub byte ptr [rcx + rcx*4 - 0x19], cl ; call rax
0x00000000001ad678 : sub byte ptr [rcx - 0xb], bl ; call rdx
0x0000000000030076 : sub byte ptr [rcx], bh ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001108f5 : sub byte ptr [rdi + 0x2000001], bh ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; call rax
0x000000000012e093 : sub dword ptr [rax], eax ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000012b794 : sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003010e : sub dword ptr [rcx], edi ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000000ce52f : sub dword ptr [rdi], 0xc8c14800 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000013ebe6 : sub dword ptr [rsp + 0x80], eax ; pxor xmm0, xmm0 ; movups xmmword ptr [rsp + 0x28], xmm0 ; call rdx
0x00000000000f0773 : sub eax, 0xc8c14800 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000106906 : sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x1069b6 ; call rax
0x0000000000106a7d : sub eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x106b8e ; call rax
0x0000000000197f59 : sub eax, edi ; call rsp
0x0000000000197f58 : sub eax, r15d ; call rsp
0x0000000000194b41 : sub ebp, edx ; call rsp
0x00000000000757bc : sub edx, esi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000007a350 : sub edx, esi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000006efe2 : sub esp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000000757bb : sub rdx, rsi ; mov qword ptr [rsp + 8], rcx ; mov rdi, r15 ; call rax
0x000000000007a34f : sub rdx, rsi ; mov qword ptr [rsp], rcx ; mov rdi, rbx ; call rax
0x000000000006efe1 : sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xe0] ; call rax
0x00000000000c9127 : test ah, ah ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x13], cl ; mov rdi, rbx ; call r12
0x0000000000089d1f : test ah, bh ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0xa], cl ; call rax
0x000000000008aeaf : test ah, bl ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x00000000000bc655 : test al, 0 ; add byte ptr [rax], al ; call r15
0x00000000000bc19b : test al, 0 ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x40] ; call r15
0x00000000000c80cf : test al, 0x2f ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x00000000001afc58 : test al, 0xf7 ; cmc ; call rsi
0x00000000001988d9 : test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x000000000019870c : test al, bh ; add dword ptr [rax], eax ; and al, 0x66 ; stc ; call rsp
0x00000000000d024b : test bh, bh ; add byte ptr [rax], al ; add byte ptr [rax - 0x75], cl ; mov ebp, 0xfffffcf8 ; call r12
0x0000000000105224 : test bh, dl ; add eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000089f20 : test bl, ch ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x1e], cl ; mov rdi, r15 ; call rax
0x000000000008a440 : test bl, cl ; add dword ptr [rax], eax ; add byte ptr [rcx + rcx*4 - 6], cl ; mov rdi, r8 ; call rax
0x000000000008b03b : test byte ptr [rax + 0x48000000], cl ; mov esi, ebp ; mov rdi, r12 ; call rax
0x000000000019947c : test byte ptr [rax + 2], bl ; add byte ptr [rdi + rbx], ah ; sti ; ljmp ptr [rax + rbx*2 + 0x1fd40002] ; sti ; call rsp
0x0000000000199324 : test byte ptr [rax + 2], dl ; add ah, dl ; clc ; cli ; ljmp ptr [rax + rdx*2 - 0x68bfffe] ; cli ; call rsp
0x000000000010518b : test byte ptr [rax + 5], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x00000000001051ab : test byte ptr [rax + 6], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000013ebe7 : test byte ptr [rax + rax*4], ah ; add byte ptr [rax], al ; add byte ptr [rsi + 0xf], ah ; out dx, eax ; ror byte ptr [rdi], 0x11 ; and al, 0x28 ; call rdx
0x000000000002986c : test byte ptr [rax + rbx*4], ah ; add byte ptr [rax], al ; add byte ptr [rbp + 0x31], al ; leave ; call r15
0x000000000004540d : test byte ptr [rax - 0x3f], 0xc8 ; adc dword ptr [rax + rcx*2 + 0x33], esp ; add al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003a5da : test byte ptr [rax - 0x3f], 0xca ; adc dword ptr [rax + rcx*2 + 0x33], esp ; adc al, 0x25 ; xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x00000000001109fe : test byte ptr [rax - 0x75], 0x54 ; and al, 0x10 ; mov edi, 0x2000004 ; call rax
0x00000000000f8109 : test byte ptr [rax - 0x77], 0xdf ; call rax
0x000000000013e999 : test byte ptr [rax - 0x77], 0xef ; call r12
0x000000000014663a : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x0000000000086dfa : test byte ptr [rax], al ; add byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rsp + 0x48] ; call rax
0x000000000012fbf8 : test byte ptr [rbx + 0x48fffffe], dl ; mov edi, ebx ; call rax
0x000000000008b190 : test byte ptr [rbx + 0x4c000000], dl ; mov edi, ebp ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x0000000000104e50 : test byte ptr [rbx + 0xa], cl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000001052c0 : test byte ptr [rbx + 3], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r13 ; call rbx
0x00000000001963ec : test byte ptr [rbx], ah ; add dword ptr [rax], eax ; in al, -0x33 ; int1 ; call rsp
0x0000000000196b84 : test byte ptr [rcx + 1], bl ; add byte ptr [rax + rdx*4 - 0xc], al ; call rsp
0x000000000008b5a2 : test byte ptr [rcx - 0x76b3cfbd], 0x4b ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x0000000000104bd2 : test byte ptr [rcx], cl ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x0000000000196b54 : test byte ptr [rdi + 1], dl ; add byte ptr [rax + rdi*2 - 0xc], ah ; call rsp
0x0000000000104edc : test byte ptr [rdi + 7], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104efc : test byte ptr [rdi + 9], bl ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000195848 : test byte ptr [rdi - 0x12], dl ; lcall ptr [rbx + rdx*8 + 0x57e40000] ; out dx, al ; call rsp
0x0000000000198bbc : test byte ptr [rdi], bl ; add al, byte ptr [rax] ; mov ah, 0x14 ; cli ; call rsp
0x00000000000ce261 : test byte ptr [rdi], ch ; add byte ptr [rax - 0x3f], cl ; enter 0x6411, 0x48 ; xor eax, dword ptr [0x30] ; call rax
0x0000000000105429 : test byte ptr [rdx + 3], dh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000198ed4 : test byte ptr [rdx + rax], dh ; add ah, al ; jbe 0x198ee4 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000196838 : test byte ptr [rdx - 0xd], bh ; call rsp
0x0000000000104b59 : test byte ptr [rdx], ah ; or eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x00000000001988d4 : test byte ptr [rdx], cl ; add al, byte ptr [rax] ; hlt ; test al, 0xf9 ; lcall ptr [rdx + rcx - 0x560bfffe] ; stc ; call rsp
0x00000000001af7dc : test byte ptr [rsi + 1], bl ; add al, dh ; jrcxz 0x1af7df ; call rsi
0x00000000001050ff : test byte ptr [rsi + rax], bh ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x0000000000198090 : test byte ptr [rsi - 8], al ; dec dword ptr [rsp + rcx*8 + 0x47e40001] ; clc ; call rsp
0x000000000010501d : test byte ptr [rsi], bh ; add eax, 0xf6310000 ; mov rdi, r12 ; call rbx
0x0000000000198944 : test byte ptr [rsi], cl ; add al, byte ptr [rax] ; movsb byte ptr [rdi], byte ptr [rsi] ; mov edx, 0xe9cfff9 ; add al, byte ptr [rax] ; add al, 0xbb ; stc ; call rsp
0x0000000000104cf7 : test byte ptr [rsp + rcx], al ; add byte ptr [rax], al ; xor esi, esi ; mov rdi, r15 ; call rbx
0x000000000012e710 : test ch, ch ; add byte ptr [rax], al ; add byte ptr [rcx], dh ; ror byte ptr [rax - 0x75], 0x74 ; and al, 0x10 ; mov rdi, rbp ; call r14
0x00000000001986ac : test ch, dh ; add dword ptr [rax], eax ; je 0x1986fe ; stc ; call rsp
0x000000000019818c : test cl, dl ; add dword ptr [rax], eax ; add al, 0x58 ; clc ; call rsp
0x000000000008a18d : test dh, cl ; add byte ptr [rax], al ; add byte ptr [rax - 0x77], cl ; out dx, al ; mov rdi, rbx ; call rax
0x0000000000195d7c : test dl, bh ; add byte ptr [rax], al ; in al, 0x70 ; out dx, eax ; lcall ptr [rdx + rdi*8 + 0x71940000] ; out dx, eax ; call rsp
0x0000000000104ac9 : test dl, dl ; or al, byte ptr [rax] ; add byte ptr [rax - 0x77], cl ; std ; xor edx, edx ; xor esi, esi ; call rbx
0x00000000001056a6 : test dword ptr [rax - 0x4100000b], edi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000105706 : test dword ptr [rbp - 0x41000006], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r14 ; call rbx
0x0000000000105826 : test dword ptr [rbp - 0x41000007], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001057a6 : test dword ptr [rbx - 0x41000004], eax ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001052e5 : test dword ptr [rbx], 0xf6310000 ; mov rdi, r14 ; call rbx
0x0000000000105746 : test dword ptr [rcx - 0x41000007], edi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001057c6 : test dword ptr [rdi - 0x41000005], esi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x0000000000105786 : test dword ptr [rdi*8 + 0x3beffff], ebx ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 1], cl ; call rbx
0x0000000000105626 : test dword ptr [rdx - 0x41000004], ebx ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r13 ; call rbx
0x00000000001058a6 : test dword ptr [rdx - 0x4100000b], ebp ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x00000000001850e8 : test dword ptr [rsi + rbp*8], ecx ; call rbx
0x00000000001850dc : test dword ptr [rsi + rbp*8], ecx ; push rbp ; or ebp, esi ; inc dword ptr [rbp - 0x7a0011f4] ; or al, 0xee ; call rbx
0x0000000000105567 : test dword ptr [rsi - 0x41000006], esi ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r12 ; call rbx
0x0000000000105866 : test dword ptr [rsi - 0x4100000a], edx ; add eax, dword ptr [rax] ; add byte ptr [rax], al ; mov rdi, r15 ; call rbx
0x000000000010690c : test eax, eax ; je 0x1069b0 ; call rax
0x0000000000106a83 : test eax, eax ; je 0x106b88 ; call rax
0x0000000000114eaf : test eax, eax ; je 0x114edb ; mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x0000000000117500 : test eax, eax ; je 0x117534 ; call rax
0x00000000001177ce : test eax, eax ; je 0x117814 ; lea rsi, qword ptr [rbp - 0x20] ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x0000000000122225 : test eax, eax ; je 0x122235 ; mov rdi, rbx ; call rax
0x000000000012251d : test eax, eax ; je 0x12252d ; mov rdi, rbx ; call rax
0x000000000012262d : test eax, eax ; je 0x122645 ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x000000000012df71 : test eax, eax ; je 0x12df81 ; mov rdi, rsp ; call rax
0x000000000012e05c : test eax, eax ; je 0x12e06c ; mov rdi, rsp ; call rax
0x000000000012e917 : test eax, eax ; je 0x12e927 ; mov rdi, rbp ; call rax
0x000000000012f97a : test eax, eax ; je 0x12f98a ; mov rdi, rbx ; call rax
0x000000000012fbf5 : test eax, eax ; je 0x12fa9b ; mov rdi, rbx ; call rax
0x000000000012fcec : test eax, eax ; je 0x12fcfc ; mov rdi, rbx ; call rax
0x0000000000134af0 : test eax, eax ; je 0x134b08 ; lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x00000000001354e8 : test eax, eax ; je 0x1354f8 ; mov rdi, r12 ; call rax
0x00000000001356b9 : test eax, eax ; je 0x1356cb ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000136a6e : test eax, eax ; je 0x136993 ; mov rdi, rbx ; call rax
0x00000000001369a5 : test eax, eax ; je 0x1369b5 ; mov rdi, r12 ; call rax
0x0000000000136b96 : test eax, eax ; je 0x136ba6 ; mov rdi, rbp ; call rax
0x0000000000136db6 : test eax, eax ; je 0x136dc6 ; mov rdi, rbp ; call rax
0x000000000013788d : test eax, eax ; je 0x13789f ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137f79 : test eax, eax ; je 0x137f89 ; mov rdi, r12 ; call rax
0x00000000001382ed : test eax, eax ; je 0x1382ff ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x000000000013b879 : test eax, eax ; je 0x13b88b ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf92 : test eax, eax ; je 0x13bfa4 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x00000000001721bc : test eax, eax ; je 0x1721cb ; call rax
0x00000000000204ab : test eax, eax ; je 0x204bb ; mov rdi, rbp ; call rax
0x000000000002adfd : test eax, eax ; je 0x2ae07 ; call rax
0x000000000002c359 : test eax, eax ; je 0x2c363 ; call rax
0x0000000000080a3d : test eax, eax ; je 0x80a47 ; call rax
0x0000000000087dd9 : test eax, eax ; je 0x87de3 ; call rax
0x00000000000c7c2e : test eax, eax ; je 0xc7c50 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000cd38f : test eax, eax ; je 0xcd399 ; call rax
0x00000000000cd571 : test eax, eax ; je 0xcd57e ; call rax
0x00000000000f8102 : test eax, eax ; je 0xf815b ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x0000000000089d19 : test eax, eax ; mov qword ptr [rbx], rax ; je 0x89e2e ; mov rsi, r14 ; call rax
0x0000000000199fd9 : test eax, ebp ; call rsp
0x00000000000cd565 : test ebx, ebx ; je 0xcd513 ; mov rdi, qword ptr [rbx] ; mov rax, qword ptr [rdi + 0x10] ; test rax, rax ; je 0xcd58a ; call rax
0x000000000002af85 : test ecx, ecx ; je 0x2af8f ; call rcx
0x00000000001721b3 : test edi, edi ; je 0x1721d9 ; mov rax, qword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d4 ; call rax
0x00000000001304f0 : test edx, edx ; je 0x130500 ; mov rdi, rbp ; call rdx
0x00000000001720a4 : test edx, edx ; je 0x1720ae ; call rdx
0x00000000000cd4e0 : test edx, edx ; je 0xcd4ed ; call rdx
0x00000000000c9124 : test esp, esp ; je 0xc921f ; mov rbp, r13 ; mov rdi, rbx ; call r12
0x00000000000d0248 : test esp, esp ; je 0xd035f ; mov rdi, qword ptr [rbp - 0x308] ; call r12
0x00000000000c9123 : test r12, r12 ; je 0xc9220 ; mov rbp, r13 ; mov rdi, rbx ; call r12
0x000000000010690b : test rax, rax ; je 0x1069b1 ; call rax
0x0000000000106a82 : test rax, rax ; je 0x106b89 ; call rax
0x0000000000114eae : test rax, rax ; je 0x114edc ; mov rdi, qword ptr [rdx + 0x50] ; mov rsi, rdx ; call rax
0x00000000001174ff : test rax, rax ; je 0x117535 ; call rax
0x00000000001177cd : test rax, rax ; je 0x117815 ; lea rsi, qword ptr [rbp - 0x20] ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x0000000000122224 : test rax, rax ; je 0x122236 ; mov rdi, rbx ; call rax
0x000000000012251c : test rax, rax ; je 0x12252e ; mov rdi, rbx ; call rax
0x000000000012262c : test rax, rax ; je 0x122646 ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x000000000012df70 : test rax, rax ; je 0x12df82 ; mov rdi, rsp ; call rax
0x000000000012e05b : test rax, rax ; je 0x12e06d ; mov rdi, rsp ; call rax
0x000000000012e916 : test rax, rax ; je 0x12e928 ; mov rdi, rbp ; call rax
0x000000000012f979 : test rax, rax ; je 0x12f98b ; mov rdi, rbx ; call rax
0x000000000012fbf4 : test rax, rax ; je 0x12fa9c ; mov rdi, rbx ; call rax
0x000000000012fceb : test rax, rax ; je 0x12fcfd ; mov rdi, rbx ; call rax
0x0000000000134aef : test rax, rax ; je 0x134b09 ; lea rdi, qword ptr [rbx + 0xc8] ; call rax
0x00000000001354e7 : test rax, rax ; je 0x1354f9 ; mov rdi, r12 ; call rax
0x00000000001356b8 : test rax, rax ; je 0x1356cc ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x0000000000136a6d : test rax, rax ; je 0x136994 ; mov rdi, rbx ; call rax
0x00000000001369a4 : test rax, rax ; je 0x1369b6 ; mov rdi, r12 ; call rax
0x0000000000136b95 : test rax, rax ; je 0x136ba7 ; mov rdi, rbp ; call rax
0x0000000000136db5 : test rax, rax ; je 0x136dc7 ; mov rdi, rbp ; call rax
0x000000000013788c : test rax, rax ; je 0x1378a0 ; lea rdi, qword ptr [rbx + 0x68] ; call rax
0x0000000000137f78 : test rax, rax ; je 0x137f8a ; mov rdi, r12 ; call rax
0x00000000001382ec : test rax, rax ; je 0x138300 ; lea rdi, qword ptr [rbx + 0x58] ; call rax
0x000000000013b878 : test rax, rax ; je 0x13b88c ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x000000000013bf91 : test rax, rax ; je 0x13bfa5 ; lea rdi, qword ptr [rbp + 0x10] ; call rax
0x00000000001721bb : test rax, rax ; je 0x1721cc ; call rax
0x00000000000204aa : test rax, rax ; je 0x204bc ; mov rdi, rbp ; call rax
0x000000000002adfc : test rax, rax ; je 0x2ae08 ; call rax
0x000000000002c358 : test rax, rax ; je 0x2c364 ; call rax
0x0000000000080a3c : test rax, rax ; je 0x80a48 ; call rax
0x0000000000087dd8 : test rax, rax ; je 0x87de4 ; call rax
0x00000000000c7c2d : test rax, rax ; je 0xc7c51 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000cd38e : test rax, rax ; je 0xcd39a ; call rax
0x00000000000cd570 : test rax, rax ; je 0xcd57f ; call rax
0x00000000000f8101 : test rax, rax ; je 0xf815c ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x0000000000089d18 : test rax, rax ; mov qword ptr [rbx], rax ; je 0x89e2f ; mov rsi, r14 ; call rax
0x000000000002af84 : test rcx, rcx ; je 0x2af90 ; call rcx
0x00000000001721b2 : test rdi, rdi ; je 0x1721da ; mov rax, qword ptr [rdi + 0x20] ; test rax, rax ; je 0x1721d5 ; call rax
0x00000000001304ef : test rdx, rdx ; je 0x130501 ; mov rdi, rbp ; call rdx
0x00000000001720a3 : test rdx, rdx ; je 0x1720af ; call rdx
0x00000000000cd4df : test rdx, rdx ; je 0xcd4ee ; call rdx
0x0000000000122221 : wait ; add byte ptr [rax], al ; test rax, rax ; je 0x122239 ; mov rdi, rbx ; call rax
0x0000000000198381 : wait ; clc ; ljmp ptr [rdi + rbx*8 - 0x636bffff] ; clc ; call rsp
0x0000000000105e06 : wait ; int1 ; dec dword ptr [rax - 0x75] ; jge 0x105e14 ; call rbx
0x0000000000105df8 : wait ; int1 ; dec dword ptr [rcx - 0x75] ; cmp al, 0x24 ; call rbx
0x0000000000105dea : wait ; int1 ; dec dword ptr [rcx - 0x75] ; jge 0x105df8 ; call rbx
0x0000000000103f19 : wait ; mov edx, 0x8b49fff1 ; call rbx
0x0000000000087dd1 : wait ; nop ; xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87deb ; call rax
0x0000000000194ca5 : xchg dword ptr [rax], eax ; add byte ptr [rcx + rbp*2 - 0x16], dl ; call rsp
0x0000000000194ee5 : xchg eax, ebp ; add byte ptr [rax], al ; cmp ebp, ebx ; call rsp
0x000000000008b191 : xchg eax, ebx ; add byte ptr [rax], al ; add byte ptr [rcx + rcx*4 - 0x11], cl ; mov rdx, rbp ; mov rsi, r12 ; call rax
0x0000000000194325 : xchg eax, ebx ; cld ; inc dword ptr [rax] ; xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x0000000000194229 : xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000194225 : xchg eax, ebx ; cld ; ljmp ptr [rsi] ; xchg eax, ebx ; cld ; lcall ptr [rsi + 0x2efffc92] ; xchg eax, edx ; cld ; call rsp
0x0000000000194329 : xchg eax, ebx ; cld ; push qword ptr [rax - 0x6e] ; cld ; call rax
0x000000000012c933 : xchg eax, ebx ; sub dword ptr [rax], eax ; ror rdi, 0x11 ; xor rdi, qword ptr fs:[0x30] ; call rax
0x00000000001a92a1 : xchg eax, ecx ; call rbx
0x0000000000186f00 : xchg eax, ecx ; fdivr st(3), st(0) ; lcall ptr [rbp - 0x1f] ; ljmp ptr [rax + 0x7dfff3db] ; fcomi st(3) ; call rax
0x00000000001933cd : xchg eax, ecx ; std ; call rsi
0x00000000001933b5 : xchg eax, ecx ; std ; dec esi ; nop ; std ; call rax
0x0000000000122629 : xchg eax, edi ; add byte ptr [rax], al ; test rax, rax ; je 0x122649 ; lea rdi, qword ptr [rip + 0x2a3068] ; call rax
0x00000000001a92b9 : xchg eax, edx ; call rbx
0x000000000019432d : xchg eax, edx ; cld ; call rax
0x0000000000194231 : xchg eax, edx ; cld ; call rsp
0x000000000019422d : xchg eax, edx ; cld ; ljmp ptr [rsi] ; xchg eax, edx ; cld ; call rsp
0x0000000000122cea : xchg eax, edx ; xor al, 2 ; add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x00000000001b2f95 : xchg eax, esi ; add dword ptr [rax], eax ; add rdi, rsi ; call rsi
0x00000000001991ac : xchg eax, esp ; add r8b, byte ptr [rax] ; xchg eax, esp ; mov cl, 0xfa ; call rsp
0x0000000000197e90 : xchg eax, esp ; and al, 0xf8 ; call rsp
0x0000000000196720 : xchg eax, esp ; call rsp
0x00000000001941a1 : xchg eax, esp ; cld ; call rdx
0x00000000001b40ec : xchg eax, esp ; cmpsd dword ptr [rsi], dword ptr [rdi] ; add dword ptr [rax], eax ; push rax ; jl 0x1b40f1 ; call rcx
0x00000000001a74ec : xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x0000000000195d88 : xchg eax, esp ; jno 0x195d7d ; call rsp
0x0000000000187dfc : xchg eax, esp ; mov bh, 0xf5 ; call rsp
0x00000000001991b0 : xchg eax, esp ; mov cl, 0xfa ; call rsp
0x00000000001954ac : xchg eax, esp ; mov ebx, 0xe9a40000 ; in eax, dx ; call rsp
0x0000000000195e41 : xchg eax, esp ; out dx, eax ; call rsp
0x0000000000195e39 : xchg eax, esp ; out dx, eax ; dec dword ptr [rsi + rdi*8 - 0x6b2c0000] ; out dx, eax ; call rsp
0x0000000000198388 : xchg eax, esp ; pushfq ; clc ; call rsp
0x00000000001963e8 : xchg eax, esp ; retf ; int1 ; inc dword ptr [rbx - 0x321bffff] ; int1 ; call rsp
0x0000000000021459 : xchg eax, esp ; rol byte ptr [rbp + 0x31], 0xc0 ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x0000000000116103 : xchg eax, r8d ; mov eax, dword ptr [r14 - 0x30] ; mov dword ptr [rbp - 0x80], eax ; call r8
0x00000000001a70cd : xlatb ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x000000000017e4d9 : xlatb ; add dword ptr [rax], eax ; add byte ptr [rax], al ; add byte ptr [rax], al ; call rdi
0x0000000000105225 : xlatb ; add eax, 0xf6310000 ; mov rdi, r15 ; call rbx
0x00000000001471a0 : xlatb ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001877b1 : xor ah, 0xff ; sar byte ptr [rdi - 0xc], 1 ; call rax
0x00000000001a70c8 : xor al, 0 ; add byte ptr [rax], al ; je 0x1a70b0 ; add byte ptr [rax], al ; nop ; int1 ; call rdx
0x00000000001a74e8 : xor al, 0 ; add byte ptr [rax], al ; xchg eax, esp ; fild dword ptr [rax] ; add byte ptr [rax], ah ; pop rdi ; int1 ; call rbx
0x0000000000080a37 : xor al, 0 ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x80a4d ; call rax
0x0000000000198c00 : xor al, 0x1c ; cli ; call rsp
0x000000000006da6e : xor al, 0x48 ; lea ecx, dword ptr [rbx + 0x40] ; mov esi, 1 ; mov rdi, rbx ; call r8
0x0000000000199394 : xor al, 0x53 ; add al, byte ptr [rax] ; mov ah, 0xd ; sti ; inc dword ptr [rbx + rdx*2 + 0xee40002] ; sti ; call rsp
0x0000000000196ca8 : xor al, 0x68 ; cmc ; call rsp
0x00000000001990a0 : xor al, 0xa3 ; cli ; call rsp
0x000000000006d76b : xor al, 0xbe ; add dword ptr [rax], eax ; add byte ptr [rax], al ; mov rdi, rbx ; call rax
0x0000000000194ed1 : xor al, 0xeb ; call rsp
0x0000000000198681 : xor al, 0xf9 ; push qword ptr [rsp + rsi*8 + 1] ; add byte ptr [rsi + rsi], ah ; stc ; call rsp
0x00000000001995a1 : xor al, 0xfb ; call rsp
0x0000000000196665 : xor al, 1 ; add byte ptr [rbx + rsi*8 - 0xe], ah ; call rsp
0x0000000000198ed5 : xor al, 2 ; add ah, al ; jbe 0x198ee3 ; lcall ptr [rsp + rsi + 0x77240002] ; cli ; call rsp
0x0000000000122ceb : xor al, 2 ; add byte ptr [rcx + rcx*4 - 9], cl ; call rbx
0x0000000000198edd : xor al, 2 ; add byte ptr [rdi + rsi*2], ah ; cli ; call rsp
0x00000000001b35e9 : xor bh, dh ; call rcx
0x000000000008b5a4 : xor byte ptr [r9 + r9*4 + 0x4b], cl ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x00000000000842b8 : xor byte ptr [rax + rcx*4 + 0x5c], al ; and al, 0x28 ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x18], r10 ; call rdx
0x0000000000023f7b : xor byte ptr [rax - 0x75], cl ; je 0x23fb0 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000024fb2 : xor byte ptr [rax - 0x75], cl ; je 0x24fe7 ; mov rdi, qword ptr [rsp + 0x38] ; call r14
0x0000000000026c1e : xor byte ptr [rax - 0x75], cl ; je 0x26c53 ; mov rdi, qword ptr [rsp + 0x38] ; call r15
0x00000000001046aa : xor byte ptr [rax - 0x75], cl ; jge 0x10467b ; mov r13d, ebx ; mov rax, qword ptr [rbp - 0x48] ; call rax
0x000000000013846e : xor byte ptr [rax - 0x77], cl ; out dx, eax ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x00000000000645a9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; call rax
0x000000000003a242 : xor byte ptr [rax], al ; add byte ptr [rax], al ; call rdx
0x0000000000122edc : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453ea : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87f : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3f : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707af : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd25 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf95 : xor byte ptr [rax], al ; add byte ptr [rax], al ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76b2 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, 1 ; call rax
0x0000000000047bc5 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a874 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rdi, r13 ; call rax
0x00000000000645d2 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c93a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31e : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x000000000005969a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f6 : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db1a : xor byte ptr [rax], al ; add byte ptr [rax], al ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174fb : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0x117539 ; call rax
0x00000000000c7c29 : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xc7c55 ; mov rsi, rdi ; xor edi, edi ; call rax
0x00000000000f80fd : xor byte ptr [rax], al ; add byte ptr [rax], al ; test rax, rax ; je 0xf8160 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000004dae9 : xor byte ptr [rax], al ; add byte ptr [rax], al ; xor esi, esi ; call rax
0x00000000000ba58f : xor byte ptr [rax], al ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000193344 : xor byte ptr [rbx + rdi*8 - 0x4527f01], ch ; call rax
0x0000000000193988 : xor byte ptr [rbx], 0xfc ; call rax
0x000000000008b5a5 : xor byte ptr [rcx + rcx*4 + 0x4b], cl ; mov qword ptr [rbx], rsi ; mov rdi, r9 ; call rcx
0x00000000001932b4 : xor byte ptr [rcx - 5], ch ; call rax
0x0000000000193258 : xor byte ptr [rcx - 5], dl ; inc dword ptr [rax] ; push rdx ; sti ; call rax
0x000000000013e98f : xor byte ptr [rcx], dh ; sar byte ptr [rdx - 1], 0x4c ; mov esi, esi ; mov rdi, rbp ; call r12
0x0000000000187b90 : xor byte ptr [rdi], ch ; cmc ; call rax
0x00000000001938b0 : xor byte ptr [rdx - 4], al ; push rax ; cld ; call rax
0x0000000000193738 : xor byte ptr [rip + 0x1f10fffc], bl ; cld ; inc dword ptr [rax] ; and esp, edi ; call rax
0x000000000003763d : xor byte ptr [rsi - 0x70], ah ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; call r15
0x000000000003927a : xor byte ptr [rsi - 0x73], cl ; cmp al, 0x33 ; call rax
0x00000000001932d4 : xor byte ptr [rsi - 5], dh ; call rax
0x0000000000193894 : xor byte ptr [rsp + rdi*8 - 1], al ; adc byte ptr [rsi - 4], al ; push rax ; cld ; call rax
0x0000000000087dcd : xor cl, byte ptr [rax - 0x75] ; add eax, 0x33909b ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87def ; call rax
0x0000000000104183 : xor dword ptr [rax - 0x74b6000f], edi ; call rbx
0x0000000000089d17 : xor dword ptr [rax - 0x7b], ecx ; ror byte ptr [rax - 0x77], 3 ; je 0x89e30 ; mov rsi, r14 ; call rax
0x00000000000ba58e : xor dword ptr [rax], 0 ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000198e55 : xor dword ptr [rdx], eax ; add ah, al ; insd dword ptr [rdi], dx ; cli ; call rsp
0x000000000019362c : xor dword ptr [rsi + 0x1b08fffd], esp ; cld ; call rax
0x0000000000193548 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; call rcx
0x0000000000193628 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x0000000000193544 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; call rcx
0x0000000000193624 : xor dword ptr [rsi - 0x59ce0003], esp ; std ; push qword ptr [rcx] ; cmpsb byte ptr [rsi], byte ptr [rdi] ; std ; dec dword ptr [rax] ; sbb edi, esp ; call rax
0x00000000000453f0 : xor eax, 0x1cb ; call rax
0x00000000000704cb : xor eax, 0x30 ; call rax
0x00000000000645d8 : xor eax, 0x35c993 ; call rax
0x000000000005c940 : xor eax, 0x36462b ; call rax
0x000000000005c324 : xor eax, 0x364c47 ; call rax
0x00000000000596a0 : xor eax, 0x3678cb ; call rax
0x00000000000509fc : xor eax, 0x37056f ; call rax
0x000000000004db20 : xor eax, 0x37344b ; call rax
0x000000000007ed45 : xor eax, 0xffffdcd6 ; call rax
0x000000000007e885 : xor eax, 0xffffe196 ; call rax
0x000000000007e3cb : xor eax, 0xffffe650 ; call rax
0x000000000007cf9b : xor eax, 0xfffffa80 ; call rax
0x000000000007cd2b : xor eax, 0xfffffcf0 ; call rax
0x00000000000707b5 : xor eax, 0xfffffd46 ; call rax
0x00000000000645a6 : xor eax, dword ptr [0x30] ; call rax
0x0000000000122ed9 : xor eax, dword ptr [0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e7 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c2 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c2 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87c : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3c : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ac : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd22 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf92 : xor eax, dword ptr [0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76af : xor eax, dword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bc2 : xor eax, dword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a871 : xor eax, dword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f6 : xor eax, dword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000000645cf : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c937 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31b : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059697 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f3 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db17 : xor eax, dword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f8 : xor eax, dword ptr [0x30] ; test rax, rax ; je 0x11753c ; call rax
0x000000000004dae6 : xor eax, dword ptr [0x30] ; xor esi, esi ; call rax
0x0000000000087dd3 : xor eax, dword ptr [rax] ; mov rax, qword ptr [rax] ; test rax, rax ; je 0x87de9 ; call rax
0x000000000008fb07 : xor eax, dword ptr [rax] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000013ddb8 : xor eax, eax ; call r8
0x0000000000076b8a : xor eax, eax ; call rbx
0x000000000013dd6c : xor eax, eax ; call rcx
0x000000000013d247 : xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
0x000000000013e990 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, r14 ; mov rdi, rbp ; call r12
0x000000000013d143 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, r15 ; call r14
0x000000000013e866 : xor eax, eax ; mov edx, 0xffffffff ; mov rsi, rbx ; mov rdi, rbp ; call rcx
0x00000000000bb419 : xor eax, eax ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x00000000000ad5e1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x28] ; mov rdi, rbp ; call rbx
0x00000000000ad8c1 : xor eax, eax ; mov rcx, r13 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012caa7 : xor eax, eax ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000ad318 : xor eax, eax ; mov rcx, r15 ; mov rdx, r12 ; lea r9, qword ptr [rsp + 0x70] ; mov rdi, rbp ; call rbx
0x000000000012e715 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbp ; call r14
0x0000000000138468 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov rcx, qword ptr [rsp + 0x10] ; call rcx
0x0000000000134df0 : xor eax, eax ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x30] ; call rcx
0x000000000013500a : xor eax, eax ; mov rsi, qword ptr [rsp + 0x50] ; mov rdi, r12 ; mov rcx, qword ptr [rsp + 0x28] ; call rcx
0x00000000000acd89 : xor eax, eax ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad198 : xor eax, eax ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000002145c : xor eax, eax ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10c : xor eax, eax ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000194ec9 : xor ebx, ebp ; push qword ptr [rsp + rdx*4] ; add byte ptr [rsp + rsi - 0x15], dh ; call rsp
0x000000000002aefe : xor ebx, ebx ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x00000000001177d1 : xor ecx, dword ptr [rax - 0x73] ; jne 0x1177c2 ; lea rdi, qword ptr [rip - 0x16d] ; call rax
0x000000000010431d : xor ecx, dword ptr [rax - 0x75] ; jl 0x104351 ; adc byte ptr [rax - 0x75], cl ; and al, 0x18 ; call rax
0x000000000008b5ac : xor ecx, dword ptr [rcx + rcx*4 - 0x31] ; call rcx
0x0000000000029873 : xor ecx, ecx ; call r15
0x000000000002145e : xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10e : xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000012b79c : xor edi, dword ptr [0x30] ; call rax
0x0000000000195c69 : xor edi, ebp ; call rsp
0x00000000000c7c35 : xor edi, edi ; call rax
0x0000000000193989 : xor edi, esp ; call rax
0x000000000003a23f : xor edx, dword ptr [0x30] ; call rdx
0x0000000000021463 : xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad110 : xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000104ff8 : xor edx, edx ; mov esi, 1 ; mov rdi, rbp ; call rbx
0x000000000012cdd0 : xor edx, edx ; mov rsi, r12 ; mov rdi, rbx ; mov rcx, r13 ; call r15
0x000000000012ccbe : xor edx, edx ; mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; mov rcx, rax ; call r12
0x0000000000104ad1 : xor edx, edx ; xor esi, esi ; call rbx
0x00000000000f8106 : xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call rax
0x000000000004daed : xor esi, esi ; call rax
0x0000000000104ad3 : xor esi, esi ; call rbx
0x0000000000104af5 : xor esi, esi ; mov rdi, r12 ; call rbx
0x0000000000104b1a : xor esi, esi ; mov rdi, r13 ; call rbx
0x0000000000104b3e : xor esi, esi ; mov rdi, r14 ; call rbx
0x0000000000104b5e : xor esi, esi ; mov rdi, r15 ; call rbx
0x00000000000f8108 : xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001109fd : xor esi, esi ; mov rdx, qword ptr [rsp + 0x10] ; mov edi, 0x2000004 ; call rax
0x000000000004540c : xor esi, esi ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
0x000000000003a5d9 : xor esi, esi ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; call rdx
0x0000000000076b89 : xor r8d, r8d ; call rbx
0x00000000000bb418 : xor r8d, r8d ; mov rcx, r13 ; lea r9, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rax] ; call r14
0x000000000012caa6 : xor r8d, r8d ; mov rcx, r14 ; mov rdi, r13 ; call r12
0x00000000000acd88 : xor r8d, r8d ; mov rsi, r13 ; lea r9, qword ptr [rsp + 0x20] ; lea rcx, qword ptr [rax + 4] ; call rbx
0x00000000000ad197 : xor r8d, r8d ; push 0 ; lea rcx, qword ptr [rax + 4] ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x000000000002145b : xor r8d, r8d ; xor ecx, ecx ; movzx eax, al ; xor edx, edx ; add eax, 1 ; push rax ; call rbx
0x00000000000ad10b : xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea r9, qword ptr [rsp + 0x20] ; call rbx
0x0000000000029872 : xor r9d, r9d ; call r15
0x00000000000645a5 : xor rax, qword ptr [0x30] ; call rax
0x0000000000122ed8 : xor rax, qword ptr [0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e6 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c1 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c1 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87b : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3b : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707ab : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd21 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf91 : xor rax, qword ptr [0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76ae : xor rax, qword ptr [0x30] ; mov edi, 1 ; call rax
0x0000000000047bc1 : xor rax, qword ptr [0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a870 : xor rax, qword ptr [0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f5 : xor rax, qword ptr [0x30] ; mov rdi, r13 ; call rax
0x00000000000645ce : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c936 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c31a : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059696 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f2 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db16 : xor rax, qword ptr [0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f7 : xor rax, qword ptr [0x30] ; test rax, rax ; je 0x11753d ; call rax
0x000000000004dae5 : xor rax, qword ptr [0x30] ; xor esi, esi ; call rax
0x00000000000645a4 : xor rax, qword ptr fs:[0x30] ; call rax
0x0000000000122ed7 : xor rax, qword ptr fs:[0x30] ; lea rdi, qword ptr [rip + 0x2a2815] ; call rax
0x00000000000453e5 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip + 0x1cb] ; call rax
0x00000000000704c0 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip + 0x30] ; call rax
0x000000000007e3c0 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x19b0] ; call rax
0x000000000007e87a : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x1e6a] ; call rax
0x000000000007ed3a : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x232a] ; call rax
0x00000000000707aa : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x2ba] ; call rax
0x000000000007cd20 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x310] ; call rax
0x000000000007cf90 : xor rax, qword ptr fs:[0x30] ; lea rsi, qword ptr [rip - 0x580] ; call rax
0x00000000000f76ad : xor rax, qword ptr fs:[0x30] ; mov edi, 1 ; call rax
0x0000000000047bc0 : xor rax, qword ptr fs:[0x30] ; mov edi, dword ptr [rsp + 0x3c] ; call rax
0x000000000003a86f : xor rax, qword ptr fs:[0x30] ; mov qword ptr fs:[rbp], rdx ; call rax
0x000000000002f5f4 : xor rax, qword ptr fs:[0x30] ; mov rdi, r13 ; call rax
0x00000000000645cd : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x35c993] ; call rax
0x000000000005c935 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x36462b] ; call rax
0x000000000005c319 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x364c47] ; call rax
0x0000000000059695 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x3678cb] ; call rax
0x00000000000509f1 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x37056f] ; call rax
0x000000000004db15 : xor rax, qword ptr fs:[0x30] ; mov rsi, qword ptr [rip + 0x37344b] ; call rax
0x00000000001174f6 : xor rax, qword ptr fs:[0x30] ; test rax, rax ; je 0x11753e ; call rax
0x000000000004dae4 : xor rax, qword ptr fs:[0x30] ; xor esi, esi ; call rax
0x000000000012b79b : xor rdi, qword ptr [0x30] ; call rax
0x000000000012b79a : xor rdi, qword ptr fs:[0x30] ; call rax
0x000000000003a23e : xor rdx, qword ptr [0x30] ; call rdx
0x000000000003a23d : xor rdx, qword ptr fs:[0x30] ; call rdx
0x00000000000f8105 : xor rdx, rdx ; xor esi, esi ; mov rdi, rbx ; call rax
0x00000000001877b0 : xor spl, 0xff ; sar byte ptr [rdi - 0xc], 1 ; call rax
